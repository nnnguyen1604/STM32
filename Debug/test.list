
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a64  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000155c  08008c50  08008c50  00018c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1ac  0800a1ac  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1ac  0800a1ac  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1ac  0800a1ac  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1ac  0800a1ac  0001a1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1b0  0800a1b0  0001a1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a1b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  200001e8  0800a39c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  0800a39c  000206d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a046  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e79  00000000  00000000  0002a257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002c0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002cb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8ea  00000000  00000000  0002d440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf81  00000000  00000000  00047d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097ded  00000000  00000000  00054cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eca98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e9c  00000000  00000000  000ecae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e8 	.word	0x200001e8
 8000204:	00000000 	.word	0x00000000
 8000208:	08008c34 	.word	0x08008c34

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001ec 	.word	0x200001ec
 8000224:	08008c34 	.word	0x08008c34

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__gesf2>:
 8000c40:	f04f 3cff 	mov.w	ip, #4294967295
 8000c44:	e006      	b.n	8000c54 <__cmpsf2+0x4>
 8000c46:	bf00      	nop

08000c48 <__lesf2>:
 8000c48:	f04f 0c01 	mov.w	ip, #1
 8000c4c:	e002      	b.n	8000c54 <__cmpsf2+0x4>
 8000c4e:	bf00      	nop

08000c50 <__cmpsf2>:
 8000c50:	f04f 0c01 	mov.w	ip, #1
 8000c54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d011      	beq.n	8000c90 <__cmpsf2+0x40>
 8000c6c:	b001      	add	sp, #4
 8000c6e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c72:	bf18      	it	ne
 8000c74:	ea90 0f01 	teqne	r0, r1
 8000c78:	bf58      	it	pl
 8000c7a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c7e:	bf88      	it	hi
 8000c80:	17c8      	asrhi	r0, r1, #31
 8000c82:	bf38      	it	cc
 8000c84:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c88:	bf18      	it	ne
 8000c8a:	f040 0001 	orrne.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c94:	d102      	bne.n	8000c9c <__cmpsf2+0x4c>
 8000c96:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c9a:	d105      	bne.n	8000ca8 <__cmpsf2+0x58>
 8000c9c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ca0:	d1e4      	bne.n	8000c6c <__cmpsf2+0x1c>
 8000ca2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ca6:	d0e1      	beq.n	8000c6c <__cmpsf2+0x1c>
 8000ca8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_cfrcmple>:
 8000cb0:	4684      	mov	ip, r0
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	4661      	mov	r1, ip
 8000cb6:	e7ff      	b.n	8000cb8 <__aeabi_cfcmpeq>

08000cb8 <__aeabi_cfcmpeq>:
 8000cb8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cba:	f7ff ffc9 	bl	8000c50 <__cmpsf2>
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	bf48      	it	mi
 8000cc2:	f110 0f00 	cmnmi.w	r0, #0
 8000cc6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cc8 <__aeabi_fcmpeq>:
 8000cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ccc:	f7ff fff4 	bl	8000cb8 <__aeabi_cfcmpeq>
 8000cd0:	bf0c      	ite	eq
 8000cd2:	2001      	moveq	r0, #1
 8000cd4:	2000      	movne	r0, #0
 8000cd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cda:	bf00      	nop

08000cdc <__aeabi_fcmplt>:
 8000cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce0:	f7ff ffea 	bl	8000cb8 <__aeabi_cfcmpeq>
 8000ce4:	bf34      	ite	cc
 8000ce6:	2001      	movcc	r0, #1
 8000ce8:	2000      	movcs	r0, #0
 8000cea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cee:	bf00      	nop

08000cf0 <__aeabi_fcmple>:
 8000cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf4:	f7ff ffe0 	bl	8000cb8 <__aeabi_cfcmpeq>
 8000cf8:	bf94      	ite	ls
 8000cfa:	2001      	movls	r0, #1
 8000cfc:	2000      	movhi	r0, #0
 8000cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d02:	bf00      	nop

08000d04 <__aeabi_fcmpge>:
 8000d04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d08:	f7ff ffd2 	bl	8000cb0 <__aeabi_cfrcmple>
 8000d0c:	bf94      	ite	ls
 8000d0e:	2001      	movls	r0, #1
 8000d10:	2000      	movhi	r0, #0
 8000d12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d16:	bf00      	nop

08000d18 <__aeabi_fcmpgt>:
 8000d18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d1c:	f7ff ffc8 	bl	8000cb0 <__aeabi_cfrcmple>
 8000d20:	bf34      	ite	cc
 8000d22:	2001      	movcc	r0, #1
 8000d24:	2000      	movcs	r0, #0
 8000d26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d2a:	bf00      	nop

08000d2c <__aeabi_d2lz>:
 8000d2c:	b538      	push	{r3, r4, r5, lr}
 8000d2e:	4605      	mov	r5, r0
 8000d30:	460c      	mov	r4, r1
 8000d32:	2200      	movs	r2, #0
 8000d34:	2300      	movs	r3, #0
 8000d36:	4628      	mov	r0, r5
 8000d38:	4621      	mov	r1, r4
 8000d3a:	f7ff feab 	bl	8000a94 <__aeabi_dcmplt>
 8000d3e:	b928      	cbnz	r0, 8000d4c <__aeabi_d2lz+0x20>
 8000d40:	4628      	mov	r0, r5
 8000d42:	4621      	mov	r1, r4
 8000d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d48:	f000 b80a 	b.w	8000d60 <__aeabi_d2ulz>
 8000d4c:	4628      	mov	r0, r5
 8000d4e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000d52:	f000 f805 	bl	8000d60 <__aeabi_d2ulz>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	bd38      	pop	{r3, r4, r5, pc}
 8000d5e:	bf00      	nop

08000d60 <__aeabi_d2ulz>:
 8000d60:	b5d0      	push	{r4, r6, r7, lr}
 8000d62:	2200      	movs	r2, #0
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <__aeabi_d2ulz+0x34>)
 8000d66:	4606      	mov	r6, r0
 8000d68:	460f      	mov	r7, r1
 8000d6a:	f7ff fc21 	bl	80005b0 <__aeabi_dmul>
 8000d6e:	f7ff fef7 	bl	8000b60 <__aeabi_d2uiz>
 8000d72:	4604      	mov	r4, r0
 8000d74:	f7ff fba2 	bl	80004bc <__aeabi_ui2d>
 8000d78:	2200      	movs	r2, #0
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <__aeabi_d2ulz+0x38>)
 8000d7c:	f7ff fc18 	bl	80005b0 <__aeabi_dmul>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	4630      	mov	r0, r6
 8000d86:	4639      	mov	r1, r7
 8000d88:	f7ff fa5a 	bl	8000240 <__aeabi_dsub>
 8000d8c:	f7ff fee8 	bl	8000b60 <__aeabi_d2uiz>
 8000d90:	4621      	mov	r1, r4
 8000d92:	bdd0      	pop	{r4, r6, r7, pc}
 8000d94:	3df00000 	.word	0x3df00000
 8000d98:	41f00000 	.word	0x41f00000
 8000d9c:	00000000 	.word	0x00000000

08000da0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000da6:	f000 ff79 	bl	8001c9c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000daa:	f000 f8fd 	bl	8000fa8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dae:	f000 f9f7 	bl	80011a0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000db2:	f000 f9c7 	bl	8001144 <MX_I2C1_Init>
	MX_ADC1_Init();
 8000db6:	f000 f949 	bl	800104c <MX_ADC1_Init>
	MX_ADC2_Init();
 8000dba:	f000 f985 	bl	80010c8 <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */

	SSD1306_Init();
 8000dbe:	f000 fabf 	bl	8001340 <SSD1306_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// temperature sensor

		SSD1306_Clear();
 8000dc2:	f000 fce0 	bl	8001786 <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, gImage_chanel, 90, 50, SSD1306_COLOR_WHITE);
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	2332      	movs	r3, #50	; 0x32
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	235a      	movs	r3, #90	; 0x5a
 8000dd0:	4a69      	ldr	r2, [pc, #420]	; (8000f78 <main+0x1d8>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 fa4a 	bl	800126e <SSD1306_DrawBitmap>

		SSD1306_UpdateScreen();
 8000dda:	f000 fb75 	bl	80014c8 <SSD1306_UpdateScreen>

		HAL_Delay(2000);
 8000dde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000de2:	f000 ffbd 	bl	8001d60 <HAL_Delay>
		SSD1306_Clear();
 8000de6:	f000 fcce 	bl	8001786 <SSD1306_Clear>

		uint16_t value_temp;
		HAL_ADCEx_Calibration_Start(&hadc1);
 8000dea:	4864      	ldr	r0, [pc, #400]	; (8000f7c <main+0x1dc>)
 8000dec:	f001 fc1a 	bl	8002624 <HAL_ADCEx_Calibration_Start>
		float t;

		HAL_ADC_Start(&hadc1);
 8000df0:	4862      	ldr	r0, [pc, #392]	; (8000f7c <main+0x1dc>)
 8000df2:	f001 f8c3 	bl	8001f7c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000df6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dfa:	4860      	ldr	r0, [pc, #384]	; (8000f7c <main+0x1dc>)
 8000dfc:	f001 f96c 	bl	80020d8 <HAL_ADC_PollForConversion>
		value_temp = HAL_ADC_GetValue(&hadc1);
 8000e00:	485e      	ldr	r0, [pc, #376]	; (8000f7c <main+0x1dc>)
 8000e02:	f001 fa6f 	bl	80022e4 <HAL_ADC_GetValue>
 8000e06:	4603      	mov	r3, r0
 8000e08:	84fb      	strh	r3, [r7, #38]	; 0x26
		t = (value_temp / 4096.0) * 3.3 * 100.0;
 8000e0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fb65 	bl	80004dc <__aeabi_i2d>
 8000e12:	f04f 0200 	mov.w	r2, #0
 8000e16:	4b5a      	ldr	r3, [pc, #360]	; (8000f80 <main+0x1e0>)
 8000e18:	f7ff fcf4 	bl	8000804 <__aeabi_ddiv>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	a352      	add	r3, pc, #328	; (adr r3, 8000f70 <main+0x1d0>)
 8000e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2a:	f7ff fbc1 	bl	80005b0 <__aeabi_dmul>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	4b52      	ldr	r3, [pc, #328]	; (8000f84 <main+0x1e4>)
 8000e3c:	f7ff fbb8 	bl	80005b0 <__aeabi_dmul>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff feaa 	bl	8000ba0 <__aeabi_d2f>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	623b      	str	r3, [r7, #32]

		// Light sensor
		uint16_t value_light;

		HAL_ADCEx_Calibration_Start(&hadc2);
 8000e50:	484d      	ldr	r0, [pc, #308]	; (8000f88 <main+0x1e8>)
 8000e52:	f001 fbe7 	bl	8002624 <HAL_ADCEx_Calibration_Start>
		float k;

		HAL_ADC_Start(&hadc2);
 8000e56:	484c      	ldr	r0, [pc, #304]	; (8000f88 <main+0x1e8>)
 8000e58:	f001 f890 	bl	8001f7c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 1000);
 8000e5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e60:	4849      	ldr	r0, [pc, #292]	; (8000f88 <main+0x1e8>)
 8000e62:	f001 f939 	bl	80020d8 <HAL_ADC_PollForConversion>
		value_light = HAL_ADC_GetValue(&hadc2);
 8000e66:	4848      	ldr	r0, [pc, #288]	; (8000f88 <main+0x1e8>)
 8000e68:	f001 fa3c 	bl	80022e4 <HAL_ADC_GetValue>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	83fb      	strh	r3, [r7, #30]
		k = (value_light / 4096.0) * 3.3 * 100.0;
 8000e70:	8bfb      	ldrh	r3, [r7, #30]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fb32 	bl	80004dc <__aeabi_i2d>
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	4b40      	ldr	r3, [pc, #256]	; (8000f80 <main+0x1e0>)
 8000e7e:	f7ff fcc1 	bl	8000804 <__aeabi_ddiv>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	a339      	add	r3, pc, #228	; (adr r3, 8000f70 <main+0x1d0>)
 8000e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e90:	f7ff fb8e 	bl	80005b0 <__aeabi_dmul>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	4610      	mov	r0, r2
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <main+0x1e4>)
 8000ea2:	f7ff fb85 	bl	80005b0 <__aeabi_dmul>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	4610      	mov	r0, r2
 8000eac:	4619      	mov	r1, r3
 8000eae:	f7ff fe77 	bl	8000ba0 <__aeabi_d2f>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	61bb      	str	r3, [r7, #24]

		// Den sang khi cam bien anh sang thay khong có anh sang

		if (k < 45) {
 8000eb6:	4935      	ldr	r1, [pc, #212]	; (8000f8c <main+0x1ec>)
 8000eb8:	69b8      	ldr	r0, [r7, #24]
 8000eba:	f7ff ff0f 	bl	8000cdc <__aeabi_fcmplt>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00e      	beq.n	8000ee2 <main+0x142>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	4831      	ldr	r0, [pc, #196]	; (8000f90 <main+0x1f0>)
 8000eca:	f001 fed1 	bl	8002c70 <HAL_GPIO_WritePin>
			SSD1306_Puts("*", &Font_11x18, 1);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4930      	ldr	r1, [pc, #192]	; (8000f94 <main+0x1f4>)
 8000ed2:	4831      	ldr	r0, [pc, #196]	; (8000f98 <main+0x1f8>)
 8000ed4:	f000 fc32 	bl	800173c <SSD1306_Puts>
			SSD1306_GotoXY(30, 50);
 8000ed8:	2132      	movs	r1, #50	; 0x32
 8000eda:	201e      	movs	r0, #30
 8000edc:	f000 fb98 	bl	8001610 <SSD1306_GotoXY>
 8000ee0:	e004      	b.n	8000eec <main+0x14c>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2120      	movs	r1, #32
 8000ee6:	482a      	ldr	r0, [pc, #168]	; (8000f90 <main+0x1f0>)
 8000ee8:	f001 fec2 	bl	8002c70 <HAL_GPIO_WritePin>

		// Chuyển nhiệt độ thành chuỗi và hiển thị lên màn hình
		char snum_temp[10];
		char snum_light[10];

		sprintf(snum_temp, "%.2f", t);
 8000eec:	6a38      	ldr	r0, [r7, #32]
 8000eee:	f7ff fb07 	bl	8000500 <__aeabi_f2d>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	f107 000c 	add.w	r0, r7, #12
 8000efa:	4928      	ldr	r1, [pc, #160]	; (8000f9c <main+0x1fc>)
 8000efc:	f004 f8dc 	bl	80050b8 <siprintf>

		sprintf(snum_light, "%.2f", k);
 8000f00:	69b8      	ldr	r0, [r7, #24]
 8000f02:	f7ff fafd 	bl	8000500 <__aeabi_f2d>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4638      	mov	r0, r7
 8000f0c:	4923      	ldr	r1, [pc, #140]	; (8000f9c <main+0x1fc>)
 8000f0e:	f004 f8d3 	bl	80050b8 <siprintf>

		SSD1306_GotoXY(0, 0);
 8000f12:	2100      	movs	r1, #0
 8000f14:	2000      	movs	r0, #0
 8000f16:	f000 fb7b 	bl	8001610 <SSD1306_GotoXY>
		SSD1306_Puts("TEMP:", &Font_11x18, 1);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	491d      	ldr	r1, [pc, #116]	; (8000f94 <main+0x1f4>)
 8000f1e:	4820      	ldr	r0, [pc, #128]	; (8000fa0 <main+0x200>)
 8000f20:	f000 fc0c 	bl	800173c <SSD1306_Puts>
		SSD1306_GotoXY(60, 0);
 8000f24:	2100      	movs	r1, #0
 8000f26:	203c      	movs	r0, #60	; 0x3c
 8000f28:	f000 fb72 	bl	8001610 <SSD1306_GotoXY>
		SSD1306_Puts(snum_temp, &Font_11x18, 1);
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2201      	movs	r2, #1
 8000f32:	4918      	ldr	r1, [pc, #96]	; (8000f94 <main+0x1f4>)
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fc01 	bl	800173c <SSD1306_Puts>

		SSD1306_GotoXY(0, 30);
 8000f3a:	211e      	movs	r1, #30
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f000 fb67 	bl	8001610 <SSD1306_GotoXY>
		SSD1306_Puts("LIGHT:", &Font_11x18, 1);
 8000f42:	2201      	movs	r2, #1
 8000f44:	4913      	ldr	r1, [pc, #76]	; (8000f94 <main+0x1f4>)
 8000f46:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <main+0x204>)
 8000f48:	f000 fbf8 	bl	800173c <SSD1306_Puts>
		SSD1306_GotoXY(60, 30);
 8000f4c:	211e      	movs	r1, #30
 8000f4e:	203c      	movs	r0, #60	; 0x3c
 8000f50:	f000 fb5e 	bl	8001610 <SSD1306_GotoXY>
		SSD1306_Puts(snum_light, &Font_11x18, 1);
 8000f54:	463b      	mov	r3, r7
 8000f56:	2201      	movs	r2, #1
 8000f58:	490e      	ldr	r1, [pc, #56]	; (8000f94 <main+0x1f4>)
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fbee 	bl	800173c <SSD1306_Puts>

		SSD1306_UpdateScreen();
 8000f60:	f000 fab2 	bl	80014c8 <SSD1306_UpdateScreen>
		HAL_Delay(1000);
 8000f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f68:	f000 fefa 	bl	8001d60 <HAL_Delay>
	while (1) {
 8000f6c:	e729      	b.n	8000dc2 <main+0x22>
 8000f6e:	bf00      	nop
 8000f70:	66666666 	.word	0x66666666
 8000f74:	400a6666 	.word	0x400a6666
 8000f78:	080099c8 	.word	0x080099c8
 8000f7c:	20000204 	.word	0x20000204
 8000f80:	40b00000 	.word	0x40b00000
 8000f84:	40590000 	.word	0x40590000
 8000f88:	20000234 	.word	0x20000234
 8000f8c:	42340000 	.word	0x42340000
 8000f90:	40011000 	.word	0x40011000
 8000f94:	20000000 	.word	0x20000000
 8000f98:	08008c50 	.word	0x08008c50
 8000f9c:	08008c54 	.word	0x08008c54
 8000fa0:	08008c5c 	.word	0x08008c5c
 8000fa4:	08008c64 	.word	0x08008c64

08000fa8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b096      	sub	sp, #88	; 0x58
 8000fac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb2:	2228      	movs	r2, #40	; 0x28
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fa04 	bl	80043c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
 8000fda:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 fc1f 	bl	8003834 <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x58>
		Error_Handler();
 8000ffc:	f000 f932 	bl	8001264 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001000:	230f      	movs	r3, #15
 8001002:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f002 fe8c 	bl	8003d38 <HAL_RCC_ClockConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x82>
		Error_Handler();
 8001026:	f000 f91d 	bl	8001264 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800102a:	2302      	movs	r3, #2
 800102c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4618      	mov	r0, r3
 8001036:	f003 f80d 	bl	8004054 <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x9c>
		Error_Handler();
 8001040:	f000 f910 	bl	8001264 <Error_Handler>
	}
}
 8001044:	bf00      	nop
 8001046:	3758      	adds	r7, #88	; 0x58
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_ADC1_Init+0x74>)
 800105e:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <MX_ADC1_Init+0x78>)
 8001060:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_ADC1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_ADC1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_ADC1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_ADC1_Init+0x74>)
 8001076:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800107a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_ADC1_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_ADC1_Init+0x74>)
 8001084:	2201      	movs	r2, #1
 8001086:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <MX_ADC1_Init+0x74>)
 800108a:	f000 fe8d 	bl	8001da8 <HAL_ADC_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001094:	f000 f8e6 	bl	8001264 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001098:	2303      	movs	r3, #3
 800109a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800109c:	2301      	movs	r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_ADC1_Init+0x74>)
 80010aa:	f001 f927 	bl	80022fc <HAL_ADC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0x6c>
		Error_Handler();
 80010b4:	f000 f8d6 	bl	8001264 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000204 	.word	0x20000204
 80010c4:	40012400 	.word	0x40012400

080010c8 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <MX_ADC2_Init+0x74>)
 80010da:	4a19      	ldr	r2, [pc, #100]	; (8001140 <MX_ADC2_Init+0x78>)
 80010dc:	601a      	str	r2, [r3, #0]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_ADC2_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <MX_ADC2_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	731a      	strb	r2, [r3, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_ADC2_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	751a      	strb	r2, [r3, #20]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_ADC2_Init+0x74>)
 80010f2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010f6:	61da      	str	r2, [r3, #28]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <MX_ADC2_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
	hadc2.Init.NbrOfConversion = 1;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_ADC2_Init+0x74>)
 8001100:	2201      	movs	r2, #1
 8001102:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001104:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_ADC2_Init+0x74>)
 8001106:	f000 fe4f 	bl	8001da8 <HAL_ADC_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC2_Init+0x4c>
		Error_Handler();
 8001110:	f000 f8a8 	bl	8001264 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8001114:	2302      	movs	r3, #2
 8001116:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001118:	2301      	movs	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_ADC2_Init+0x74>)
 8001126:	f001 f8e9 	bl	80022fc <HAL_ADC_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC2_Init+0x6c>
		Error_Handler();
 8001130:	f000 f898 	bl	8001264 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000234 	.word	0x20000234
 8001140:	40012800 	.word	0x40012800

08001144 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_I2C1_Init+0x50>)
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <MX_I2C1_Init+0x54>)
 800114c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_I2C1_Init+0x50>)
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_I2C1_Init+0x58>)
 8001152:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_I2C1_Init+0x50>)
 8001162:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001166:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_I2C1_Init+0x50>)
 8001182:	f001 fd8d 	bl	8002ca0 <HAL_I2C_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800118c:	f000 f86a 	bl	8001264 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000264 	.word	0x20000264
 8001198:	40005400 	.word	0x40005400
 800119c:	00061a80 	.word	0x00061a80

080011a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a27      	ldr	r2, [pc, #156]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a21      	ldr	r2, [pc, #132]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011d2:	f043 0320 	orr.w	r3, r3, #32
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0320 	and.w	r3, r3, #32
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a1b      	ldr	r2, [pc, #108]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a15      	ldr	r2, [pc, #84]	; (8001258 <MX_GPIO_Init+0xb8>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <MX_GPIO_Init+0xb8>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2120      	movs	r1, #32
 8001218:	4810      	ldr	r0, [pc, #64]	; (800125c <MX_GPIO_Init+0xbc>)
 800121a:	f001 fd29 	bl	8002c70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800121e:	2308      	movs	r3, #8
 8001220:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001222:	2303      	movs	r3, #3
 8001224:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4619      	mov	r1, r3
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <MX_GPIO_Init+0xc0>)
 800122e:	f001 fb8b 	bl	8002948 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001232:	2320      	movs	r3, #32
 8001234:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2302      	movs	r3, #2
 8001240:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4619      	mov	r1, r3
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_GPIO_Init+0xbc>)
 800124a:	f001 fb7d 	bl	8002948 <HAL_GPIO_Init>

}
 800124e:	bf00      	nop
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	40011000 	.word	0x40011000
 8001260:	40010800 	.word	0x40010800

08001264 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800126c:	e7fe      	b.n	800126c <Error_Handler+0x8>

0800126e <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60ba      	str	r2, [r7, #8]
 8001276:	461a      	mov	r2, r3
 8001278:	4603      	mov	r3, r0
 800127a:	81fb      	strh	r3, [r7, #14]
 800127c:	460b      	mov	r3, r1
 800127e:	81bb      	strh	r3, [r7, #12]
 8001280:	4613      	mov	r3, r2
 8001282:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	3307      	adds	r3, #7
 800128a:	2b00      	cmp	r3, #0
 800128c:	da00      	bge.n	8001290 <SSD1306_DrawBitmap+0x22>
 800128e:	3307      	adds	r3, #7
 8001290:	10db      	asrs	r3, r3, #3
 8001292:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001298:	2300      	movs	r3, #0
 800129a:	82bb      	strh	r3, [r7, #20]
 800129c:	e044      	b.n	8001328 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800129e:	2300      	movs	r3, #0
 80012a0:	827b      	strh	r3, [r7, #18]
 80012a2:	e02f      	b.n	8001304 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80012a4:	8a7b      	ldrh	r3, [r7, #18]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	75fb      	strb	r3, [r7, #23]
 80012b4:	e012      	b.n	80012dc <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80012b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012ba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80012be:	fb03 f202 	mul.w	r2, r3, r2
 80012c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	da00      	bge.n	80012cc <SSD1306_DrawBitmap+0x5e>
 80012ca:	3307      	adds	r3, #7
 80012cc:	10db      	asrs	r3, r3, #3
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	461a      	mov	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4413      	add	r3, r2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80012dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	da09      	bge.n	80012f8 <SSD1306_DrawBitmap+0x8a>
 80012e4:	89fa      	ldrh	r2, [r7, #14]
 80012e6:	8a7b      	ldrh	r3, [r7, #18]
 80012e8:	4413      	add	r3, r2
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	89b9      	ldrh	r1, [r7, #12]
 80012ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f92e 	bl	8001554 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80012f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	3301      	adds	r3, #1
 8001300:	b29b      	uxth	r3, r3
 8001302:	827b      	strh	r3, [r7, #18]
 8001304:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbc9      	blt.n	80012a4 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001310:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001314:	b29b      	uxth	r3, r3
 8001316:	3301      	adds	r3, #1
 8001318:	b29b      	uxth	r3, r3
 800131a:	82bb      	strh	r3, [r7, #20]
 800131c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001320:	b29b      	uxth	r3, r3
 8001322:	3301      	adds	r3, #1
 8001324:	b29b      	uxth	r3, r3
 8001326:	81bb      	strh	r3, [r7, #12]
 8001328:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800132c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001330:	429a      	cmp	r2, r3
 8001332:	dbb4      	blt.n	800129e <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001346:	f000 fa27 	bl	8001798 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800134a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800134e:	2201      	movs	r2, #1
 8001350:	2178      	movs	r1, #120	; 0x78
 8001352:	485b      	ldr	r0, [pc, #364]	; (80014c0 <SSD1306_Init+0x180>)
 8001354:	f001 fee6 	bl	8003124 <HAL_I2C_IsDeviceReady>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800135e:	2300      	movs	r3, #0
 8001360:	e0a9      	b.n	80014b6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001362:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001366:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001368:	e002      	b.n	8001370 <SSD1306_Init+0x30>
		p--;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3b01      	subs	r3, #1
 800136e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f9      	bne.n	800136a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001376:	22ae      	movs	r2, #174	; 0xae
 8001378:	2100      	movs	r1, #0
 800137a:	2078      	movs	r0, #120	; 0x78
 800137c:	f000 fa86 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001380:	2220      	movs	r2, #32
 8001382:	2100      	movs	r1, #0
 8001384:	2078      	movs	r0, #120	; 0x78
 8001386:	f000 fa81 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800138a:	2210      	movs	r2, #16
 800138c:	2100      	movs	r1, #0
 800138e:	2078      	movs	r0, #120	; 0x78
 8001390:	f000 fa7c 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001394:	22b0      	movs	r2, #176	; 0xb0
 8001396:	2100      	movs	r1, #0
 8001398:	2078      	movs	r0, #120	; 0x78
 800139a:	f000 fa77 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800139e:	22c8      	movs	r2, #200	; 0xc8
 80013a0:	2100      	movs	r1, #0
 80013a2:	2078      	movs	r0, #120	; 0x78
 80013a4:	f000 fa72 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	2078      	movs	r0, #120	; 0x78
 80013ae:	f000 fa6d 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80013b2:	2210      	movs	r2, #16
 80013b4:	2100      	movs	r1, #0
 80013b6:	2078      	movs	r0, #120	; 0x78
 80013b8:	f000 fa68 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80013bc:	2240      	movs	r2, #64	; 0x40
 80013be:	2100      	movs	r1, #0
 80013c0:	2078      	movs	r0, #120	; 0x78
 80013c2:	f000 fa63 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80013c6:	2281      	movs	r2, #129	; 0x81
 80013c8:	2100      	movs	r1, #0
 80013ca:	2078      	movs	r0, #120	; 0x78
 80013cc:	f000 fa5e 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80013d0:	22ff      	movs	r2, #255	; 0xff
 80013d2:	2100      	movs	r1, #0
 80013d4:	2078      	movs	r0, #120	; 0x78
 80013d6:	f000 fa59 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80013da:	22a1      	movs	r2, #161	; 0xa1
 80013dc:	2100      	movs	r1, #0
 80013de:	2078      	movs	r0, #120	; 0x78
 80013e0:	f000 fa54 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80013e4:	22a6      	movs	r2, #166	; 0xa6
 80013e6:	2100      	movs	r1, #0
 80013e8:	2078      	movs	r0, #120	; 0x78
 80013ea:	f000 fa4f 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80013ee:	22a8      	movs	r2, #168	; 0xa8
 80013f0:	2100      	movs	r1, #0
 80013f2:	2078      	movs	r0, #120	; 0x78
 80013f4:	f000 fa4a 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80013f8:	223f      	movs	r2, #63	; 0x3f
 80013fa:	2100      	movs	r1, #0
 80013fc:	2078      	movs	r0, #120	; 0x78
 80013fe:	f000 fa45 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001402:	22a4      	movs	r2, #164	; 0xa4
 8001404:	2100      	movs	r1, #0
 8001406:	2078      	movs	r0, #120	; 0x78
 8001408:	f000 fa40 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800140c:	22d3      	movs	r2, #211	; 0xd3
 800140e:	2100      	movs	r1, #0
 8001410:	2078      	movs	r0, #120	; 0x78
 8001412:	f000 fa3b 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2078      	movs	r0, #120	; 0x78
 800141c:	f000 fa36 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001420:	22d5      	movs	r2, #213	; 0xd5
 8001422:	2100      	movs	r1, #0
 8001424:	2078      	movs	r0, #120	; 0x78
 8001426:	f000 fa31 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800142a:	22f0      	movs	r2, #240	; 0xf0
 800142c:	2100      	movs	r1, #0
 800142e:	2078      	movs	r0, #120	; 0x78
 8001430:	f000 fa2c 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001434:	22d9      	movs	r2, #217	; 0xd9
 8001436:	2100      	movs	r1, #0
 8001438:	2078      	movs	r0, #120	; 0x78
 800143a:	f000 fa27 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800143e:	2222      	movs	r2, #34	; 0x22
 8001440:	2100      	movs	r1, #0
 8001442:	2078      	movs	r0, #120	; 0x78
 8001444:	f000 fa22 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001448:	22da      	movs	r2, #218	; 0xda
 800144a:	2100      	movs	r1, #0
 800144c:	2078      	movs	r0, #120	; 0x78
 800144e:	f000 fa1d 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001452:	2212      	movs	r2, #18
 8001454:	2100      	movs	r1, #0
 8001456:	2078      	movs	r0, #120	; 0x78
 8001458:	f000 fa18 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800145c:	22db      	movs	r2, #219	; 0xdb
 800145e:	2100      	movs	r1, #0
 8001460:	2078      	movs	r0, #120	; 0x78
 8001462:	f000 fa13 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001466:	2220      	movs	r2, #32
 8001468:	2100      	movs	r1, #0
 800146a:	2078      	movs	r0, #120	; 0x78
 800146c:	f000 fa0e 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001470:	228d      	movs	r2, #141	; 0x8d
 8001472:	2100      	movs	r1, #0
 8001474:	2078      	movs	r0, #120	; 0x78
 8001476:	f000 fa09 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800147a:	2214      	movs	r2, #20
 800147c:	2100      	movs	r1, #0
 800147e:	2078      	movs	r0, #120	; 0x78
 8001480:	f000 fa04 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001484:	22af      	movs	r2, #175	; 0xaf
 8001486:	2100      	movs	r1, #0
 8001488:	2078      	movs	r0, #120	; 0x78
 800148a:	f000 f9ff 	bl	800188c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800148e:	222e      	movs	r2, #46	; 0x2e
 8001490:	2100      	movs	r1, #0
 8001492:	2078      	movs	r0, #120	; 0x78
 8001494:	f000 f9fa 	bl	800188c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001498:	2000      	movs	r0, #0
 800149a:	f000 f843 	bl	8001524 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800149e:	f000 f813 	bl	80014c8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <SSD1306_Init+0x184>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SSD1306_Init+0x184>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SSD1306_Init+0x184>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80014b4:	2301      	movs	r3, #1
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000264 	.word	0x20000264
 80014c4:	200006b8 	.word	0x200006b8

080014c8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80014ce:	2300      	movs	r3, #0
 80014d0:	71fb      	strb	r3, [r7, #7]
 80014d2:	e01d      	b.n	8001510 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	3b50      	subs	r3, #80	; 0x50
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	2100      	movs	r1, #0
 80014de:	2078      	movs	r0, #120	; 0x78
 80014e0:	f000 f9d4 	bl	800188c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	2078      	movs	r0, #120	; 0x78
 80014ea:	f000 f9cf 	bl	800188c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80014ee:	2210      	movs	r2, #16
 80014f0:	2100      	movs	r1, #0
 80014f2:	2078      	movs	r0, #120	; 0x78
 80014f4:	f000 f9ca 	bl	800188c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	01db      	lsls	r3, r3, #7
 80014fc:	4a08      	ldr	r2, [pc, #32]	; (8001520 <SSD1306_UpdateScreen+0x58>)
 80014fe:	441a      	add	r2, r3
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	2140      	movs	r1, #64	; 0x40
 8001504:	2078      	movs	r0, #120	; 0x78
 8001506:	f000 f95b 	bl	80017c0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	3301      	adds	r3, #1
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b07      	cmp	r3, #7
 8001514:	d9de      	bls.n	80014d4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200002b8 	.word	0x200002b8

08001524 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <SSD1306_Fill+0x14>
 8001534:	2300      	movs	r3, #0
 8001536:	e000      	b.n	800153a <SSD1306_Fill+0x16>
 8001538:	23ff      	movs	r3, #255	; 0xff
 800153a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800153e:	4619      	mov	r1, r3
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <SSD1306_Fill+0x2c>)
 8001542:	f002 ff3f 	bl	80043c4 <memset>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002b8 	.word	0x200002b8

08001554 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	80fb      	strh	r3, [r7, #6]
 800155e:	460b      	mov	r3, r1
 8001560:	80bb      	strh	r3, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	70fb      	strb	r3, [r7, #3]
	if (
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	2b7f      	cmp	r3, #127	; 0x7f
 800156a:	d848      	bhi.n	80015fe <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	2b3f      	cmp	r3, #63	; 0x3f
 8001570:	d845      	bhi.n	80015fe <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001572:	4b25      	ldr	r3, [pc, #148]	; (8001608 <SSD1306_DrawPixel+0xb4>)
 8001574:	791b      	ldrb	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf0c      	ite	eq
 8001580:	2301      	moveq	r3, #1
 8001582:	2300      	movne	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d11a      	bne.n	80015c4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	88bb      	ldrh	r3, [r7, #4]
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	b298      	uxth	r0, r3
 8001596:	4603      	mov	r3, r0
 8001598:	01db      	lsls	r3, r3, #7
 800159a:	4413      	add	r3, r2
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <SSD1306_DrawPixel+0xb8>)
 800159e:	5cd3      	ldrb	r3, [r2, r3]
 80015a0:	b25a      	sxtb	r2, r3
 80015a2:	88bb      	ldrh	r3, [r7, #4]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	2101      	movs	r1, #1
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b259      	sxtb	r1, r3
 80015b4:	88fa      	ldrh	r2, [r7, #6]
 80015b6:	4603      	mov	r3, r0
 80015b8:	01db      	lsls	r3, r3, #7
 80015ba:	4413      	add	r3, r2
 80015bc:	b2c9      	uxtb	r1, r1
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <SSD1306_DrawPixel+0xb8>)
 80015c0:	54d1      	strb	r1, [r2, r3]
 80015c2:	e01d      	b.n	8001600 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015c4:	88fa      	ldrh	r2, [r7, #6]
 80015c6:	88bb      	ldrh	r3, [r7, #4]
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	b298      	uxth	r0, r3
 80015cc:	4603      	mov	r3, r0
 80015ce:	01db      	lsls	r3, r3, #7
 80015d0:	4413      	add	r3, r2
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <SSD1306_DrawPixel+0xb8>)
 80015d4:	5cd3      	ldrb	r3, [r2, r3]
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	88bb      	ldrh	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4013      	ands	r3, r2
 80015ec:	b259      	sxtb	r1, r3
 80015ee:	88fa      	ldrh	r2, [r7, #6]
 80015f0:	4603      	mov	r3, r0
 80015f2:	01db      	lsls	r3, r3, #7
 80015f4:	4413      	add	r3, r2
 80015f6:	b2c9      	uxtb	r1, r1
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <SSD1306_DrawPixel+0xb8>)
 80015fa:	54d1      	strb	r1, [r2, r3]
 80015fc:	e000      	b.n	8001600 <SSD1306_DrawPixel+0xac>
		return;
 80015fe:	bf00      	nop
	}
}
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	200006b8 	.word	0x200006b8
 800160c:	200002b8 	.word	0x200002b8

08001610 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	460a      	mov	r2, r1
 800161a:	80fb      	strh	r3, [r7, #6]
 800161c:	4613      	mov	r3, r2
 800161e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001620:	4a05      	ldr	r2, [pc, #20]	; (8001638 <SSD1306_GotoXY+0x28>)
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <SSD1306_GotoXY+0x28>)
 8001628:	88bb      	ldrh	r3, [r7, #4]
 800162a:	8053      	strh	r3, [r2, #2]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	200006b8 	.word	0x200006b8

0800163c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
 8001648:	4613      	mov	r3, r2
 800164a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800164c:	4b3a      	ldr	r3, [pc, #232]	; (8001738 <SSD1306_Putc+0xfc>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
	if (
 8001658:	2b7f      	cmp	r3, #127	; 0x7f
 800165a:	dc07      	bgt.n	800166c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800165c:	4b36      	ldr	r3, [pc, #216]	; (8001738 <SSD1306_Putc+0xfc>)
 800165e:	885b      	ldrh	r3, [r3, #2]
 8001660:	461a      	mov	r2, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	785b      	ldrb	r3, [r3, #1]
 8001666:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001668:	2b3f      	cmp	r3, #63	; 0x3f
 800166a:	dd01      	ble.n	8001670 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800166c:	2300      	movs	r3, #0
 800166e:	e05e      	b.n	800172e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e04b      	b.n	800170e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	3b20      	subs	r3, #32
 800167e:	6839      	ldr	r1, [r7, #0]
 8001680:	7849      	ldrb	r1, [r1, #1]
 8001682:	fb01 f303 	mul.w	r3, r1, r3
 8001686:	4619      	mov	r1, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	440b      	add	r3, r1
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	e030      	b.n	80016fc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d010      	beq.n	80016cc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <SSD1306_Putc+0xfc>)
 80016ac:	881a      	ldrh	r2, [r3, #0]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	b298      	uxth	r0, r3
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <SSD1306_Putc+0xfc>)
 80016b8:	885a      	ldrh	r2, [r3, #2]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4413      	add	r3, r2
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	79ba      	ldrb	r2, [r7, #6]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff ff45 	bl	8001554 <SSD1306_DrawPixel>
 80016ca:	e014      	b.n	80016f6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <SSD1306_Putc+0xfc>)
 80016ce:	881a      	ldrh	r2, [r3, #0]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	b298      	uxth	r0, r3
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <SSD1306_Putc+0xfc>)
 80016da:	885a      	ldrh	r2, [r3, #2]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	b299      	uxth	r1, r3
 80016e4:	79bb      	ldrb	r3, [r7, #6]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	bf0c      	ite	eq
 80016ea:	2301      	moveq	r3, #1
 80016ec:	2300      	movne	r3, #0
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	f7ff ff2f 	bl	8001554 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	3301      	adds	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4293      	cmp	r3, r2
 8001706:	d3c8      	bcc.n	800169a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	785b      	ldrb	r3, [r3, #1]
 8001712:	461a      	mov	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	4293      	cmp	r3, r2
 8001718:	d3ad      	bcc.n	8001676 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <SSD1306_Putc+0xfc>)
 800171c:	881a      	ldrh	r2, [r3, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b29b      	uxth	r3, r3
 8001724:	4413      	add	r3, r2
 8001726:	b29a      	uxth	r2, r3
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <SSD1306_Putc+0xfc>)
 800172a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800172c:	79fb      	ldrb	r3, [r7, #7]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200006b8 	.word	0x200006b8

0800173c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	4613      	mov	r3, r2
 8001748:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800174a:	e012      	b.n	8001772 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	79fa      	ldrb	r2, [r7, #7]
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff71 	bl	800163c <SSD1306_Putc>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d002      	beq.n	800176c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	e008      	b.n	800177e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	3301      	adds	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1e8      	bne.n	800174c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	781b      	ldrb	r3, [r3, #0]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800178a:	2000      	movs	r0, #0
 800178c:	f7ff feca 	bl	8001524 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001790:	f7ff fe9a 	bl	80014c8 <SSD1306_UpdateScreen>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <ssd1306_I2C_Init+0x24>)
 80017a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017a2:	e002      	b.n	80017aa <ssd1306_I2C_Init+0x12>
		p--;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f9      	bne.n	80017a4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	0003d090 	.word	0x0003d090

080017c0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b0c7      	sub	sp, #284	; 0x11c
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	4604      	mov	r4, r0
 80017c8:	4608      	mov	r0, r1
 80017ca:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80017ce:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80017d2:	600a      	str	r2, [r1, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017da:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80017de:	4622      	mov	r2, r4
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017e6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80017ea:	4602      	mov	r2, r0
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017f6:	460a      	mov	r2, r1
 80017f8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80017fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001802:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001806:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800180e:	2300      	movs	r3, #0
 8001810:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001814:	e015      	b.n	8001842 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001816:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800181a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800181e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	441a      	add	r2, r3
 8001826:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800182a:	3301      	adds	r3, #1
 800182c:	7811      	ldrb	r1, [r2, #0]
 800182e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001832:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001836:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001838:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800183c:	3301      	adds	r3, #1
 800183e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001842:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001846:	b29b      	uxth	r3, r3
 8001848:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800184c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001850:	8812      	ldrh	r2, [r2, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d8df      	bhi.n	8001816 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001856:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800185a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b299      	uxth	r1, r3
 8001862:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001866:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	b29b      	uxth	r3, r3
 8001870:	f107 020c 	add.w	r2, r7, #12
 8001874:	200a      	movs	r0, #10
 8001876:	9000      	str	r0, [sp, #0]
 8001878:	4803      	ldr	r0, [pc, #12]	; (8001888 <ssd1306_I2C_WriteMulti+0xc8>)
 800187a:	f001 fb55 	bl	8002f28 <HAL_I2C_Master_Transmit>
}
 800187e:	bf00      	nop
 8001880:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	20000264 	.word	0x20000264

0800188c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af02      	add	r7, sp, #8
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
 8001896:	460b      	mov	r3, r1
 8001898:	71bb      	strb	r3, [r7, #6]
 800189a:	4613      	mov	r3, r2
 800189c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800189e:	79bb      	ldrb	r3, [r7, #6]
 80018a0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80018a2:	797b      	ldrb	r3, [r7, #5]
 80018a4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	b299      	uxth	r1, r3
 80018aa:	f107 020c 	add.w	r2, r7, #12
 80018ae:	230a      	movs	r3, #10
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2302      	movs	r3, #2
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <ssd1306_I2C_Write+0x38>)
 80018b6:	f001 fb37 	bl	8002f28 <HAL_I2C_Master_Transmit>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000264 	.word	0x20000264

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_MspInit+0x5c>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	4a14      	ldr	r2, [pc, #80]	; (8001924 <HAL_MspInit+0x5c>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6193      	str	r3, [r2, #24]
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_MspInit+0x5c>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_MspInit+0x5c>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <HAL_MspInit+0x5c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_MspInit+0x5c>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_MspInit+0x60>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_MspInit+0x60>)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000

0800192c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0318 	add.w	r3, r7, #24
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a28      	ldr	r2, [pc, #160]	; (80019e8 <HAL_ADC_MspInit+0xbc>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d122      	bne.n	8001992 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_ADC_MspInit+0xc0>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a26      	ldr	r2, [pc, #152]	; (80019ec <HAL_ADC_MspInit+0xc0>)
 8001952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_ADC_MspInit+0xc0>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	4b21      	ldr	r3, [pc, #132]	; (80019ec <HAL_ADC_MspInit+0xc0>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a20      	ldr	r2, [pc, #128]	; (80019ec <HAL_ADC_MspInit+0xc0>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <HAL_ADC_MspInit+0xc0>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800197c:	230c      	movs	r3, #12
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001980:	2303      	movs	r3, #3
 8001982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0318 	add.w	r3, r7, #24
 8001988:	4619      	mov	r1, r3
 800198a:	4819      	ldr	r0, [pc, #100]	; (80019f0 <HAL_ADC_MspInit+0xc4>)
 800198c:	f000 ffdc 	bl	8002948 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001990:	e026      	b.n	80019e0 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_ADC_MspInit+0xc8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d121      	bne.n	80019e0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <HAL_ADC_MspInit+0xc0>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a12      	ldr	r2, [pc, #72]	; (80019ec <HAL_ADC_MspInit+0xc0>)
 80019a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_ADC_MspInit+0xc0>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_ADC_MspInit+0xc0>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <HAL_ADC_MspInit+0xc0>)
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_ADC_MspInit+0xc0>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80019cc:	2314      	movs	r3, #20
 80019ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d0:	2303      	movs	r3, #3
 80019d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 0318 	add.w	r3, r7, #24
 80019d8:	4619      	mov	r1, r3
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <HAL_ADC_MspInit+0xc4>)
 80019dc:	f000 ffb4 	bl	8002948 <HAL_GPIO_Init>
}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40012400 	.word	0x40012400
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010800 	.word	0x40010800
 80019f4:	40012800 	.word	0x40012800

080019f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <HAL_I2C_MspInit+0x70>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d123      	bne.n	8001a60 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_I2C_MspInit+0x74>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <HAL_I2C_MspInit+0x74>)
 8001a1e:	f043 0308 	orr.w	r3, r3, #8
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_I2C_MspInit+0x74>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a30:	23c0      	movs	r3, #192	; 0xc0
 8001a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a34:	2312      	movs	r3, #18
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	4619      	mov	r1, r3
 8001a42:	480b      	ldr	r0, [pc, #44]	; (8001a70 <HAL_I2C_MspInit+0x78>)
 8001a44:	f000 ff80 	bl	8002948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_I2C_MspInit+0x74>)
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_I2C_MspInit+0x74>)
 8001a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a52:	61d3      	str	r3, [r2, #28]
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_I2C_MspInit+0x74>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a60:	bf00      	nop
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40005400 	.word	0x40005400
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010c00 	.word	0x40010c00

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <NMI_Handler+0x4>

08001a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <MemManage_Handler+0x4>

08001a86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8a:	e7fe      	b.n	8001a8a <BusFault_Handler+0x4>

08001a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <UsageFault_Handler+0x4>

08001a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aba:	f000 f935 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  return 1;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <_kill>:

int _kill(int pid, int sig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ada:	f002 fc49 	bl	8004370 <__errno>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2216      	movs	r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_exit>:

void _exit (int status)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffe7 	bl	8001ad0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b02:	e7fe      	b.n	8001b02 <_exit+0x12>

08001b04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e00a      	b.n	8001b2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b16:	f3af 8000 	nop.w
 8001b1a:	4601      	mov	r1, r0
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	60ba      	str	r2, [r7, #8]
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dbf0      	blt.n	8001b16 <_read+0x12>
  }

  return len;
 8001b34:	687b      	ldr	r3, [r7, #4]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e009      	b.n	8001b64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	60ba      	str	r2, [r7, #8]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dbf1      	blt.n	8001b50 <_write+0x12>
  }
  return len;
 8001b6c:	687b      	ldr	r3, [r7, #4]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_close>:

int _close(int file)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <_isatty>:

int _isatty(int file)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
	...

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f002 fbb2 	bl	8004370 <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2000c000 	.word	0x2000c000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	200006c0 	.word	0x200006c0
 8001c40:	200006d8 	.word	0x200006d8

08001c44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c50:	f7ff fff8 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c56:	490c      	ldr	r1, [pc, #48]	; (8001c88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c58:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c5c:	e002      	b.n	8001c64 <LoopCopyDataInit>

08001c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c62:	3304      	adds	r3, #4

08001c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c68:	d3f9      	bcc.n	8001c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c6c:	4c09      	ldr	r4, [pc, #36]	; (8001c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c70:	e001      	b.n	8001c76 <LoopFillZerobss>

08001c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c74:	3204      	adds	r2, #4

08001c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c78:	d3fb      	bcc.n	8001c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c7a:	f002 fb7f 	bl	800437c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c7e:	f7ff f88f 	bl	8000da0 <main>
  bx lr
 8001c82:	4770      	bx	lr
  ldr r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c88:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001c8c:	0800a1b4 	.word	0x0800a1b4
  ldr r2, =_sbss
 8001c90:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001c94:	200006d8 	.word	0x200006d8

08001c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <ADC1_2_IRQHandler>
	...

08001c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_Init+0x28>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_Init+0x28>)
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 fe17 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb2:	200f      	movs	r0, #15
 8001cb4:	f000 f808 	bl	8001cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb8:	f7ff fe06 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40022000 	.word	0x40022000

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x54>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x58>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fe21 	bl	800292e <HAL_SYSTICK_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00e      	b.n	8001d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d80a      	bhi.n	8001d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f000 fdf7 	bl	80028f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <HAL_InitTick+0x5c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	20000010 	.word	0x20000010
 8001d24:	2000000c 	.word	0x2000000c

08001d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_IncTick+0x1c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_IncTick+0x20>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a03      	ldr	r2, [pc, #12]	; (8001d48 <HAL_IncTick+0x20>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	20000010 	.word	0x20000010
 8001d48:	200006c4 	.word	0x200006c4

08001d4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <HAL_GetTick+0x10>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	200006c4 	.word	0x200006c4

08001d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff fff0 	bl	8001d4c <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d005      	beq.n	8001d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_Delay+0x44>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d86:	bf00      	nop
 8001d88:	f7ff ffe0 	bl	8001d4c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d8f7      	bhi.n	8001d88 <HAL_Delay+0x28>
  {
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000010 	.word	0x20000010

08001da8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0ce      	b.n	8001f68 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fda0 	bl	800192c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fbd7 	bl	80025a0 <ADC_ConversionStop_Disable>
 8001df2:	4603      	mov	r3, r0
 8001df4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f040 80a9 	bne.w	8001f56 <HAL_ADC_Init+0x1ae>
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f040 80a5 	bne.w	8001f56 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e14:	f023 0302 	bic.w	r3, r3, #2
 8001e18:	f043 0202 	orr.w	r2, r3, #2
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4951      	ldr	r1, [pc, #324]	; (8001f70 <HAL_ADC_Init+0x1c8>)
 8001e2a:	428b      	cmp	r3, r1
 8001e2c:	d10a      	bne.n	8001e44 <HAL_ADC_Init+0x9c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e36:	d002      	beq.n	8001e3e <HAL_ADC_Init+0x96>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	e004      	b.n	8001e48 <HAL_ADC_Init+0xa0>
 8001e3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e42:	e001      	b.n	8001e48 <HAL_ADC_Init+0xa0>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e48:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	7b1b      	ldrb	r3, [r3, #12]
 8001e4e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e50:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e60:	d003      	beq.n	8001e6a <HAL_ADC_Init+0xc2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d102      	bne.n	8001e70 <HAL_ADC_Init+0xc8>
 8001e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e6e:	e000      	b.n	8001e72 <HAL_ADC_Init+0xca>
 8001e70:	2300      	movs	r3, #0
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7d1b      	ldrb	r3, [r3, #20]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d119      	bne.n	8001eb4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7b1b      	ldrb	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	035a      	lsls	r2, r3, #13
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e00b      	b.n	8001eb4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	f043 0220 	orr.w	r2, r3, #32
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	f043 0201 	orr.w	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_ADC_Init+0x1cc>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	68b9      	ldr	r1, [r7, #8]
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ee4:	d003      	beq.n	8001eee <HAL_ADC_Init+0x146>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d104      	bne.n	8001ef8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	051b      	lsls	r3, r3, #20
 8001ef6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_ADC_Init+0x1d0>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d10b      	bne.n	8001f34 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	f023 0303 	bic.w	r3, r3, #3
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f32:	e018      	b.n	8001f66 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	f023 0312 	bic.w	r3, r3, #18
 8001f3c:	f043 0210 	orr.w	r2, r3, #16
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f54:	e007      	b.n	8001f66 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	f043 0210 	orr.w	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40013c00 	.word	0x40013c00
 8001f74:	ffe1f7fd 	.word	0xffe1f7fd
 8001f78:	ff1f0efe 	.word	0xff1f0efe

08001f7c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_Start+0x1a>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e098      	b.n	80020c8 <HAL_ADC_Start+0x14c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 faa4 	bl	80024ec <ADC_Enable>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 8087 	bne.w	80020be <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a41      	ldr	r2, [pc, #260]	; (80020d0 <HAL_ADC_Start+0x154>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d105      	bne.n	8001fda <HAL_ADC_Start+0x5e>
 8001fce:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <HAL_ADC_Start+0x158>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d115      	bne.n	8002006 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d026      	beq.n	8002042 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ffc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002004:	e01d      	b.n	8002042 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a2f      	ldr	r2, [pc, #188]	; (80020d4 <HAL_ADC_Start+0x158>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d004      	beq.n	8002026 <HAL_ADC_Start+0xaa>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2b      	ldr	r2, [pc, #172]	; (80020d0 <HAL_ADC_Start+0x154>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d10d      	bne.n	8002042 <HAL_ADC_Start+0xc6>
 8002026:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <HAL_ADC_Start+0x158>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800203a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	f023 0206 	bic.w	r2, r3, #6
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	62da      	str	r2, [r3, #44]	; 0x2c
 800205a:	e002      	b.n	8002062 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f06f 0202 	mvn.w	r2, #2
 8002072:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800207e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002082:	d113      	bne.n	80020ac <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002088:	4a11      	ldr	r2, [pc, #68]	; (80020d0 <HAL_ADC_Start+0x154>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d105      	bne.n	800209a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_ADC_Start+0x158>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002096:	2b00      	cmp	r3, #0
 8002098:	d108      	bne.n	80020ac <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	e00c      	b.n	80020c6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	e003      	b.n	80020c6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40012800 	.word	0x40012800
 80020d4:	40012400 	.word	0x40012400

080020d8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80020ee:	f7ff fe2d 	bl	8001d4c <HAL_GetTick>
 80020f2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00b      	beq.n	800211a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	f043 0220 	orr.w	r2, r3, #32
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0d3      	b.n	80022c2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d131      	bne.n	800218c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002132:	2b00      	cmp	r3, #0
 8002134:	d12a      	bne.n	800218c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002136:	e021      	b.n	800217c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213e:	d01d      	beq.n	800217c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <HAL_ADC_PollForConversion+0x7e>
 8002146:	f7ff fe01 	bl	8001d4c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d212      	bcs.n	800217c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10b      	bne.n	800217c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f043 0204 	orr.w	r2, r3, #4
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e0a2      	b.n	80022c2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0d6      	beq.n	8002138 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800218a:	e070      	b.n	800226e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800218c:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <HAL_ADC_PollForConversion+0x1f4>)
 800218e:	681c      	ldr	r4, [r3, #0]
 8002190:	2002      	movs	r0, #2
 8002192:	f002 f815 	bl	80041c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002196:	4603      	mov	r3, r0
 8002198:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6919      	ldr	r1, [r3, #16]
 80021a2:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <HAL_ADC_PollForConversion+0x1f8>)
 80021a4:	400b      	ands	r3, r1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_ADC_PollForConversion+0x104>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68d9      	ldr	r1, [r3, #12]
 80021b0:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <HAL_ADC_PollForConversion+0x1fc>)
 80021b2:	400b      	ands	r3, r1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d111      	bne.n	80021dc <HAL_ADC_PollForConversion+0x104>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6919      	ldr	r1, [r3, #16]
 80021be:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_ADC_PollForConversion+0x200>)
 80021c0:	400b      	ands	r3, r1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d108      	bne.n	80021d8 <HAL_ADC_PollForConversion+0x100>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68d9      	ldr	r1, [r3, #12]
 80021cc:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_ADC_PollForConversion+0x204>)
 80021ce:	400b      	ands	r3, r1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_ADC_PollForConversion+0x100>
 80021d4:	2314      	movs	r3, #20
 80021d6:	e020      	b.n	800221a <HAL_ADC_PollForConversion+0x142>
 80021d8:	2329      	movs	r3, #41	; 0x29
 80021da:	e01e      	b.n	800221a <HAL_ADC_PollForConversion+0x142>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6919      	ldr	r1, [r3, #16]
 80021e2:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_ADC_PollForConversion+0x200>)
 80021e4:	400b      	ands	r3, r1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_ADC_PollForConversion+0x120>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68d9      	ldr	r1, [r3, #12]
 80021f0:	4b3a      	ldr	r3, [pc, #232]	; (80022dc <HAL_ADC_PollForConversion+0x204>)
 80021f2:	400b      	ands	r3, r1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00d      	beq.n	8002214 <HAL_ADC_PollForConversion+0x13c>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6919      	ldr	r1, [r3, #16]
 80021fe:	4b38      	ldr	r3, [pc, #224]	; (80022e0 <HAL_ADC_PollForConversion+0x208>)
 8002200:	400b      	ands	r3, r1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d108      	bne.n	8002218 <HAL_ADC_PollForConversion+0x140>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68d9      	ldr	r1, [r3, #12]
 800220c:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_ADC_PollForConversion+0x208>)
 800220e:	400b      	ands	r3, r1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ADC_PollForConversion+0x140>
 8002214:	2354      	movs	r3, #84	; 0x54
 8002216:	e000      	b.n	800221a <HAL_ADC_PollForConversion+0x142>
 8002218:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002220:	e021      	b.n	8002266 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d01a      	beq.n	8002260 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <HAL_ADC_PollForConversion+0x168>
 8002230:	f7ff fd8c 	bl	8001d4c <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d20f      	bcs.n	8002260 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d90b      	bls.n	8002260 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	f043 0204 	orr.w	r2, r3, #4
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e030      	b.n	80022c2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3301      	adds	r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	429a      	cmp	r2, r3
 800226c:	d8d9      	bhi.n	8002222 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f06f 0212 	mvn.w	r2, #18
 8002276:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800228e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002292:	d115      	bne.n	80022c0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002298:	2b00      	cmp	r3, #0
 800229a:	d111      	bne.n	80022c0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	f043 0201 	orr.w	r2, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd90      	pop	{r4, r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000008 	.word	0x20000008
 80022d0:	24924924 	.word	0x24924924
 80022d4:	00924924 	.word	0x00924924
 80022d8:	12492492 	.word	0x12492492
 80022dc:	00492492 	.word	0x00492492
 80022e0:	00249249 	.word	0x00249249

080022e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x20>
 8002318:	2302      	movs	r3, #2
 800231a:	e0dc      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x1da>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b06      	cmp	r3, #6
 800232a:	d81c      	bhi.n	8002366 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	3b05      	subs	r3, #5
 800233e:	221f      	movs	r2, #31
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	4019      	ands	r1, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	3b05      	subs	r3, #5
 8002358:	fa00 f203 	lsl.w	r2, r0, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	635a      	str	r2, [r3, #52]	; 0x34
 8002364:	e03c      	b.n	80023e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d81c      	bhi.n	80023a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	3b23      	subs	r3, #35	; 0x23
 8002380:	221f      	movs	r2, #31
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	4019      	ands	r1, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	3b23      	subs	r3, #35	; 0x23
 800239a:	fa00 f203 	lsl.w	r2, r0, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	631a      	str	r2, [r3, #48]	; 0x30
 80023a6:	e01b      	b.n	80023e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	3b41      	subs	r3, #65	; 0x41
 80023ba:	221f      	movs	r2, #31
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	4019      	ands	r1, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	3b41      	subs	r3, #65	; 0x41
 80023d4:	fa00 f203 	lsl.w	r2, r0, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b09      	cmp	r3, #9
 80023e6:	d91c      	bls.n	8002422 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68d9      	ldr	r1, [r3, #12]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	3b1e      	subs	r3, #30
 80023fa:	2207      	movs	r2, #7
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	4019      	ands	r1, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6898      	ldr	r0, [r3, #8]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4613      	mov	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	3b1e      	subs	r3, #30
 8002414:	fa00 f203 	lsl.w	r2, r0, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	60da      	str	r2, [r3, #12]
 8002420:	e019      	b.n	8002456 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6919      	ldr	r1, [r3, #16]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	2207      	movs	r2, #7
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	4019      	ands	r1, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6898      	ldr	r0, [r3, #8]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	fa00 f203 	lsl.w	r2, r0, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b10      	cmp	r3, #16
 800245c:	d003      	beq.n	8002466 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002462:	2b11      	cmp	r3, #17
 8002464:	d132      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d125      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d126      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800248c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b10      	cmp	r3, #16
 8002494:	d11a      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002496:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800249c:	fba2 2303 	umull	r2, r3, r2, r3
 80024a0:	0c9a      	lsrs	r2, r3, #18
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024ac:	e002      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f9      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x1b2>
 80024ba:	e007      	b.n	80024cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	40012400 	.word	0x40012400
 80024e4:	20000008 	.word	0x20000008
 80024e8:	431bde83 	.word	0x431bde83

080024ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b01      	cmp	r3, #1
 8002508:	d040      	beq.n	800258c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800251a:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <ADC_Enable+0xac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1f      	ldr	r2, [pc, #124]	; (800259c <ADC_Enable+0xb0>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	0c9b      	lsrs	r3, r3, #18
 8002526:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002528:	e002      	b.n	8002530 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	3b01      	subs	r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f9      	bne.n	800252a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002536:	f7ff fc09 	bl	8001d4c <HAL_GetTick>
 800253a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800253c:	e01f      	b.n	800257e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800253e:	f7ff fc05 	bl	8001d4c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d918      	bls.n	800257e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d011      	beq.n	800257e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	f043 0210 	orr.w	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e007      	b.n	800258e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d1d8      	bne.n	800253e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000008 	.word	0x20000008
 800259c:	431bde83 	.word	0x431bde83

080025a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d12e      	bne.n	8002618 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025ca:	f7ff fbbf 	bl	8001d4c <HAL_GetTick>
 80025ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025d0:	e01b      	b.n	800260a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025d2:	f7ff fbbb 	bl	8001d4c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d914      	bls.n	800260a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d10d      	bne.n	800260a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	f043 0210 	orr.w	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e007      	b.n	800261a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b01      	cmp	r3, #1
 8002616:	d0dc      	beq.n	80025d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_ADCEx_Calibration_Start+0x1e>
 800263e:	2302      	movs	r3, #2
 8002640:	e097      	b.n	8002772 <HAL_ADCEx_Calibration_Start+0x14e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ffa8 	bl	80025a0 <ADC_ConversionStop_Disable>
 8002650:	4603      	mov	r3, r0
 8002652:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ff49 	bl	80024ec <ADC_Enable>
 800265a:	4603      	mov	r3, r0
 800265c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	2b00      	cmp	r3, #0
 8002662:	f040 8081 	bne.w	8002768 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800266e:	f023 0302 	bic.w	r3, r3, #2
 8002672:	f043 0202 	orr.w	r2, r3, #2
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800267a:	4b40      	ldr	r3, [pc, #256]	; (800277c <HAL_ADCEx_Calibration_Start+0x158>)
 800267c:	681c      	ldr	r4, [r3, #0]
 800267e:	2002      	movs	r0, #2
 8002680:	f001 fd9e 	bl	80041c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002684:	4603      	mov	r3, r0
 8002686:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800268a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800268c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800268e:	e002      	b.n	8002696 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3b01      	subs	r3, #1
 8002694:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f9      	bne.n	8002690 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0208 	orr.w	r2, r2, #8
 80026aa:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80026ac:	f7ff fb4e 	bl	8001d4c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80026b2:	e01b      	b.n	80026ec <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80026b4:	f7ff fb4a 	bl	8001d4c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b0a      	cmp	r3, #10
 80026c0:	d914      	bls.n	80026ec <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00d      	beq.n	80026ec <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	f023 0312 	bic.w	r3, r3, #18
 80026d8:	f043 0210 	orr.w	r2, r3, #16
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e042      	b.n	8002772 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1dc      	bne.n	80026b4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0204 	orr.w	r2, r2, #4
 8002708:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800270a:	f7ff fb1f 	bl	8001d4c <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002710:	e01b      	b.n	800274a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002712:	f7ff fb1b 	bl	8001d4c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b0a      	cmp	r3, #10
 800271e:	d914      	bls.n	800274a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00d      	beq.n	800274a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	f023 0312 	bic.w	r3, r3, #18
 8002736:	f043 0210 	orr.w	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e013      	b.n	8002772 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1dc      	bne.n	8002712 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f023 0303 	bic.w	r3, r3, #3
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002770:	7dfb      	ldrb	r3, [r7, #23]
}
 8002772:	4618      	mov	r0, r3
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	bf00      	nop
 800277c:	20000008 	.word	0x20000008

08002780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800279c:	4013      	ands	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b2:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	60d3      	str	r3, [r2, #12]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	f003 0307 	and.w	r3, r3, #7
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db0a      	blt.n	800280e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	; (8002830 <__NVIC_SetPriority+0x4c>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	440b      	add	r3, r1
 8002808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280c:	e00a      	b.n	8002824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4908      	ldr	r1, [pc, #32]	; (8002834 <__NVIC_SetPriority+0x50>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3b04      	subs	r3, #4
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	440b      	add	r3, r1
 8002822:	761a      	strb	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	; 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ac:	d301      	bcc.n	80028b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00f      	b.n	80028d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <SysTick_Config+0x40>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ba:	210f      	movs	r1, #15
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f7ff ff90 	bl	80027e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <SysTick_Config+0x40>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <SysTick_Config+0x40>)
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000e010 	.word	0xe000e010

080028e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff49 	bl	8002780 <__NVIC_SetPriorityGrouping>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002908:	f7ff ff5e 	bl	80027c8 <__NVIC_GetPriorityGrouping>
 800290c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7ff ff90 	bl	8002838 <NVIC_EncodePriority>
 8002918:	4602      	mov	r2, r0
 800291a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff5f 	bl	80027e4 <__NVIC_SetPriority>
}
 8002926:	bf00      	nop
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ffb0 	bl	800289c <SysTick_Config>
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002948:	b480      	push	{r7}
 800294a:	b08b      	sub	sp, #44	; 0x2c
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295a:	e179      	b.n	8002c50 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800295c:	2201      	movs	r2, #1
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	429a      	cmp	r2, r3
 8002976:	f040 8168 	bne.w	8002c4a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4a96      	ldr	r2, [pc, #600]	; (8002bd8 <HAL_GPIO_Init+0x290>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d05e      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 8002984:	4a94      	ldr	r2, [pc, #592]	; (8002bd8 <HAL_GPIO_Init+0x290>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d875      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 800298a:	4a94      	ldr	r2, [pc, #592]	; (8002bdc <HAL_GPIO_Init+0x294>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d058      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 8002990:	4a92      	ldr	r2, [pc, #584]	; (8002bdc <HAL_GPIO_Init+0x294>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d86f      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 8002996:	4a92      	ldr	r2, [pc, #584]	; (8002be0 <HAL_GPIO_Init+0x298>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d052      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 800299c:	4a90      	ldr	r2, [pc, #576]	; (8002be0 <HAL_GPIO_Init+0x298>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d869      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029a2:	4a90      	ldr	r2, [pc, #576]	; (8002be4 <HAL_GPIO_Init+0x29c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d04c      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 80029a8:	4a8e      	ldr	r2, [pc, #568]	; (8002be4 <HAL_GPIO_Init+0x29c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d863      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029ae:	4a8e      	ldr	r2, [pc, #568]	; (8002be8 <HAL_GPIO_Init+0x2a0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d046      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 80029b4:	4a8c      	ldr	r2, [pc, #560]	; (8002be8 <HAL_GPIO_Init+0x2a0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d85d      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029ba:	2b12      	cmp	r3, #18
 80029bc:	d82a      	bhi.n	8002a14 <HAL_GPIO_Init+0xcc>
 80029be:	2b12      	cmp	r3, #18
 80029c0:	d859      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029c2:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <HAL_GPIO_Init+0x80>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	08002a43 	.word	0x08002a43
 80029cc:	08002a1d 	.word	0x08002a1d
 80029d0:	08002a2f 	.word	0x08002a2f
 80029d4:	08002a71 	.word	0x08002a71
 80029d8:	08002a77 	.word	0x08002a77
 80029dc:	08002a77 	.word	0x08002a77
 80029e0:	08002a77 	.word	0x08002a77
 80029e4:	08002a77 	.word	0x08002a77
 80029e8:	08002a77 	.word	0x08002a77
 80029ec:	08002a77 	.word	0x08002a77
 80029f0:	08002a77 	.word	0x08002a77
 80029f4:	08002a77 	.word	0x08002a77
 80029f8:	08002a77 	.word	0x08002a77
 80029fc:	08002a77 	.word	0x08002a77
 8002a00:	08002a77 	.word	0x08002a77
 8002a04:	08002a77 	.word	0x08002a77
 8002a08:	08002a77 	.word	0x08002a77
 8002a0c:	08002a25 	.word	0x08002a25
 8002a10:	08002a39 	.word	0x08002a39
 8002a14:	4a75      	ldr	r2, [pc, #468]	; (8002bec <HAL_GPIO_Init+0x2a4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a1a:	e02c      	b.n	8002a76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	623b      	str	r3, [r7, #32]
          break;
 8002a22:	e029      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	623b      	str	r3, [r7, #32]
          break;
 8002a2c:	e024      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	3308      	adds	r3, #8
 8002a34:	623b      	str	r3, [r7, #32]
          break;
 8002a36:	e01f      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	330c      	adds	r3, #12
 8002a3e:	623b      	str	r3, [r7, #32]
          break;
 8002a40:	e01a      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	623b      	str	r3, [r7, #32]
          break;
 8002a4e:	e013      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a58:	2308      	movs	r3, #8
 8002a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	611a      	str	r2, [r3, #16]
          break;
 8002a62:	e009      	b.n	8002a78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a64:	2308      	movs	r3, #8
 8002a66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	615a      	str	r2, [r3, #20]
          break;
 8002a6e:	e003      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a70:	2300      	movs	r3, #0
 8002a72:	623b      	str	r3, [r7, #32]
          break;
 8002a74:	e000      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          break;
 8002a76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	2bff      	cmp	r3, #255	; 0xff
 8002a7c:	d801      	bhi.n	8002a82 <HAL_GPIO_Init+0x13a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	e001      	b.n	8002a86 <HAL_GPIO_Init+0x13e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3304      	adds	r3, #4
 8002a86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2bff      	cmp	r3, #255	; 0xff
 8002a8c:	d802      	bhi.n	8002a94 <HAL_GPIO_Init+0x14c>
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	e002      	b.n	8002a9a <HAL_GPIO_Init+0x152>
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	3b08      	subs	r3, #8
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	210f      	movs	r1, #15
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	401a      	ands	r2, r3
 8002aac:	6a39      	ldr	r1, [r7, #32]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80c1 	beq.w	8002c4a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ac8:	4b49      	ldr	r3, [pc, #292]	; (8002bf0 <HAL_GPIO_Init+0x2a8>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a48      	ldr	r2, [pc, #288]	; (8002bf0 <HAL_GPIO_Init+0x2a8>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <HAL_GPIO_Init+0x2a8>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ae0:	4a44      	ldr	r2, [pc, #272]	; (8002bf4 <HAL_GPIO_Init+0x2ac>)
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4013      	ands	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a3c      	ldr	r2, [pc, #240]	; (8002bf8 <HAL_GPIO_Init+0x2b0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d01f      	beq.n	8002b4c <HAL_GPIO_Init+0x204>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a3b      	ldr	r2, [pc, #236]	; (8002bfc <HAL_GPIO_Init+0x2b4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d019      	beq.n	8002b48 <HAL_GPIO_Init+0x200>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a3a      	ldr	r2, [pc, #232]	; (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d013      	beq.n	8002b44 <HAL_GPIO_Init+0x1fc>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a39      	ldr	r2, [pc, #228]	; (8002c04 <HAL_GPIO_Init+0x2bc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00d      	beq.n	8002b40 <HAL_GPIO_Init+0x1f8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a38      	ldr	r2, [pc, #224]	; (8002c08 <HAL_GPIO_Init+0x2c0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d007      	beq.n	8002b3c <HAL_GPIO_Init+0x1f4>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a37      	ldr	r2, [pc, #220]	; (8002c0c <HAL_GPIO_Init+0x2c4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_GPIO_Init+0x1f0>
 8002b34:	2305      	movs	r3, #5
 8002b36:	e00a      	b.n	8002b4e <HAL_GPIO_Init+0x206>
 8002b38:	2306      	movs	r3, #6
 8002b3a:	e008      	b.n	8002b4e <HAL_GPIO_Init+0x206>
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	e006      	b.n	8002b4e <HAL_GPIO_Init+0x206>
 8002b40:	2303      	movs	r3, #3
 8002b42:	e004      	b.n	8002b4e <HAL_GPIO_Init+0x206>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e002      	b.n	8002b4e <HAL_GPIO_Init+0x206>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_GPIO_Init+0x206>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b50:	f002 0203 	and.w	r2, r2, #3
 8002b54:	0092      	lsls	r2, r2, #2
 8002b56:	4093      	lsls	r3, r2
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b5e:	4925      	ldr	r1, [pc, #148]	; (8002bf4 <HAL_GPIO_Init+0x2ac>)
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	3302      	adds	r3, #2
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_GPIO_Init+0x2c8>)
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	4924      	ldr	r1, [pc, #144]	; (8002c10 <HAL_GPIO_Init+0x2c8>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]
 8002b84:	e006      	b.n	8002b94 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b86:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_GPIO_Init+0x2c8>)
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	4920      	ldr	r1, [pc, #128]	; (8002c10 <HAL_GPIO_Init+0x2c8>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d006      	beq.n	8002bae <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_GPIO_Init+0x2c8>)
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	491a      	ldr	r1, [pc, #104]	; (8002c10 <HAL_GPIO_Init+0x2c8>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60cb      	str	r3, [r1, #12]
 8002bac:	e006      	b.n	8002bbc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bae:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <HAL_GPIO_Init+0x2c8>)
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	4916      	ldr	r1, [pc, #88]	; (8002c10 <HAL_GPIO_Init+0x2c8>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d025      	beq.n	8002c14 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <HAL_GPIO_Init+0x2c8>)
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	4910      	ldr	r1, [pc, #64]	; (8002c10 <HAL_GPIO_Init+0x2c8>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
 8002bd4:	e025      	b.n	8002c22 <HAL_GPIO_Init+0x2da>
 8002bd6:	bf00      	nop
 8002bd8:	10320000 	.word	0x10320000
 8002bdc:	10310000 	.word	0x10310000
 8002be0:	10220000 	.word	0x10220000
 8002be4:	10210000 	.word	0x10210000
 8002be8:	10120000 	.word	0x10120000
 8002bec:	10110000 	.word	0x10110000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	40010800 	.word	0x40010800
 8002bfc:	40010c00 	.word	0x40010c00
 8002c00:	40011000 	.word	0x40011000
 8002c04:	40011400 	.word	0x40011400
 8002c08:	40011800 	.word	0x40011800
 8002c0c:	40011c00 	.word	0x40011c00
 8002c10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c14:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	4913      	ldr	r1, [pc, #76]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d006      	beq.n	8002c3c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	490e      	ldr	r1, [pc, #56]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
 8002c3a:	e006      	b.n	8002c4a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	4909      	ldr	r1, [pc, #36]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f47f ae7e 	bne.w	800295c <HAL_GPIO_Init+0x14>
  }
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	372c      	adds	r7, #44	; 0x2c
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	40010400 	.word	0x40010400

08002c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c80:	787b      	ldrb	r3, [r7, #1]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c8c:	e003      	b.n	8002c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	041a      	lsls	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	611a      	str	r2, [r3, #16]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e12b      	b.n	8002f0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe fe96 	bl	80019f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2224      	movs	r2, #36	; 0x24
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d04:	f001 f960 	bl	8003fc8 <HAL_RCC_GetPCLK1Freq>
 8002d08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4a81      	ldr	r2, [pc, #516]	; (8002f14 <HAL_I2C_Init+0x274>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d807      	bhi.n	8002d24 <HAL_I2C_Init+0x84>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a80      	ldr	r2, [pc, #512]	; (8002f18 <HAL_I2C_Init+0x278>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	bf94      	ite	ls
 8002d1c:	2301      	movls	r3, #1
 8002d1e:	2300      	movhi	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e006      	b.n	8002d32 <HAL_I2C_Init+0x92>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a7d      	ldr	r2, [pc, #500]	; (8002f1c <HAL_I2C_Init+0x27c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	bf94      	ite	ls
 8002d2c:	2301      	movls	r3, #1
 8002d2e:	2300      	movhi	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0e7      	b.n	8002f0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a78      	ldr	r2, [pc, #480]	; (8002f20 <HAL_I2C_Init+0x280>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0c9b      	lsrs	r3, r3, #18
 8002d44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a6a      	ldr	r2, [pc, #424]	; (8002f14 <HAL_I2C_Init+0x274>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d802      	bhi.n	8002d74 <HAL_I2C_Init+0xd4>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3301      	adds	r3, #1
 8002d72:	e009      	b.n	8002d88 <HAL_I2C_Init+0xe8>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	4a69      	ldr	r2, [pc, #420]	; (8002f24 <HAL_I2C_Init+0x284>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	3301      	adds	r3, #1
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	495c      	ldr	r1, [pc, #368]	; (8002f14 <HAL_I2C_Init+0x274>)
 8002da4:	428b      	cmp	r3, r1
 8002da6:	d819      	bhi.n	8002ddc <HAL_I2C_Init+0x13c>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1e59      	subs	r1, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db6:	1c59      	adds	r1, r3, #1
 8002db8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dbc:	400b      	ands	r3, r1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_I2C_Init+0x138>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1e59      	subs	r1, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd6:	e051      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	e04f      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d111      	bne.n	8002e08 <HAL_I2C_Init+0x168>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e58      	subs	r0, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	440b      	add	r3, r1
 8002df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e012      	b.n	8002e2e <HAL_I2C_Init+0x18e>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e58      	subs	r0, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	0099      	lsls	r1, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_Init+0x196>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e022      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10e      	bne.n	8002e5c <HAL_I2C_Init+0x1bc>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1e58      	subs	r0, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	440b      	add	r3, r1
 8002e4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e50:	3301      	adds	r3, #1
 8002e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e5a:	e00f      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1e58      	subs	r0, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	0099      	lsls	r1, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	6809      	ldr	r1, [r1, #0]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6911      	ldr	r1, [r2, #16]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68d2      	ldr	r2, [r2, #12]
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	000186a0 	.word	0x000186a0
 8002f18:	001e847f 	.word	0x001e847f
 8002f1c:	003d08ff 	.word	0x003d08ff
 8002f20:	431bde83 	.word	0x431bde83
 8002f24:	10624dd3 	.word	0x10624dd3

08002f28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	461a      	mov	r2, r3
 8002f34:	460b      	mov	r3, r1
 8002f36:	817b      	strh	r3, [r7, #10]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7fe ff06 	bl	8001d4c <HAL_GetTick>
 8002f40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	f040 80e0 	bne.w	8003110 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2319      	movs	r3, #25
 8002f56:	2201      	movs	r2, #1
 8002f58:	4970      	ldr	r1, [pc, #448]	; (800311c <HAL_I2C_Master_Transmit+0x1f4>)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fa92 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
 8002f68:	e0d3      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_I2C_Master_Transmit+0x50>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e0cc      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d007      	beq.n	8002f9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2221      	movs	r2, #33	; 0x21
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2210      	movs	r2, #16
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	893a      	ldrh	r2, [r7, #8]
 8002fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4a50      	ldr	r2, [pc, #320]	; (8003120 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fe0:	8979      	ldrh	r1, [r7, #10]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	6a3a      	ldr	r2, [r7, #32]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f9ca 	bl	8003380 <I2C_MasterRequestWrite>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e08d      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800300c:	e066      	b.n	80030dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	6a39      	ldr	r1, [r7, #32]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fb50 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2b04      	cmp	r3, #4
 8003024:	d107      	bne.n	8003036 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e06b      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b04      	cmp	r3, #4
 8003076:	d11b      	bne.n	80030b0 <HAL_I2C_Master_Transmit+0x188>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	2b00      	cmp	r3, #0
 800307e:	d017      	beq.n	80030b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	6a39      	ldr	r1, [r7, #32]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fb47 	bl	8003748 <I2C_WaitOnBTFFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00d      	beq.n	80030dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d107      	bne.n	80030d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e01a      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d194      	bne.n	800300e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	00100002 	.word	0x00100002
 8003120:	ffff0000 	.word	0xffff0000

08003124 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	460b      	mov	r3, r1
 8003132:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003134:	f7fe fe0a 	bl	8001d4c <HAL_GetTick>
 8003138:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b20      	cmp	r3, #32
 8003148:	f040 8111 	bne.w	800336e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2319      	movs	r3, #25
 8003152:	2201      	movs	r2, #1
 8003154:	4988      	ldr	r1, [pc, #544]	; (8003378 <HAL_I2C_IsDeviceReady+0x254>)
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f994 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003162:	2302      	movs	r3, #2
 8003164:	e104      	b.n	8003370 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_I2C_IsDeviceReady+0x50>
 8003170:	2302      	movs	r3, #2
 8003172:	e0fd      	b.n	8003370 <HAL_I2C_IsDeviceReady+0x24c>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b01      	cmp	r3, #1
 8003188:	d007      	beq.n	800319a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2224      	movs	r2, #36	; 0x24
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a70      	ldr	r2, [pc, #448]	; (800337c <HAL_I2C_IsDeviceReady+0x258>)
 80031bc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f952 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00d      	beq.n	8003202 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f4:	d103      	bne.n	80031fe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e0b6      	b.n	8003370 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003202:	897b      	ldrh	r3, [r7, #10]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003210:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003212:	f7fe fd9b 	bl	8001d4c <HAL_GetTick>
 8003216:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b02      	cmp	r3, #2
 8003224:	bf0c      	ite	eq
 8003226:	2301      	moveq	r3, #1
 8003228:	2300      	movne	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323c:	bf0c      	ite	eq
 800323e:	2301      	moveq	r3, #1
 8003240:	2300      	movne	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003246:	e025      	b.n	8003294 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003248:	f7fe fd80 	bl	8001d4c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d302      	bcc.n	800325e <HAL_I2C_IsDeviceReady+0x13a>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	22a0      	movs	r2, #160	; 0xa0
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b02      	cmp	r3, #2
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2ba0      	cmp	r3, #160	; 0xa0
 800329e:	d005      	beq.n	80032ac <HAL_I2C_IsDeviceReady+0x188>
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d102      	bne.n	80032ac <HAL_I2C_IsDeviceReady+0x188>
 80032a6:	7dbb      	ldrb	r3, [r7, #22]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0cd      	beq.n	8003248 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d129      	bne.n	8003316 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2319      	movs	r3, #25
 80032ee:	2201      	movs	r2, #1
 80032f0:	4921      	ldr	r1, [pc, #132]	; (8003378 <HAL_I2C_IsDeviceReady+0x254>)
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f8c6 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e036      	b.n	8003370 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e02c      	b.n	8003370 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003324:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800332e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2319      	movs	r3, #25
 8003336:	2201      	movs	r2, #1
 8003338:	490f      	ldr	r1, [pc, #60]	; (8003378 <HAL_I2C_IsDeviceReady+0x254>)
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f8a2 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e012      	b.n	8003370 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	3301      	adds	r3, #1
 800334e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	429a      	cmp	r2, r3
 8003356:	f4ff af32 	bcc.w	80031be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800336e:	2302      	movs	r3, #2
  }
}
 8003370:	4618      	mov	r0, r3
 8003372:	3720      	adds	r7, #32
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	00100002 	.word	0x00100002
 800337c:	ffff0000 	.word	0xffff0000

08003380 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	460b      	mov	r3, r1
 800338e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d006      	beq.n	80033aa <I2C_MasterRequestWrite+0x2a>
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d003      	beq.n	80033aa <I2C_MasterRequestWrite+0x2a>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033a8:	d108      	bne.n	80033bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	e00b      	b.n	80033d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	2b12      	cmp	r3, #18
 80033c2:	d107      	bne.n	80033d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f84f 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00d      	beq.n	8003408 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fa:	d103      	bne.n	8003404 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e035      	b.n	8003474 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003410:	d108      	bne.n	8003424 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003412:	897b      	ldrh	r3, [r7, #10]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003420:	611a      	str	r2, [r3, #16]
 8003422:	e01b      	b.n	800345c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003424:	897b      	ldrh	r3, [r7, #10]
 8003426:	11db      	asrs	r3, r3, #7
 8003428:	b2db      	uxtb	r3, r3
 800342a:	f003 0306 	and.w	r3, r3, #6
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f063 030f 	orn	r3, r3, #15
 8003434:	b2da      	uxtb	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	490e      	ldr	r1, [pc, #56]	; (800347c <I2C_MasterRequestWrite+0xfc>)
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f898 	bl	8003578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e010      	b.n	8003474 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003452:	897b      	ldrh	r3, [r7, #10]
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4907      	ldr	r1, [pc, #28]	; (8003480 <I2C_MasterRequestWrite+0x100>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f888 	bl	8003578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	00010008 	.word	0x00010008
 8003480:	00010002 	.word	0x00010002

08003484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003494:	e048      	b.n	8003528 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d044      	beq.n	8003528 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7fe fc55 	bl	8001d4c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d139      	bne.n	8003528 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	0c1b      	lsrs	r3, r3, #16
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d10d      	bne.n	80034da <I2C_WaitOnFlagUntilTimeout+0x56>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	43da      	mvns	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4013      	ands	r3, r2
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	e00c      	b.n	80034f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	43da      	mvns	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4013      	ands	r3, r2
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d116      	bne.n	8003528 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e023      	b.n	8003570 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	0c1b      	lsrs	r3, r3, #16
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d10d      	bne.n	800354e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	43da      	mvns	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4013      	ands	r3, r2
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	e00c      	b.n	8003568 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	43da      	mvns	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4013      	ands	r3, r2
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	429a      	cmp	r2, r3
 800356c:	d093      	beq.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003586:	e071      	b.n	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003596:	d123      	bne.n	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f043 0204 	orr.w	r2, r3, #4
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e067      	b.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d041      	beq.n	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e8:	f7fe fbb0 	bl	8001d4c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d302      	bcc.n	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d136      	bne.n	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	0c1b      	lsrs	r3, r3, #16
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d10c      	bne.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf14      	ite	ne
 800361a:	2301      	movne	r3, #1
 800361c:	2300      	moveq	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	e00b      	b.n	800363a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	43da      	mvns	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4013      	ands	r3, r2
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d016      	beq.n	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e021      	b.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d10c      	bne.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	43da      	mvns	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf14      	ite	ne
 8003688:	2301      	movne	r3, #1
 800368a:	2300      	moveq	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	e00b      	b.n	80036a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	43da      	mvns	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4013      	ands	r3, r2
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bf14      	ite	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	2300      	moveq	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f47f af6d 	bne.w	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c4:	e034      	b.n	8003730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f886 	bl	80037d8 <I2C_IsAcknowledgeFailed>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e034      	b.n	8003740 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d028      	beq.n	8003730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7fe fb35 	bl	8001d4c <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11d      	bne.n	8003730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b80      	cmp	r3, #128	; 0x80
 8003700:	d016      	beq.n	8003730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e007      	b.n	8003740 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b80      	cmp	r3, #128	; 0x80
 800373c:	d1c3      	bne.n	80036c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003754:	e034      	b.n	80037c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f83e 	bl	80037d8 <I2C_IsAcknowledgeFailed>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e034      	b.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d028      	beq.n	80037c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376e:	f7fe faed 	bl	8001d4c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11d      	bne.n	80037c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b04      	cmp	r3, #4
 8003790:	d016      	beq.n	80037c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e007      	b.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d1c3      	bne.n	8003756 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ee:	d11b      	bne.n	8003828 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f043 0204 	orr.w	r2, r3, #4
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e272      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 8087 	beq.w	8003962 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003854:	4b92      	ldr	r3, [pc, #584]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 030c 	and.w	r3, r3, #12
 800385c:	2b04      	cmp	r3, #4
 800385e:	d00c      	beq.n	800387a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003860:	4b8f      	ldr	r3, [pc, #572]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b08      	cmp	r3, #8
 800386a:	d112      	bne.n	8003892 <HAL_RCC_OscConfig+0x5e>
 800386c:	4b8c      	ldr	r3, [pc, #560]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003878:	d10b      	bne.n	8003892 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387a:	4b89      	ldr	r3, [pc, #548]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d06c      	beq.n	8003960 <HAL_RCC_OscConfig+0x12c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d168      	bne.n	8003960 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e24c      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389a:	d106      	bne.n	80038aa <HAL_RCC_OscConfig+0x76>
 800389c:	4b80      	ldr	r3, [pc, #512]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a7f      	ldr	r2, [pc, #508]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e02e      	b.n	8003908 <HAL_RCC_OscConfig+0xd4>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0x98>
 80038b2:	4b7b      	ldr	r3, [pc, #492]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a7a      	ldr	r2, [pc, #488]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b78      	ldr	r3, [pc, #480]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a77      	ldr	r2, [pc, #476]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e01d      	b.n	8003908 <HAL_RCC_OscConfig+0xd4>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCC_OscConfig+0xbc>
 80038d6:	4b72      	ldr	r3, [pc, #456]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a71      	ldr	r2, [pc, #452]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	4b6f      	ldr	r3, [pc, #444]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a6e      	ldr	r2, [pc, #440]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e00b      	b.n	8003908 <HAL_RCC_OscConfig+0xd4>
 80038f0:	4b6b      	ldr	r3, [pc, #428]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a6a      	ldr	r2, [pc, #424]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b68      	ldr	r3, [pc, #416]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a67      	ldr	r2, [pc, #412]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003906:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d013      	beq.n	8003938 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fe fa1c 	bl	8001d4c <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003918:	f7fe fa18 	bl	8001d4c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	; 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e200      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392a:	4b5d      	ldr	r3, [pc, #372]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0xe4>
 8003936:	e014      	b.n	8003962 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fe fa08 	bl	8001d4c <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003940:	f7fe fa04 	bl	8001d4c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	; 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e1ec      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003952:	4b53      	ldr	r3, [pc, #332]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x10c>
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d063      	beq.n	8003a36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800396e:	4b4c      	ldr	r3, [pc, #304]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800397a:	4b49      	ldr	r3, [pc, #292]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b08      	cmp	r3, #8
 8003984:	d11c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x18c>
 8003986:	4b46      	ldr	r3, [pc, #280]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d116      	bne.n	80039c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003992:	4b43      	ldr	r3, [pc, #268]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_RCC_OscConfig+0x176>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e1c0      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039aa:	4b3d      	ldr	r3, [pc, #244]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4939      	ldr	r1, [pc, #228]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039be:	e03a      	b.n	8003a36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d020      	beq.n	8003a0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c8:	4b36      	ldr	r3, [pc, #216]	; (8003aa4 <HAL_RCC_OscConfig+0x270>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ce:	f7fe f9bd 	bl	8001d4c <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d6:	f7fe f9b9 	bl	8001d4c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e1a1      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e8:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f4:	4b2a      	ldr	r3, [pc, #168]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4927      	ldr	r1, [pc, #156]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	600b      	str	r3, [r1, #0]
 8003a08:	e015      	b.n	8003a36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0a:	4b26      	ldr	r3, [pc, #152]	; (8003aa4 <HAL_RCC_OscConfig+0x270>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7fe f99c 	bl	8001d4c <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a18:	f7fe f998 	bl	8001d4c <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e180      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2a:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d03a      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d019      	beq.n	8003a7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a4a:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <HAL_RCC_OscConfig+0x274>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a50:	f7fe f97c 	bl	8001d4c <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a58:	f7fe f978 	bl	8001d4c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e160      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a76:	2001      	movs	r0, #1
 8003a78:	f000 face 	bl	8004018 <RCC_Delay>
 8003a7c:	e01c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <HAL_RCC_OscConfig+0x274>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7fe f962 	bl	8001d4c <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8a:	e00f      	b.n	8003aac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a8c:	f7fe f95e 	bl	8001d4c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d908      	bls.n	8003aac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e146      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	42420000 	.word	0x42420000
 8003aa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aac:	4b92      	ldr	r3, [pc, #584]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e9      	bne.n	8003a8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80a6 	beq.w	8003c12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aca:	4b8b      	ldr	r3, [pc, #556]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10d      	bne.n	8003af2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad6:	4b88      	ldr	r3, [pc, #544]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	4a87      	ldr	r2, [pc, #540]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	61d3      	str	r3, [r2, #28]
 8003ae2:	4b85      	ldr	r3, [pc, #532]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aee:	2301      	movs	r3, #1
 8003af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af2:	4b82      	ldr	r3, [pc, #520]	; (8003cfc <HAL_RCC_OscConfig+0x4c8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d118      	bne.n	8003b30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003afe:	4b7f      	ldr	r3, [pc, #508]	; (8003cfc <HAL_RCC_OscConfig+0x4c8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7e      	ldr	r2, [pc, #504]	; (8003cfc <HAL_RCC_OscConfig+0x4c8>)
 8003b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0a:	f7fe f91f 	bl	8001d4c <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b12:	f7fe f91b 	bl	8001d4c <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b64      	cmp	r3, #100	; 0x64
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e103      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b24:	4b75      	ldr	r3, [pc, #468]	; (8003cfc <HAL_RCC_OscConfig+0x4c8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x312>
 8003b38:	4b6f      	ldr	r3, [pc, #444]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	4a6e      	ldr	r2, [pc, #440]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	6213      	str	r3, [r2, #32]
 8003b44:	e02d      	b.n	8003ba2 <HAL_RCC_OscConfig+0x36e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x334>
 8003b4e:	4b6a      	ldr	r3, [pc, #424]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	4a69      	ldr	r2, [pc, #420]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	6213      	str	r3, [r2, #32]
 8003b5a:	4b67      	ldr	r3, [pc, #412]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4a66      	ldr	r2, [pc, #408]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	f023 0304 	bic.w	r3, r3, #4
 8003b64:	6213      	str	r3, [r2, #32]
 8003b66:	e01c      	b.n	8003ba2 <HAL_RCC_OscConfig+0x36e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b05      	cmp	r3, #5
 8003b6e:	d10c      	bne.n	8003b8a <HAL_RCC_OscConfig+0x356>
 8003b70:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	4a60      	ldr	r2, [pc, #384]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b76:	f043 0304 	orr.w	r3, r3, #4
 8003b7a:	6213      	str	r3, [r2, #32]
 8003b7c:	4b5e      	ldr	r3, [pc, #376]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	4a5d      	ldr	r2, [pc, #372]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	6213      	str	r3, [r2, #32]
 8003b88:	e00b      	b.n	8003ba2 <HAL_RCC_OscConfig+0x36e>
 8003b8a:	4b5b      	ldr	r3, [pc, #364]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	4a5a      	ldr	r2, [pc, #360]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	6213      	str	r3, [r2, #32]
 8003b96:	4b58      	ldr	r3, [pc, #352]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4a57      	ldr	r2, [pc, #348]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	f023 0304 	bic.w	r3, r3, #4
 8003ba0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d015      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003baa:	f7fe f8cf 	bl	8001d4c <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	e00a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fe f8cb 	bl	8001d4c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0b1      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc8:	4b4b      	ldr	r3, [pc, #300]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0ee      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x37e>
 8003bd4:	e014      	b.n	8003c00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd6:	f7fe f8b9 	bl	8001d4c <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fe f8b5 	bl	8001d4c <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e09b      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf4:	4b40      	ldr	r3, [pc, #256]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1ee      	bne.n	8003bde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d105      	bne.n	8003c12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c06:	4b3c      	ldr	r3, [pc, #240]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	4a3b      	ldr	r2, [pc, #236]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8087 	beq.w	8003d2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c1c:	4b36      	ldr	r3, [pc, #216]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 030c 	and.w	r3, r3, #12
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d061      	beq.n	8003cec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d146      	bne.n	8003cbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c30:	4b33      	ldr	r3, [pc, #204]	; (8003d00 <HAL_RCC_OscConfig+0x4cc>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c36:	f7fe f889 	bl	8001d4c <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3e:	f7fe f885 	bl	8001d4c <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e06d      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c50:	4b29      	ldr	r3, [pc, #164]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f0      	bne.n	8003c3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c64:	d108      	bne.n	8003c78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4921      	ldr	r1, [pc, #132]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c78:	4b1f      	ldr	r3, [pc, #124]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a19      	ldr	r1, [r3, #32]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	491b      	ldr	r1, [pc, #108]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c90:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <HAL_RCC_OscConfig+0x4cc>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c96:	f7fe f859 	bl	8001d4c <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c9e:	f7fe f855 	bl	8001d4c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e03d      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb0:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x46a>
 8003cbc:	e035      	b.n	8003d2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <HAL_RCC_OscConfig+0x4cc>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fe f842 	bl	8001d4c <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fe f83e 	bl	8001d4c <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e026      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x498>
 8003cea:	e01e      	b.n	8003d2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e019      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCC_OscConfig+0x500>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d106      	bne.n	8003d26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000

08003d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0d0      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b6a      	ldr	r3, [pc, #424]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d910      	bls.n	8003d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b67      	ldr	r3, [pc, #412]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 0207 	bic.w	r2, r3, #7
 8003d62:	4965      	ldr	r1, [pc, #404]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	4b63      	ldr	r3, [pc, #396]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0b8      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d94:	4b59      	ldr	r3, [pc, #356]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4a58      	ldr	r2, [pc, #352]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dac:	4b53      	ldr	r3, [pc, #332]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4a52      	ldr	r2, [pc, #328]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003db6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db8:	4b50      	ldr	r3, [pc, #320]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	494d      	ldr	r1, [pc, #308]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d040      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	4b47      	ldr	r3, [pc, #284]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d115      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e07f      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df6:	4b41      	ldr	r3, [pc, #260]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e073      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e06:	4b3d      	ldr	r3, [pc, #244]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e06b      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e16:	4b39      	ldr	r3, [pc, #228]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f023 0203 	bic.w	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	4936      	ldr	r1, [pc, #216]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e28:	f7fd ff90 	bl	8001d4c <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e30:	f7fd ff8c 	bl	8001d4c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e053      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 020c 	and.w	r2, r3, #12
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d1eb      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e58:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d210      	bcs.n	8003e88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 0207 	bic.w	r2, r3, #7
 8003e6e:	4922      	ldr	r1, [pc, #136]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e032      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e94:	4b19      	ldr	r3, [pc, #100]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4916      	ldr	r1, [pc, #88]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	490e      	ldr	r1, [pc, #56]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ec6:	f000 f821 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	490a      	ldr	r1, [pc, #40]	; (8003f00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed8:	5ccb      	ldrb	r3, [r1, r3]
 8003eda:	fa22 f303 	lsr.w	r3, r2, r3
 8003ede:	4a09      	ldr	r2, [pc, #36]	; (8003f04 <HAL_RCC_ClockConfig+0x1cc>)
 8003ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <HAL_RCC_ClockConfig+0x1d0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fd feee 	bl	8001cc8 <HAL_InitTick>

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40022000 	.word	0x40022000
 8003efc:	40021000 	.word	0x40021000
 8003f00:	08009cc8 	.word	0x08009cc8
 8003f04:	20000008 	.word	0x20000008
 8003f08:	2000000c 	.word	0x2000000c

08003f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f26:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d002      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x30>
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d003      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0x36>
 8003f3a:	e027      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f3e:	613b      	str	r3, [r7, #16]
      break;
 8003f40:	e027      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	0c9b      	lsrs	r3, r3, #18
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f4c:	5cd3      	ldrb	r3, [r2, r3]
 8003f4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d010      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f5a:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	0c5b      	lsrs	r3, r3, #17
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	4a11      	ldr	r2, [pc, #68]	; (8003fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f66:	5cd3      	ldrb	r3, [r2, r3]
 8003f68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a0d      	ldr	r2, [pc, #52]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f6e:	fb03 f202 	mul.w	r2, r3, r2
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	e004      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a0c      	ldr	r2, [pc, #48]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	613b      	str	r3, [r7, #16]
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f8e:	613b      	str	r3, [r7, #16]
      break;
 8003f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f92:	693b      	ldr	r3, [r7, #16]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	007a1200 	.word	0x007a1200
 8003fa8:	08009ce0 	.word	0x08009ce0
 8003fac:	08009cf0 	.word	0x08009cf0
 8003fb0:	003d0900 	.word	0x003d0900

08003fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb8:	4b02      	ldr	r3, [pc, #8]	; (8003fc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fba:	681b      	ldr	r3, [r3, #0]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	20000008 	.word	0x20000008

08003fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fcc:	f7ff fff2 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	4903      	ldr	r1, [pc, #12]	; (8003fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fde:	5ccb      	ldrb	r3, [r1, r3]
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	08009cd8 	.word	0x08009cd8

08003ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ff4:	f7ff ffde 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	0adb      	lsrs	r3, r3, #11
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4903      	ldr	r1, [pc, #12]	; (8004014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40021000 	.word	0x40021000
 8004014:	08009cd8 	.word	0x08009cd8

08004018 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004020:	4b0a      	ldr	r3, [pc, #40]	; (800404c <RCC_Delay+0x34>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a0a      	ldr	r2, [pc, #40]	; (8004050 <RCC_Delay+0x38>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	0a5b      	lsrs	r3, r3, #9
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004034:	bf00      	nop
  }
  while (Delay --);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1e5a      	subs	r2, r3, #1
 800403a:	60fa      	str	r2, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f9      	bne.n	8004034 <RCC_Delay+0x1c>
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr
 800404c:	20000008 	.word	0x20000008
 8004050:	10624dd3 	.word	0x10624dd3

08004054 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d07d      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004070:	2300      	movs	r3, #0
 8004072:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004074:	4b4f      	ldr	r3, [pc, #316]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10d      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004080:	4b4c      	ldr	r3, [pc, #304]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	4a4b      	ldr	r2, [pc, #300]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408a:	61d3      	str	r3, [r2, #28]
 800408c:	4b49      	ldr	r3, [pc, #292]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004098:	2301      	movs	r3, #1
 800409a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	4b46      	ldr	r3, [pc, #280]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d118      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a8:	4b43      	ldr	r3, [pc, #268]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a42      	ldr	r2, [pc, #264]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b4:	f7fd fe4a 	bl	8001d4c <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ba:	e008      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040bc:	f7fd fe46 	bl	8001d4c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	; 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e06d      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ce:	4b3a      	ldr	r3, [pc, #232]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040da:	4b36      	ldr	r3, [pc, #216]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d02e      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d027      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040f8:	4b2e      	ldr	r3, [pc, #184]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004100:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004102:	4b2e      	ldr	r3, [pc, #184]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004104:	2201      	movs	r2, #1
 8004106:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004108:	4b2c      	ldr	r3, [pc, #176]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800410e:	4a29      	ldr	r2, [pc, #164]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d014      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411e:	f7fd fe15 	bl	8001d4c <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004124:	e00a      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004126:	f7fd fe11 	bl	8001d4c <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f241 3288 	movw	r2, #5000	; 0x1388
 8004134:	4293      	cmp	r3, r2
 8004136:	d901      	bls.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e036      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413c:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ee      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4917      	ldr	r1, [pc, #92]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004156:	4313      	orrs	r3, r2
 8004158:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800415a:	7dfb      	ldrb	r3, [r7, #23]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d105      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004160:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004178:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	490b      	ldr	r1, [pc, #44]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004186:	4313      	orrs	r3, r2
 8004188:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	4904      	ldr	r1, [pc, #16]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40007000 	.word	0x40007000
 80041bc:	42420440 	.word	0x42420440

080041c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	2300      	movs	r3, #0
 80041da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	2b0f      	cmp	r3, #15
 80041e2:	f200 80af 	bhi.w	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80041e6:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	080042c3 	.word	0x080042c3
 80041f0:	08004329 	.word	0x08004329
 80041f4:	08004345 	.word	0x08004345
 80041f8:	080042b3 	.word	0x080042b3
 80041fc:	08004345 	.word	0x08004345
 8004200:	08004345 	.word	0x08004345
 8004204:	08004345 	.word	0x08004345
 8004208:	080042bb 	.word	0x080042bb
 800420c:	08004345 	.word	0x08004345
 8004210:	08004345 	.word	0x08004345
 8004214:	08004345 	.word	0x08004345
 8004218:	08004345 	.word	0x08004345
 800421c:	08004345 	.word	0x08004345
 8004220:	08004345 	.word	0x08004345
 8004224:	08004345 	.word	0x08004345
 8004228:	0800422d 	.word	0x0800422d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800422c:	4b4a      	ldr	r3, [pc, #296]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004232:	4b49      	ldr	r3, [pc, #292]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8084 	beq.w	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	0c9b      	lsrs	r3, r3, #18
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	4a44      	ldr	r2, [pc, #272]	; (800435c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800424a:	5cd3      	ldrb	r3, [r2, r3]
 800424c:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d015      	beq.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004258:	4b3f      	ldr	r3, [pc, #252]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	0c5b      	lsrs	r3, r3, #17
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	4a3f      	ldr	r2, [pc, #252]	; (8004360 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8004264:	5cd3      	ldrb	r3, [r2, r3]
 8004266:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00d      	beq.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004272:	4a3c      	ldr	r2, [pc, #240]	; (8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	fbb2 f2f3 	udiv	r2, r2, r3
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	fb02 f303 	mul.w	r3, r2, r3
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e004      	b.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4a38      	ldr	r2, [pc, #224]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8004288:	fb02 f303 	mul.w	r3, r2, r3
 800428c:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800428e:	4b32      	ldr	r3, [pc, #200]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429a:	d102      	bne.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80042a0:	e052      	b.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4a31      	ldr	r2, [pc, #196]	; (800436c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80042a8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	61bb      	str	r3, [r7, #24]
      break;
 80042b0:	e04a      	b.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80042b2:	f7ff fe2b 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 80042b6:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80042b8:	e049      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80042ba:	f7ff fe27 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 80042be:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80042c0:	e045      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80042c2:	4b25      	ldr	r3, [pc, #148]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d2:	d108      	bne.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80042de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042e2:	61bb      	str	r3, [r7, #24]
 80042e4:	e01f      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f0:	d109      	bne.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80042f2:	4b19      	ldr	r3, [pc, #100]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80042fe:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	e00f      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004310:	d11c      	bne.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d016      	beq.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 800431e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004322:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004324:	e012      	b.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8004326:	e011      	b.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004328:	f7ff fe62 	bl	8003ff0 <HAL_RCC_GetPCLK2Freq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	0b9b      	lsrs	r3, r3, #14
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	3301      	adds	r3, #1
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004340:	61bb      	str	r3, [r7, #24]
      break;
 8004342:	e004      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8004344:	bf00      	nop
 8004346:	e002      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8004348:	bf00      	nop
 800434a:	e000      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 800434c:	bf00      	nop
    }
  }
  return (frequency);
 800434e:	69bb      	ldr	r3, [r7, #24]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3720      	adds	r7, #32
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021000 	.word	0x40021000
 800435c:	08009cf4 	.word	0x08009cf4
 8004360:	08009d04 	.word	0x08009d04
 8004364:	007a1200 	.word	0x007a1200
 8004368:	003d0900 	.word	0x003d0900
 800436c:	aaaaaaab 	.word	0xaaaaaaab

08004370 <__errno>:
 8004370:	4b01      	ldr	r3, [pc, #4]	; (8004378 <__errno+0x8>)
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	20000014 	.word	0x20000014

0800437c <__libc_init_array>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	2600      	movs	r6, #0
 8004380:	4d0c      	ldr	r5, [pc, #48]	; (80043b4 <__libc_init_array+0x38>)
 8004382:	4c0d      	ldr	r4, [pc, #52]	; (80043b8 <__libc_init_array+0x3c>)
 8004384:	1b64      	subs	r4, r4, r5
 8004386:	10a4      	asrs	r4, r4, #2
 8004388:	42a6      	cmp	r6, r4
 800438a:	d109      	bne.n	80043a0 <__libc_init_array+0x24>
 800438c:	f004 fc52 	bl	8008c34 <_init>
 8004390:	2600      	movs	r6, #0
 8004392:	4d0a      	ldr	r5, [pc, #40]	; (80043bc <__libc_init_array+0x40>)
 8004394:	4c0a      	ldr	r4, [pc, #40]	; (80043c0 <__libc_init_array+0x44>)
 8004396:	1b64      	subs	r4, r4, r5
 8004398:	10a4      	asrs	r4, r4, #2
 800439a:	42a6      	cmp	r6, r4
 800439c:	d105      	bne.n	80043aa <__libc_init_array+0x2e>
 800439e:	bd70      	pop	{r4, r5, r6, pc}
 80043a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a4:	4798      	blx	r3
 80043a6:	3601      	adds	r6, #1
 80043a8:	e7ee      	b.n	8004388 <__libc_init_array+0xc>
 80043aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ae:	4798      	blx	r3
 80043b0:	3601      	adds	r6, #1
 80043b2:	e7f2      	b.n	800439a <__libc_init_array+0x1e>
 80043b4:	0800a1ac 	.word	0x0800a1ac
 80043b8:	0800a1ac 	.word	0x0800a1ac
 80043bc:	0800a1ac 	.word	0x0800a1ac
 80043c0:	0800a1b0 	.word	0x0800a1b0

080043c4 <memset>:
 80043c4:	4603      	mov	r3, r0
 80043c6:	4402      	add	r2, r0
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d100      	bne.n	80043ce <memset+0xa>
 80043cc:	4770      	bx	lr
 80043ce:	f803 1b01 	strb.w	r1, [r3], #1
 80043d2:	e7f9      	b.n	80043c8 <memset+0x4>

080043d4 <__cvt>:
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043da:	461f      	mov	r7, r3
 80043dc:	bfbb      	ittet	lt
 80043de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80043e2:	461f      	movlt	r7, r3
 80043e4:	2300      	movge	r3, #0
 80043e6:	232d      	movlt	r3, #45	; 0x2d
 80043e8:	b088      	sub	sp, #32
 80043ea:	4614      	mov	r4, r2
 80043ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80043ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80043f0:	7013      	strb	r3, [r2, #0]
 80043f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80043f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80043f8:	f023 0820 	bic.w	r8, r3, #32
 80043fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004400:	d005      	beq.n	800440e <__cvt+0x3a>
 8004402:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004406:	d100      	bne.n	800440a <__cvt+0x36>
 8004408:	3501      	adds	r5, #1
 800440a:	2302      	movs	r3, #2
 800440c:	e000      	b.n	8004410 <__cvt+0x3c>
 800440e:	2303      	movs	r3, #3
 8004410:	aa07      	add	r2, sp, #28
 8004412:	9204      	str	r2, [sp, #16]
 8004414:	aa06      	add	r2, sp, #24
 8004416:	e9cd a202 	strd	sl, r2, [sp, #8]
 800441a:	e9cd 3500 	strd	r3, r5, [sp]
 800441e:	4622      	mov	r2, r4
 8004420:	463b      	mov	r3, r7
 8004422:	f001 fd85 	bl	8005f30 <_dtoa_r>
 8004426:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800442a:	4606      	mov	r6, r0
 800442c:	d102      	bne.n	8004434 <__cvt+0x60>
 800442e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004430:	07db      	lsls	r3, r3, #31
 8004432:	d522      	bpl.n	800447a <__cvt+0xa6>
 8004434:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004438:	eb06 0905 	add.w	r9, r6, r5
 800443c:	d110      	bne.n	8004460 <__cvt+0x8c>
 800443e:	7833      	ldrb	r3, [r6, #0]
 8004440:	2b30      	cmp	r3, #48	; 0x30
 8004442:	d10a      	bne.n	800445a <__cvt+0x86>
 8004444:	2200      	movs	r2, #0
 8004446:	2300      	movs	r3, #0
 8004448:	4620      	mov	r0, r4
 800444a:	4639      	mov	r1, r7
 800444c:	f7fc fb18 	bl	8000a80 <__aeabi_dcmpeq>
 8004450:	b918      	cbnz	r0, 800445a <__cvt+0x86>
 8004452:	f1c5 0501 	rsb	r5, r5, #1
 8004456:	f8ca 5000 	str.w	r5, [sl]
 800445a:	f8da 3000 	ldr.w	r3, [sl]
 800445e:	4499      	add	r9, r3
 8004460:	2200      	movs	r2, #0
 8004462:	2300      	movs	r3, #0
 8004464:	4620      	mov	r0, r4
 8004466:	4639      	mov	r1, r7
 8004468:	f7fc fb0a 	bl	8000a80 <__aeabi_dcmpeq>
 800446c:	b108      	cbz	r0, 8004472 <__cvt+0x9e>
 800446e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004472:	2230      	movs	r2, #48	; 0x30
 8004474:	9b07      	ldr	r3, [sp, #28]
 8004476:	454b      	cmp	r3, r9
 8004478:	d307      	bcc.n	800448a <__cvt+0xb6>
 800447a:	4630      	mov	r0, r6
 800447c:	9b07      	ldr	r3, [sp, #28]
 800447e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004480:	1b9b      	subs	r3, r3, r6
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	b008      	add	sp, #32
 8004486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800448a:	1c59      	adds	r1, r3, #1
 800448c:	9107      	str	r1, [sp, #28]
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e7f0      	b.n	8004474 <__cvt+0xa0>

08004492 <__exponent>:
 8004492:	4603      	mov	r3, r0
 8004494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004496:	2900      	cmp	r1, #0
 8004498:	f803 2b02 	strb.w	r2, [r3], #2
 800449c:	bfb6      	itet	lt
 800449e:	222d      	movlt	r2, #45	; 0x2d
 80044a0:	222b      	movge	r2, #43	; 0x2b
 80044a2:	4249      	neglt	r1, r1
 80044a4:	2909      	cmp	r1, #9
 80044a6:	7042      	strb	r2, [r0, #1]
 80044a8:	dd2b      	ble.n	8004502 <__exponent+0x70>
 80044aa:	f10d 0407 	add.w	r4, sp, #7
 80044ae:	46a4      	mov	ip, r4
 80044b0:	270a      	movs	r7, #10
 80044b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80044b6:	460a      	mov	r2, r1
 80044b8:	46a6      	mov	lr, r4
 80044ba:	fb07 1516 	mls	r5, r7, r6, r1
 80044be:	2a63      	cmp	r2, #99	; 0x63
 80044c0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80044c4:	4631      	mov	r1, r6
 80044c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80044ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80044ce:	dcf0      	bgt.n	80044b2 <__exponent+0x20>
 80044d0:	3130      	adds	r1, #48	; 0x30
 80044d2:	f1ae 0502 	sub.w	r5, lr, #2
 80044d6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80044da:	4629      	mov	r1, r5
 80044dc:	1c44      	adds	r4, r0, #1
 80044de:	4561      	cmp	r1, ip
 80044e0:	d30a      	bcc.n	80044f8 <__exponent+0x66>
 80044e2:	f10d 0209 	add.w	r2, sp, #9
 80044e6:	eba2 020e 	sub.w	r2, r2, lr
 80044ea:	4565      	cmp	r5, ip
 80044ec:	bf88      	it	hi
 80044ee:	2200      	movhi	r2, #0
 80044f0:	4413      	add	r3, r2
 80044f2:	1a18      	subs	r0, r3, r0
 80044f4:	b003      	add	sp, #12
 80044f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044fc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004500:	e7ed      	b.n	80044de <__exponent+0x4c>
 8004502:	2330      	movs	r3, #48	; 0x30
 8004504:	3130      	adds	r1, #48	; 0x30
 8004506:	7083      	strb	r3, [r0, #2]
 8004508:	70c1      	strb	r1, [r0, #3]
 800450a:	1d03      	adds	r3, r0, #4
 800450c:	e7f1      	b.n	80044f2 <__exponent+0x60>
	...

08004510 <_printf_float>:
 8004510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004514:	b091      	sub	sp, #68	; 0x44
 8004516:	460c      	mov	r4, r1
 8004518:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800451c:	4616      	mov	r6, r2
 800451e:	461f      	mov	r7, r3
 8004520:	4605      	mov	r5, r0
 8004522:	f002 fe59 	bl	80071d8 <_localeconv_r>
 8004526:	6803      	ldr	r3, [r0, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	9309      	str	r3, [sp, #36]	; 0x24
 800452c:	f7fb fe7c 	bl	8000228 <strlen>
 8004530:	2300      	movs	r3, #0
 8004532:	930e      	str	r3, [sp, #56]	; 0x38
 8004534:	f8d8 3000 	ldr.w	r3, [r8]
 8004538:	900a      	str	r0, [sp, #40]	; 0x28
 800453a:	3307      	adds	r3, #7
 800453c:	f023 0307 	bic.w	r3, r3, #7
 8004540:	f103 0208 	add.w	r2, r3, #8
 8004544:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004548:	f8d4 b000 	ldr.w	fp, [r4]
 800454c:	f8c8 2000 	str.w	r2, [r8]
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004558:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800455c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004560:	930b      	str	r3, [sp, #44]	; 0x2c
 8004562:	f04f 32ff 	mov.w	r2, #4294967295
 8004566:	4640      	mov	r0, r8
 8004568:	4b9c      	ldr	r3, [pc, #624]	; (80047dc <_printf_float+0x2cc>)
 800456a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800456c:	f7fc faba 	bl	8000ae4 <__aeabi_dcmpun>
 8004570:	bb70      	cbnz	r0, 80045d0 <_printf_float+0xc0>
 8004572:	f04f 32ff 	mov.w	r2, #4294967295
 8004576:	4640      	mov	r0, r8
 8004578:	4b98      	ldr	r3, [pc, #608]	; (80047dc <_printf_float+0x2cc>)
 800457a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800457c:	f7fc fa94 	bl	8000aa8 <__aeabi_dcmple>
 8004580:	bb30      	cbnz	r0, 80045d0 <_printf_float+0xc0>
 8004582:	2200      	movs	r2, #0
 8004584:	2300      	movs	r3, #0
 8004586:	4640      	mov	r0, r8
 8004588:	4651      	mov	r1, sl
 800458a:	f7fc fa83 	bl	8000a94 <__aeabi_dcmplt>
 800458e:	b110      	cbz	r0, 8004596 <_printf_float+0x86>
 8004590:	232d      	movs	r3, #45	; 0x2d
 8004592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004596:	4b92      	ldr	r3, [pc, #584]	; (80047e0 <_printf_float+0x2d0>)
 8004598:	4892      	ldr	r0, [pc, #584]	; (80047e4 <_printf_float+0x2d4>)
 800459a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800459e:	bf94      	ite	ls
 80045a0:	4698      	movls	r8, r3
 80045a2:	4680      	movhi	r8, r0
 80045a4:	2303      	movs	r3, #3
 80045a6:	f04f 0a00 	mov.w	sl, #0
 80045aa:	6123      	str	r3, [r4, #16]
 80045ac:	f02b 0304 	bic.w	r3, fp, #4
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	4633      	mov	r3, r6
 80045b4:	4621      	mov	r1, r4
 80045b6:	4628      	mov	r0, r5
 80045b8:	9700      	str	r7, [sp, #0]
 80045ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80045bc:	f000 f9d4 	bl	8004968 <_printf_common>
 80045c0:	3001      	adds	r0, #1
 80045c2:	f040 8090 	bne.w	80046e6 <_printf_float+0x1d6>
 80045c6:	f04f 30ff 	mov.w	r0, #4294967295
 80045ca:	b011      	add	sp, #68	; 0x44
 80045cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d0:	4642      	mov	r2, r8
 80045d2:	4653      	mov	r3, sl
 80045d4:	4640      	mov	r0, r8
 80045d6:	4651      	mov	r1, sl
 80045d8:	f7fc fa84 	bl	8000ae4 <__aeabi_dcmpun>
 80045dc:	b148      	cbz	r0, 80045f2 <_printf_float+0xe2>
 80045de:	f1ba 0f00 	cmp.w	sl, #0
 80045e2:	bfb8      	it	lt
 80045e4:	232d      	movlt	r3, #45	; 0x2d
 80045e6:	4880      	ldr	r0, [pc, #512]	; (80047e8 <_printf_float+0x2d8>)
 80045e8:	bfb8      	it	lt
 80045ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80045ee:	4b7f      	ldr	r3, [pc, #508]	; (80047ec <_printf_float+0x2dc>)
 80045f0:	e7d3      	b.n	800459a <_printf_float+0x8a>
 80045f2:	6863      	ldr	r3, [r4, #4]
 80045f4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	d142      	bne.n	8004682 <_printf_float+0x172>
 80045fc:	2306      	movs	r3, #6
 80045fe:	6063      	str	r3, [r4, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	9206      	str	r2, [sp, #24]
 8004604:	aa0e      	add	r2, sp, #56	; 0x38
 8004606:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800460a:	aa0d      	add	r2, sp, #52	; 0x34
 800460c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004610:	9203      	str	r2, [sp, #12]
 8004612:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004616:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800461a:	6023      	str	r3, [r4, #0]
 800461c:	6863      	ldr	r3, [r4, #4]
 800461e:	4642      	mov	r2, r8
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	4628      	mov	r0, r5
 8004624:	4653      	mov	r3, sl
 8004626:	910b      	str	r1, [sp, #44]	; 0x2c
 8004628:	f7ff fed4 	bl	80043d4 <__cvt>
 800462c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800462e:	4680      	mov	r8, r0
 8004630:	2947      	cmp	r1, #71	; 0x47
 8004632:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004634:	d108      	bne.n	8004648 <_printf_float+0x138>
 8004636:	1cc8      	adds	r0, r1, #3
 8004638:	db02      	blt.n	8004640 <_printf_float+0x130>
 800463a:	6863      	ldr	r3, [r4, #4]
 800463c:	4299      	cmp	r1, r3
 800463e:	dd40      	ble.n	80046c2 <_printf_float+0x1b2>
 8004640:	f1a9 0902 	sub.w	r9, r9, #2
 8004644:	fa5f f989 	uxtb.w	r9, r9
 8004648:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800464c:	d81f      	bhi.n	800468e <_printf_float+0x17e>
 800464e:	464a      	mov	r2, r9
 8004650:	3901      	subs	r1, #1
 8004652:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004656:	910d      	str	r1, [sp, #52]	; 0x34
 8004658:	f7ff ff1b 	bl	8004492 <__exponent>
 800465c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800465e:	4682      	mov	sl, r0
 8004660:	1813      	adds	r3, r2, r0
 8004662:	2a01      	cmp	r2, #1
 8004664:	6123      	str	r3, [r4, #16]
 8004666:	dc02      	bgt.n	800466e <_printf_float+0x15e>
 8004668:	6822      	ldr	r2, [r4, #0]
 800466a:	07d2      	lsls	r2, r2, #31
 800466c:	d501      	bpl.n	8004672 <_printf_float+0x162>
 800466e:	3301      	adds	r3, #1
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004676:	2b00      	cmp	r3, #0
 8004678:	d09b      	beq.n	80045b2 <_printf_float+0xa2>
 800467a:	232d      	movs	r3, #45	; 0x2d
 800467c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004680:	e797      	b.n	80045b2 <_printf_float+0xa2>
 8004682:	2947      	cmp	r1, #71	; 0x47
 8004684:	d1bc      	bne.n	8004600 <_printf_float+0xf0>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1ba      	bne.n	8004600 <_printf_float+0xf0>
 800468a:	2301      	movs	r3, #1
 800468c:	e7b7      	b.n	80045fe <_printf_float+0xee>
 800468e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004692:	d118      	bne.n	80046c6 <_printf_float+0x1b6>
 8004694:	2900      	cmp	r1, #0
 8004696:	6863      	ldr	r3, [r4, #4]
 8004698:	dd0b      	ble.n	80046b2 <_printf_float+0x1a2>
 800469a:	6121      	str	r1, [r4, #16]
 800469c:	b913      	cbnz	r3, 80046a4 <_printf_float+0x194>
 800469e:	6822      	ldr	r2, [r4, #0]
 80046a0:	07d0      	lsls	r0, r2, #31
 80046a2:	d502      	bpl.n	80046aa <_printf_float+0x19a>
 80046a4:	3301      	adds	r3, #1
 80046a6:	440b      	add	r3, r1
 80046a8:	6123      	str	r3, [r4, #16]
 80046aa:	f04f 0a00 	mov.w	sl, #0
 80046ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80046b0:	e7df      	b.n	8004672 <_printf_float+0x162>
 80046b2:	b913      	cbnz	r3, 80046ba <_printf_float+0x1aa>
 80046b4:	6822      	ldr	r2, [r4, #0]
 80046b6:	07d2      	lsls	r2, r2, #31
 80046b8:	d501      	bpl.n	80046be <_printf_float+0x1ae>
 80046ba:	3302      	adds	r3, #2
 80046bc:	e7f4      	b.n	80046a8 <_printf_float+0x198>
 80046be:	2301      	movs	r3, #1
 80046c0:	e7f2      	b.n	80046a8 <_printf_float+0x198>
 80046c2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80046c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046c8:	4299      	cmp	r1, r3
 80046ca:	db05      	blt.n	80046d8 <_printf_float+0x1c8>
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	6121      	str	r1, [r4, #16]
 80046d0:	07d8      	lsls	r0, r3, #31
 80046d2:	d5ea      	bpl.n	80046aa <_printf_float+0x19a>
 80046d4:	1c4b      	adds	r3, r1, #1
 80046d6:	e7e7      	b.n	80046a8 <_printf_float+0x198>
 80046d8:	2900      	cmp	r1, #0
 80046da:	bfcc      	ite	gt
 80046dc:	2201      	movgt	r2, #1
 80046de:	f1c1 0202 	rsble	r2, r1, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	e7e0      	b.n	80046a8 <_printf_float+0x198>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	055a      	lsls	r2, r3, #21
 80046ea:	d407      	bmi.n	80046fc <_printf_float+0x1ec>
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	4642      	mov	r2, r8
 80046f0:	4631      	mov	r1, r6
 80046f2:	4628      	mov	r0, r5
 80046f4:	47b8      	blx	r7
 80046f6:	3001      	adds	r0, #1
 80046f8:	d12b      	bne.n	8004752 <_printf_float+0x242>
 80046fa:	e764      	b.n	80045c6 <_printf_float+0xb6>
 80046fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004700:	f240 80dd 	bls.w	80048be <_printf_float+0x3ae>
 8004704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004708:	2200      	movs	r2, #0
 800470a:	2300      	movs	r3, #0
 800470c:	f7fc f9b8 	bl	8000a80 <__aeabi_dcmpeq>
 8004710:	2800      	cmp	r0, #0
 8004712:	d033      	beq.n	800477c <_printf_float+0x26c>
 8004714:	2301      	movs	r3, #1
 8004716:	4631      	mov	r1, r6
 8004718:	4628      	mov	r0, r5
 800471a:	4a35      	ldr	r2, [pc, #212]	; (80047f0 <_printf_float+0x2e0>)
 800471c:	47b8      	blx	r7
 800471e:	3001      	adds	r0, #1
 8004720:	f43f af51 	beq.w	80045c6 <_printf_float+0xb6>
 8004724:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004728:	429a      	cmp	r2, r3
 800472a:	db02      	blt.n	8004732 <_printf_float+0x222>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	07d8      	lsls	r0, r3, #31
 8004730:	d50f      	bpl.n	8004752 <_printf_float+0x242>
 8004732:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004736:	4631      	mov	r1, r6
 8004738:	4628      	mov	r0, r5
 800473a:	47b8      	blx	r7
 800473c:	3001      	adds	r0, #1
 800473e:	f43f af42 	beq.w	80045c6 <_printf_float+0xb6>
 8004742:	f04f 0800 	mov.w	r8, #0
 8004746:	f104 091a 	add.w	r9, r4, #26
 800474a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800474c:	3b01      	subs	r3, #1
 800474e:	4543      	cmp	r3, r8
 8004750:	dc09      	bgt.n	8004766 <_printf_float+0x256>
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	079b      	lsls	r3, r3, #30
 8004756:	f100 8102 	bmi.w	800495e <_printf_float+0x44e>
 800475a:	68e0      	ldr	r0, [r4, #12]
 800475c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800475e:	4298      	cmp	r0, r3
 8004760:	bfb8      	it	lt
 8004762:	4618      	movlt	r0, r3
 8004764:	e731      	b.n	80045ca <_printf_float+0xba>
 8004766:	2301      	movs	r3, #1
 8004768:	464a      	mov	r2, r9
 800476a:	4631      	mov	r1, r6
 800476c:	4628      	mov	r0, r5
 800476e:	47b8      	blx	r7
 8004770:	3001      	adds	r0, #1
 8004772:	f43f af28 	beq.w	80045c6 <_printf_float+0xb6>
 8004776:	f108 0801 	add.w	r8, r8, #1
 800477a:	e7e6      	b.n	800474a <_printf_float+0x23a>
 800477c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800477e:	2b00      	cmp	r3, #0
 8004780:	dc38      	bgt.n	80047f4 <_printf_float+0x2e4>
 8004782:	2301      	movs	r3, #1
 8004784:	4631      	mov	r1, r6
 8004786:	4628      	mov	r0, r5
 8004788:	4a19      	ldr	r2, [pc, #100]	; (80047f0 <_printf_float+0x2e0>)
 800478a:	47b8      	blx	r7
 800478c:	3001      	adds	r0, #1
 800478e:	f43f af1a 	beq.w	80045c6 <_printf_float+0xb6>
 8004792:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004796:	4313      	orrs	r3, r2
 8004798:	d102      	bne.n	80047a0 <_printf_float+0x290>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	07d9      	lsls	r1, r3, #31
 800479e:	d5d8      	bpl.n	8004752 <_printf_float+0x242>
 80047a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047a4:	4631      	mov	r1, r6
 80047a6:	4628      	mov	r0, r5
 80047a8:	47b8      	blx	r7
 80047aa:	3001      	adds	r0, #1
 80047ac:	f43f af0b 	beq.w	80045c6 <_printf_float+0xb6>
 80047b0:	f04f 0900 	mov.w	r9, #0
 80047b4:	f104 0a1a 	add.w	sl, r4, #26
 80047b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047ba:	425b      	negs	r3, r3
 80047bc:	454b      	cmp	r3, r9
 80047be:	dc01      	bgt.n	80047c4 <_printf_float+0x2b4>
 80047c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047c2:	e794      	b.n	80046ee <_printf_float+0x1de>
 80047c4:	2301      	movs	r3, #1
 80047c6:	4652      	mov	r2, sl
 80047c8:	4631      	mov	r1, r6
 80047ca:	4628      	mov	r0, r5
 80047cc:	47b8      	blx	r7
 80047ce:	3001      	adds	r0, #1
 80047d0:	f43f aef9 	beq.w	80045c6 <_printf_float+0xb6>
 80047d4:	f109 0901 	add.w	r9, r9, #1
 80047d8:	e7ee      	b.n	80047b8 <_printf_float+0x2a8>
 80047da:	bf00      	nop
 80047dc:	7fefffff 	.word	0x7fefffff
 80047e0:	08009d0c 	.word	0x08009d0c
 80047e4:	08009d10 	.word	0x08009d10
 80047e8:	08009d18 	.word	0x08009d18
 80047ec:	08009d14 	.word	0x08009d14
 80047f0:	08009d1c 	.word	0x08009d1c
 80047f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047f8:	429a      	cmp	r2, r3
 80047fa:	bfa8      	it	ge
 80047fc:	461a      	movge	r2, r3
 80047fe:	2a00      	cmp	r2, #0
 8004800:	4691      	mov	r9, r2
 8004802:	dc37      	bgt.n	8004874 <_printf_float+0x364>
 8004804:	f04f 0b00 	mov.w	fp, #0
 8004808:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800480c:	f104 021a 	add.w	r2, r4, #26
 8004810:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004814:	ebaa 0309 	sub.w	r3, sl, r9
 8004818:	455b      	cmp	r3, fp
 800481a:	dc33      	bgt.n	8004884 <_printf_float+0x374>
 800481c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004820:	429a      	cmp	r2, r3
 8004822:	db3b      	blt.n	800489c <_printf_float+0x38c>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	07da      	lsls	r2, r3, #31
 8004828:	d438      	bmi.n	800489c <_printf_float+0x38c>
 800482a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800482c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800482e:	eba3 020a 	sub.w	r2, r3, sl
 8004832:	eba3 0901 	sub.w	r9, r3, r1
 8004836:	4591      	cmp	r9, r2
 8004838:	bfa8      	it	ge
 800483a:	4691      	movge	r9, r2
 800483c:	f1b9 0f00 	cmp.w	r9, #0
 8004840:	dc34      	bgt.n	80048ac <_printf_float+0x39c>
 8004842:	f04f 0800 	mov.w	r8, #0
 8004846:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800484a:	f104 0a1a 	add.w	sl, r4, #26
 800484e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	eba3 0309 	sub.w	r3, r3, r9
 8004858:	4543      	cmp	r3, r8
 800485a:	f77f af7a 	ble.w	8004752 <_printf_float+0x242>
 800485e:	2301      	movs	r3, #1
 8004860:	4652      	mov	r2, sl
 8004862:	4631      	mov	r1, r6
 8004864:	4628      	mov	r0, r5
 8004866:	47b8      	blx	r7
 8004868:	3001      	adds	r0, #1
 800486a:	f43f aeac 	beq.w	80045c6 <_printf_float+0xb6>
 800486e:	f108 0801 	add.w	r8, r8, #1
 8004872:	e7ec      	b.n	800484e <_printf_float+0x33e>
 8004874:	4613      	mov	r3, r2
 8004876:	4631      	mov	r1, r6
 8004878:	4642      	mov	r2, r8
 800487a:	4628      	mov	r0, r5
 800487c:	47b8      	blx	r7
 800487e:	3001      	adds	r0, #1
 8004880:	d1c0      	bne.n	8004804 <_printf_float+0x2f4>
 8004882:	e6a0      	b.n	80045c6 <_printf_float+0xb6>
 8004884:	2301      	movs	r3, #1
 8004886:	4631      	mov	r1, r6
 8004888:	4628      	mov	r0, r5
 800488a:	920b      	str	r2, [sp, #44]	; 0x2c
 800488c:	47b8      	blx	r7
 800488e:	3001      	adds	r0, #1
 8004890:	f43f ae99 	beq.w	80045c6 <_printf_float+0xb6>
 8004894:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004896:	f10b 0b01 	add.w	fp, fp, #1
 800489a:	e7b9      	b.n	8004810 <_printf_float+0x300>
 800489c:	4631      	mov	r1, r6
 800489e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048a2:	4628      	mov	r0, r5
 80048a4:	47b8      	blx	r7
 80048a6:	3001      	adds	r0, #1
 80048a8:	d1bf      	bne.n	800482a <_printf_float+0x31a>
 80048aa:	e68c      	b.n	80045c6 <_printf_float+0xb6>
 80048ac:	464b      	mov	r3, r9
 80048ae:	4631      	mov	r1, r6
 80048b0:	4628      	mov	r0, r5
 80048b2:	eb08 020a 	add.w	r2, r8, sl
 80048b6:	47b8      	blx	r7
 80048b8:	3001      	adds	r0, #1
 80048ba:	d1c2      	bne.n	8004842 <_printf_float+0x332>
 80048bc:	e683      	b.n	80045c6 <_printf_float+0xb6>
 80048be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048c0:	2a01      	cmp	r2, #1
 80048c2:	dc01      	bgt.n	80048c8 <_printf_float+0x3b8>
 80048c4:	07db      	lsls	r3, r3, #31
 80048c6:	d537      	bpl.n	8004938 <_printf_float+0x428>
 80048c8:	2301      	movs	r3, #1
 80048ca:	4642      	mov	r2, r8
 80048cc:	4631      	mov	r1, r6
 80048ce:	4628      	mov	r0, r5
 80048d0:	47b8      	blx	r7
 80048d2:	3001      	adds	r0, #1
 80048d4:	f43f ae77 	beq.w	80045c6 <_printf_float+0xb6>
 80048d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048dc:	4631      	mov	r1, r6
 80048de:	4628      	mov	r0, r5
 80048e0:	47b8      	blx	r7
 80048e2:	3001      	adds	r0, #1
 80048e4:	f43f ae6f 	beq.w	80045c6 <_printf_float+0xb6>
 80048e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048ec:	2200      	movs	r2, #0
 80048ee:	2300      	movs	r3, #0
 80048f0:	f7fc f8c6 	bl	8000a80 <__aeabi_dcmpeq>
 80048f4:	b9d8      	cbnz	r0, 800492e <_printf_float+0x41e>
 80048f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048f8:	f108 0201 	add.w	r2, r8, #1
 80048fc:	3b01      	subs	r3, #1
 80048fe:	4631      	mov	r1, r6
 8004900:	4628      	mov	r0, r5
 8004902:	47b8      	blx	r7
 8004904:	3001      	adds	r0, #1
 8004906:	d10e      	bne.n	8004926 <_printf_float+0x416>
 8004908:	e65d      	b.n	80045c6 <_printf_float+0xb6>
 800490a:	2301      	movs	r3, #1
 800490c:	464a      	mov	r2, r9
 800490e:	4631      	mov	r1, r6
 8004910:	4628      	mov	r0, r5
 8004912:	47b8      	blx	r7
 8004914:	3001      	adds	r0, #1
 8004916:	f43f ae56 	beq.w	80045c6 <_printf_float+0xb6>
 800491a:	f108 0801 	add.w	r8, r8, #1
 800491e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004920:	3b01      	subs	r3, #1
 8004922:	4543      	cmp	r3, r8
 8004924:	dcf1      	bgt.n	800490a <_printf_float+0x3fa>
 8004926:	4653      	mov	r3, sl
 8004928:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800492c:	e6e0      	b.n	80046f0 <_printf_float+0x1e0>
 800492e:	f04f 0800 	mov.w	r8, #0
 8004932:	f104 091a 	add.w	r9, r4, #26
 8004936:	e7f2      	b.n	800491e <_printf_float+0x40e>
 8004938:	2301      	movs	r3, #1
 800493a:	4642      	mov	r2, r8
 800493c:	e7df      	b.n	80048fe <_printf_float+0x3ee>
 800493e:	2301      	movs	r3, #1
 8004940:	464a      	mov	r2, r9
 8004942:	4631      	mov	r1, r6
 8004944:	4628      	mov	r0, r5
 8004946:	47b8      	blx	r7
 8004948:	3001      	adds	r0, #1
 800494a:	f43f ae3c 	beq.w	80045c6 <_printf_float+0xb6>
 800494e:	f108 0801 	add.w	r8, r8, #1
 8004952:	68e3      	ldr	r3, [r4, #12]
 8004954:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004956:	1a5b      	subs	r3, r3, r1
 8004958:	4543      	cmp	r3, r8
 800495a:	dcf0      	bgt.n	800493e <_printf_float+0x42e>
 800495c:	e6fd      	b.n	800475a <_printf_float+0x24a>
 800495e:	f04f 0800 	mov.w	r8, #0
 8004962:	f104 0919 	add.w	r9, r4, #25
 8004966:	e7f4      	b.n	8004952 <_printf_float+0x442>

08004968 <_printf_common>:
 8004968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	4616      	mov	r6, r2
 800496e:	4699      	mov	r9, r3
 8004970:	688a      	ldr	r2, [r1, #8]
 8004972:	690b      	ldr	r3, [r1, #16]
 8004974:	4607      	mov	r7, r0
 8004976:	4293      	cmp	r3, r2
 8004978:	bfb8      	it	lt
 800497a:	4613      	movlt	r3, r2
 800497c:	6033      	str	r3, [r6, #0]
 800497e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004982:	460c      	mov	r4, r1
 8004984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004988:	b10a      	cbz	r2, 800498e <_printf_common+0x26>
 800498a:	3301      	adds	r3, #1
 800498c:	6033      	str	r3, [r6, #0]
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	0699      	lsls	r1, r3, #26
 8004992:	bf42      	ittt	mi
 8004994:	6833      	ldrmi	r3, [r6, #0]
 8004996:	3302      	addmi	r3, #2
 8004998:	6033      	strmi	r3, [r6, #0]
 800499a:	6825      	ldr	r5, [r4, #0]
 800499c:	f015 0506 	ands.w	r5, r5, #6
 80049a0:	d106      	bne.n	80049b0 <_printf_common+0x48>
 80049a2:	f104 0a19 	add.w	sl, r4, #25
 80049a6:	68e3      	ldr	r3, [r4, #12]
 80049a8:	6832      	ldr	r2, [r6, #0]
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	42ab      	cmp	r3, r5
 80049ae:	dc28      	bgt.n	8004a02 <_printf_common+0x9a>
 80049b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049b4:	1e13      	subs	r3, r2, #0
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	bf18      	it	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	0692      	lsls	r2, r2, #26
 80049be:	d42d      	bmi.n	8004a1c <_printf_common+0xb4>
 80049c0:	4649      	mov	r1, r9
 80049c2:	4638      	mov	r0, r7
 80049c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049c8:	47c0      	blx	r8
 80049ca:	3001      	adds	r0, #1
 80049cc:	d020      	beq.n	8004a10 <_printf_common+0xa8>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	68e5      	ldr	r5, [r4, #12]
 80049d2:	f003 0306 	and.w	r3, r3, #6
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	bf18      	it	ne
 80049da:	2500      	movne	r5, #0
 80049dc:	6832      	ldr	r2, [r6, #0]
 80049de:	f04f 0600 	mov.w	r6, #0
 80049e2:	68a3      	ldr	r3, [r4, #8]
 80049e4:	bf08      	it	eq
 80049e6:	1aad      	subeq	r5, r5, r2
 80049e8:	6922      	ldr	r2, [r4, #16]
 80049ea:	bf08      	it	eq
 80049ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049f0:	4293      	cmp	r3, r2
 80049f2:	bfc4      	itt	gt
 80049f4:	1a9b      	subgt	r3, r3, r2
 80049f6:	18ed      	addgt	r5, r5, r3
 80049f8:	341a      	adds	r4, #26
 80049fa:	42b5      	cmp	r5, r6
 80049fc:	d11a      	bne.n	8004a34 <_printf_common+0xcc>
 80049fe:	2000      	movs	r0, #0
 8004a00:	e008      	b.n	8004a14 <_printf_common+0xac>
 8004a02:	2301      	movs	r3, #1
 8004a04:	4652      	mov	r2, sl
 8004a06:	4649      	mov	r1, r9
 8004a08:	4638      	mov	r0, r7
 8004a0a:	47c0      	blx	r8
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d103      	bne.n	8004a18 <_printf_common+0xb0>
 8004a10:	f04f 30ff 	mov.w	r0, #4294967295
 8004a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a18:	3501      	adds	r5, #1
 8004a1a:	e7c4      	b.n	80049a6 <_printf_common+0x3e>
 8004a1c:	2030      	movs	r0, #48	; 0x30
 8004a1e:	18e1      	adds	r1, r4, r3
 8004a20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a2a:	4422      	add	r2, r4
 8004a2c:	3302      	adds	r3, #2
 8004a2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a32:	e7c5      	b.n	80049c0 <_printf_common+0x58>
 8004a34:	2301      	movs	r3, #1
 8004a36:	4622      	mov	r2, r4
 8004a38:	4649      	mov	r1, r9
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	47c0      	blx	r8
 8004a3e:	3001      	adds	r0, #1
 8004a40:	d0e6      	beq.n	8004a10 <_printf_common+0xa8>
 8004a42:	3601      	adds	r6, #1
 8004a44:	e7d9      	b.n	80049fa <_printf_common+0x92>
	...

08004a48 <_printf_i>:
 8004a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a4c:	7e0f      	ldrb	r7, [r1, #24]
 8004a4e:	4691      	mov	r9, r2
 8004a50:	2f78      	cmp	r7, #120	; 0x78
 8004a52:	4680      	mov	r8, r0
 8004a54:	460c      	mov	r4, r1
 8004a56:	469a      	mov	sl, r3
 8004a58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a5e:	d807      	bhi.n	8004a70 <_printf_i+0x28>
 8004a60:	2f62      	cmp	r7, #98	; 0x62
 8004a62:	d80a      	bhi.n	8004a7a <_printf_i+0x32>
 8004a64:	2f00      	cmp	r7, #0
 8004a66:	f000 80d9 	beq.w	8004c1c <_printf_i+0x1d4>
 8004a6a:	2f58      	cmp	r7, #88	; 0x58
 8004a6c:	f000 80a4 	beq.w	8004bb8 <_printf_i+0x170>
 8004a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a78:	e03a      	b.n	8004af0 <_printf_i+0xa8>
 8004a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a7e:	2b15      	cmp	r3, #21
 8004a80:	d8f6      	bhi.n	8004a70 <_printf_i+0x28>
 8004a82:	a101      	add	r1, pc, #4	; (adr r1, 8004a88 <_printf_i+0x40>)
 8004a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a88:	08004ae1 	.word	0x08004ae1
 8004a8c:	08004af5 	.word	0x08004af5
 8004a90:	08004a71 	.word	0x08004a71
 8004a94:	08004a71 	.word	0x08004a71
 8004a98:	08004a71 	.word	0x08004a71
 8004a9c:	08004a71 	.word	0x08004a71
 8004aa0:	08004af5 	.word	0x08004af5
 8004aa4:	08004a71 	.word	0x08004a71
 8004aa8:	08004a71 	.word	0x08004a71
 8004aac:	08004a71 	.word	0x08004a71
 8004ab0:	08004a71 	.word	0x08004a71
 8004ab4:	08004c03 	.word	0x08004c03
 8004ab8:	08004b25 	.word	0x08004b25
 8004abc:	08004be5 	.word	0x08004be5
 8004ac0:	08004a71 	.word	0x08004a71
 8004ac4:	08004a71 	.word	0x08004a71
 8004ac8:	08004c25 	.word	0x08004c25
 8004acc:	08004a71 	.word	0x08004a71
 8004ad0:	08004b25 	.word	0x08004b25
 8004ad4:	08004a71 	.word	0x08004a71
 8004ad8:	08004a71 	.word	0x08004a71
 8004adc:	08004bed 	.word	0x08004bed
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	1d1a      	adds	r2, r3, #4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	602a      	str	r2, [r5, #0]
 8004ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0a4      	b.n	8004c3e <_printf_i+0x1f6>
 8004af4:	6820      	ldr	r0, [r4, #0]
 8004af6:	6829      	ldr	r1, [r5, #0]
 8004af8:	0606      	lsls	r6, r0, #24
 8004afa:	f101 0304 	add.w	r3, r1, #4
 8004afe:	d50a      	bpl.n	8004b16 <_printf_i+0xce>
 8004b00:	680e      	ldr	r6, [r1, #0]
 8004b02:	602b      	str	r3, [r5, #0]
 8004b04:	2e00      	cmp	r6, #0
 8004b06:	da03      	bge.n	8004b10 <_printf_i+0xc8>
 8004b08:	232d      	movs	r3, #45	; 0x2d
 8004b0a:	4276      	negs	r6, r6
 8004b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b10:	230a      	movs	r3, #10
 8004b12:	485e      	ldr	r0, [pc, #376]	; (8004c8c <_printf_i+0x244>)
 8004b14:	e019      	b.n	8004b4a <_printf_i+0x102>
 8004b16:	680e      	ldr	r6, [r1, #0]
 8004b18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b1c:	602b      	str	r3, [r5, #0]
 8004b1e:	bf18      	it	ne
 8004b20:	b236      	sxthne	r6, r6
 8004b22:	e7ef      	b.n	8004b04 <_printf_i+0xbc>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	6820      	ldr	r0, [r4, #0]
 8004b28:	1d19      	adds	r1, r3, #4
 8004b2a:	6029      	str	r1, [r5, #0]
 8004b2c:	0601      	lsls	r1, r0, #24
 8004b2e:	d501      	bpl.n	8004b34 <_printf_i+0xec>
 8004b30:	681e      	ldr	r6, [r3, #0]
 8004b32:	e002      	b.n	8004b3a <_printf_i+0xf2>
 8004b34:	0646      	lsls	r6, r0, #25
 8004b36:	d5fb      	bpl.n	8004b30 <_printf_i+0xe8>
 8004b38:	881e      	ldrh	r6, [r3, #0]
 8004b3a:	2f6f      	cmp	r7, #111	; 0x6f
 8004b3c:	bf0c      	ite	eq
 8004b3e:	2308      	moveq	r3, #8
 8004b40:	230a      	movne	r3, #10
 8004b42:	4852      	ldr	r0, [pc, #328]	; (8004c8c <_printf_i+0x244>)
 8004b44:	2100      	movs	r1, #0
 8004b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b4a:	6865      	ldr	r5, [r4, #4]
 8004b4c:	2d00      	cmp	r5, #0
 8004b4e:	bfa8      	it	ge
 8004b50:	6821      	ldrge	r1, [r4, #0]
 8004b52:	60a5      	str	r5, [r4, #8]
 8004b54:	bfa4      	itt	ge
 8004b56:	f021 0104 	bicge.w	r1, r1, #4
 8004b5a:	6021      	strge	r1, [r4, #0]
 8004b5c:	b90e      	cbnz	r6, 8004b62 <_printf_i+0x11a>
 8004b5e:	2d00      	cmp	r5, #0
 8004b60:	d04d      	beq.n	8004bfe <_printf_i+0x1b6>
 8004b62:	4615      	mov	r5, r2
 8004b64:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b68:	fb03 6711 	mls	r7, r3, r1, r6
 8004b6c:	5dc7      	ldrb	r7, [r0, r7]
 8004b6e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b72:	4637      	mov	r7, r6
 8004b74:	42bb      	cmp	r3, r7
 8004b76:	460e      	mov	r6, r1
 8004b78:	d9f4      	bls.n	8004b64 <_printf_i+0x11c>
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d10b      	bne.n	8004b96 <_printf_i+0x14e>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	07de      	lsls	r6, r3, #31
 8004b82:	d508      	bpl.n	8004b96 <_printf_i+0x14e>
 8004b84:	6923      	ldr	r3, [r4, #16]
 8004b86:	6861      	ldr	r1, [r4, #4]
 8004b88:	4299      	cmp	r1, r3
 8004b8a:	bfde      	ittt	le
 8004b8c:	2330      	movle	r3, #48	; 0x30
 8004b8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b96:	1b52      	subs	r2, r2, r5
 8004b98:	6122      	str	r2, [r4, #16]
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	4640      	mov	r0, r8
 8004ba0:	f8cd a000 	str.w	sl, [sp]
 8004ba4:	aa03      	add	r2, sp, #12
 8004ba6:	f7ff fedf 	bl	8004968 <_printf_common>
 8004baa:	3001      	adds	r0, #1
 8004bac:	d14c      	bne.n	8004c48 <_printf_i+0x200>
 8004bae:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb2:	b004      	add	sp, #16
 8004bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb8:	4834      	ldr	r0, [pc, #208]	; (8004c8c <_printf_i+0x244>)
 8004bba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bbe:	6829      	ldr	r1, [r5, #0]
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bc6:	6029      	str	r1, [r5, #0]
 8004bc8:	061d      	lsls	r5, r3, #24
 8004bca:	d514      	bpl.n	8004bf6 <_printf_i+0x1ae>
 8004bcc:	07df      	lsls	r7, r3, #31
 8004bce:	bf44      	itt	mi
 8004bd0:	f043 0320 	orrmi.w	r3, r3, #32
 8004bd4:	6023      	strmi	r3, [r4, #0]
 8004bd6:	b91e      	cbnz	r6, 8004be0 <_printf_i+0x198>
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	f023 0320 	bic.w	r3, r3, #32
 8004bde:	6023      	str	r3, [r4, #0]
 8004be0:	2310      	movs	r3, #16
 8004be2:	e7af      	b.n	8004b44 <_printf_i+0xfc>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	f043 0320 	orr.w	r3, r3, #32
 8004bea:	6023      	str	r3, [r4, #0]
 8004bec:	2378      	movs	r3, #120	; 0x78
 8004bee:	4828      	ldr	r0, [pc, #160]	; (8004c90 <_printf_i+0x248>)
 8004bf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bf4:	e7e3      	b.n	8004bbe <_printf_i+0x176>
 8004bf6:	0659      	lsls	r1, r3, #25
 8004bf8:	bf48      	it	mi
 8004bfa:	b2b6      	uxthmi	r6, r6
 8004bfc:	e7e6      	b.n	8004bcc <_printf_i+0x184>
 8004bfe:	4615      	mov	r5, r2
 8004c00:	e7bb      	b.n	8004b7a <_printf_i+0x132>
 8004c02:	682b      	ldr	r3, [r5, #0]
 8004c04:	6826      	ldr	r6, [r4, #0]
 8004c06:	1d18      	adds	r0, r3, #4
 8004c08:	6961      	ldr	r1, [r4, #20]
 8004c0a:	6028      	str	r0, [r5, #0]
 8004c0c:	0635      	lsls	r5, r6, #24
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	d501      	bpl.n	8004c16 <_printf_i+0x1ce>
 8004c12:	6019      	str	r1, [r3, #0]
 8004c14:	e002      	b.n	8004c1c <_printf_i+0x1d4>
 8004c16:	0670      	lsls	r0, r6, #25
 8004c18:	d5fb      	bpl.n	8004c12 <_printf_i+0x1ca>
 8004c1a:	8019      	strh	r1, [r3, #0]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	4615      	mov	r5, r2
 8004c20:	6123      	str	r3, [r4, #16]
 8004c22:	e7ba      	b.n	8004b9a <_printf_i+0x152>
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	2100      	movs	r1, #0
 8004c28:	1d1a      	adds	r2, r3, #4
 8004c2a:	602a      	str	r2, [r5, #0]
 8004c2c:	681d      	ldr	r5, [r3, #0]
 8004c2e:	6862      	ldr	r2, [r4, #4]
 8004c30:	4628      	mov	r0, r5
 8004c32:	f002 faef 	bl	8007214 <memchr>
 8004c36:	b108      	cbz	r0, 8004c3c <_printf_i+0x1f4>
 8004c38:	1b40      	subs	r0, r0, r5
 8004c3a:	6060      	str	r0, [r4, #4]
 8004c3c:	6863      	ldr	r3, [r4, #4]
 8004c3e:	6123      	str	r3, [r4, #16]
 8004c40:	2300      	movs	r3, #0
 8004c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c46:	e7a8      	b.n	8004b9a <_printf_i+0x152>
 8004c48:	462a      	mov	r2, r5
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	47d0      	blx	sl
 8004c52:	3001      	adds	r0, #1
 8004c54:	d0ab      	beq.n	8004bae <_printf_i+0x166>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	079b      	lsls	r3, r3, #30
 8004c5a:	d413      	bmi.n	8004c84 <_printf_i+0x23c>
 8004c5c:	68e0      	ldr	r0, [r4, #12]
 8004c5e:	9b03      	ldr	r3, [sp, #12]
 8004c60:	4298      	cmp	r0, r3
 8004c62:	bfb8      	it	lt
 8004c64:	4618      	movlt	r0, r3
 8004c66:	e7a4      	b.n	8004bb2 <_printf_i+0x16a>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	4632      	mov	r2, r6
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	4640      	mov	r0, r8
 8004c70:	47d0      	blx	sl
 8004c72:	3001      	adds	r0, #1
 8004c74:	d09b      	beq.n	8004bae <_printf_i+0x166>
 8004c76:	3501      	adds	r5, #1
 8004c78:	68e3      	ldr	r3, [r4, #12]
 8004c7a:	9903      	ldr	r1, [sp, #12]
 8004c7c:	1a5b      	subs	r3, r3, r1
 8004c7e:	42ab      	cmp	r3, r5
 8004c80:	dcf2      	bgt.n	8004c68 <_printf_i+0x220>
 8004c82:	e7eb      	b.n	8004c5c <_printf_i+0x214>
 8004c84:	2500      	movs	r5, #0
 8004c86:	f104 0619 	add.w	r6, r4, #25
 8004c8a:	e7f5      	b.n	8004c78 <_printf_i+0x230>
 8004c8c:	08009d1e 	.word	0x08009d1e
 8004c90:	08009d2f 	.word	0x08009d2f

08004c94 <_scanf_float>:
 8004c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c98:	b087      	sub	sp, #28
 8004c9a:	9303      	str	r3, [sp, #12]
 8004c9c:	688b      	ldr	r3, [r1, #8]
 8004c9e:	4617      	mov	r7, r2
 8004ca0:	1e5a      	subs	r2, r3, #1
 8004ca2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004ca6:	bf85      	ittet	hi
 8004ca8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004cac:	195b      	addhi	r3, r3, r5
 8004cae:	2300      	movls	r3, #0
 8004cb0:	9302      	strhi	r3, [sp, #8]
 8004cb2:	bf88      	it	hi
 8004cb4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004cb8:	468b      	mov	fp, r1
 8004cba:	f04f 0500 	mov.w	r5, #0
 8004cbe:	bf8c      	ite	hi
 8004cc0:	608b      	strhi	r3, [r1, #8]
 8004cc2:	9302      	strls	r3, [sp, #8]
 8004cc4:	680b      	ldr	r3, [r1, #0]
 8004cc6:	4680      	mov	r8, r0
 8004cc8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004ccc:	f84b 3b1c 	str.w	r3, [fp], #28
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	465e      	mov	r6, fp
 8004cd4:	46aa      	mov	sl, r5
 8004cd6:	46a9      	mov	r9, r5
 8004cd8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004cdc:	9501      	str	r5, [sp, #4]
 8004cde:	68a2      	ldr	r2, [r4, #8]
 8004ce0:	b152      	cbz	r2, 8004cf8 <_scanf_float+0x64>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b4e      	cmp	r3, #78	; 0x4e
 8004ce8:	d864      	bhi.n	8004db4 <_scanf_float+0x120>
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d83c      	bhi.n	8004d68 <_scanf_float+0xd4>
 8004cee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004cf2:	b2c8      	uxtb	r0, r1
 8004cf4:	280e      	cmp	r0, #14
 8004cf6:	d93a      	bls.n	8004d6e <_scanf_float+0xda>
 8004cf8:	f1b9 0f00 	cmp.w	r9, #0
 8004cfc:	d003      	beq.n	8004d06 <_scanf_float+0x72>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d0a:	f1ba 0f01 	cmp.w	sl, #1
 8004d0e:	f200 8113 	bhi.w	8004f38 <_scanf_float+0x2a4>
 8004d12:	455e      	cmp	r6, fp
 8004d14:	f200 8105 	bhi.w	8004f22 <_scanf_float+0x28e>
 8004d18:	2501      	movs	r5, #1
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	b007      	add	sp, #28
 8004d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004d26:	2a0d      	cmp	r2, #13
 8004d28:	d8e6      	bhi.n	8004cf8 <_scanf_float+0x64>
 8004d2a:	a101      	add	r1, pc, #4	; (adr r1, 8004d30 <_scanf_float+0x9c>)
 8004d2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004d30:	08004e6f 	.word	0x08004e6f
 8004d34:	08004cf9 	.word	0x08004cf9
 8004d38:	08004cf9 	.word	0x08004cf9
 8004d3c:	08004cf9 	.word	0x08004cf9
 8004d40:	08004ecf 	.word	0x08004ecf
 8004d44:	08004ea7 	.word	0x08004ea7
 8004d48:	08004cf9 	.word	0x08004cf9
 8004d4c:	08004cf9 	.word	0x08004cf9
 8004d50:	08004e7d 	.word	0x08004e7d
 8004d54:	08004cf9 	.word	0x08004cf9
 8004d58:	08004cf9 	.word	0x08004cf9
 8004d5c:	08004cf9 	.word	0x08004cf9
 8004d60:	08004cf9 	.word	0x08004cf9
 8004d64:	08004e35 	.word	0x08004e35
 8004d68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004d6c:	e7db      	b.n	8004d26 <_scanf_float+0x92>
 8004d6e:	290e      	cmp	r1, #14
 8004d70:	d8c2      	bhi.n	8004cf8 <_scanf_float+0x64>
 8004d72:	a001      	add	r0, pc, #4	; (adr r0, 8004d78 <_scanf_float+0xe4>)
 8004d74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004d78:	08004e27 	.word	0x08004e27
 8004d7c:	08004cf9 	.word	0x08004cf9
 8004d80:	08004e27 	.word	0x08004e27
 8004d84:	08004ebb 	.word	0x08004ebb
 8004d88:	08004cf9 	.word	0x08004cf9
 8004d8c:	08004dd5 	.word	0x08004dd5
 8004d90:	08004e11 	.word	0x08004e11
 8004d94:	08004e11 	.word	0x08004e11
 8004d98:	08004e11 	.word	0x08004e11
 8004d9c:	08004e11 	.word	0x08004e11
 8004da0:	08004e11 	.word	0x08004e11
 8004da4:	08004e11 	.word	0x08004e11
 8004da8:	08004e11 	.word	0x08004e11
 8004dac:	08004e11 	.word	0x08004e11
 8004db0:	08004e11 	.word	0x08004e11
 8004db4:	2b6e      	cmp	r3, #110	; 0x6e
 8004db6:	d809      	bhi.n	8004dcc <_scanf_float+0x138>
 8004db8:	2b60      	cmp	r3, #96	; 0x60
 8004dba:	d8b2      	bhi.n	8004d22 <_scanf_float+0x8e>
 8004dbc:	2b54      	cmp	r3, #84	; 0x54
 8004dbe:	d077      	beq.n	8004eb0 <_scanf_float+0x21c>
 8004dc0:	2b59      	cmp	r3, #89	; 0x59
 8004dc2:	d199      	bne.n	8004cf8 <_scanf_float+0x64>
 8004dc4:	2d07      	cmp	r5, #7
 8004dc6:	d197      	bne.n	8004cf8 <_scanf_float+0x64>
 8004dc8:	2508      	movs	r5, #8
 8004dca:	e029      	b.n	8004e20 <_scanf_float+0x18c>
 8004dcc:	2b74      	cmp	r3, #116	; 0x74
 8004dce:	d06f      	beq.n	8004eb0 <_scanf_float+0x21c>
 8004dd0:	2b79      	cmp	r3, #121	; 0x79
 8004dd2:	e7f6      	b.n	8004dc2 <_scanf_float+0x12e>
 8004dd4:	6821      	ldr	r1, [r4, #0]
 8004dd6:	05c8      	lsls	r0, r1, #23
 8004dd8:	d51a      	bpl.n	8004e10 <_scanf_float+0x17c>
 8004dda:	9b02      	ldr	r3, [sp, #8]
 8004ddc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004de0:	6021      	str	r1, [r4, #0]
 8004de2:	f109 0901 	add.w	r9, r9, #1
 8004de6:	b11b      	cbz	r3, 8004df0 <_scanf_float+0x15c>
 8004de8:	3b01      	subs	r3, #1
 8004dea:	3201      	adds	r2, #1
 8004dec:	9302      	str	r3, [sp, #8]
 8004dee:	60a2      	str	r2, [r4, #8]
 8004df0:	68a3      	ldr	r3, [r4, #8]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	60a3      	str	r3, [r4, #8]
 8004df6:	6923      	ldr	r3, [r4, #16]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	6123      	str	r3, [r4, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	607b      	str	r3, [r7, #4]
 8004e04:	f340 8084 	ble.w	8004f10 <_scanf_float+0x27c>
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	e766      	b.n	8004cde <_scanf_float+0x4a>
 8004e10:	eb1a 0f05 	cmn.w	sl, r5
 8004e14:	f47f af70 	bne.w	8004cf8 <_scanf_float+0x64>
 8004e18:	6822      	ldr	r2, [r4, #0]
 8004e1a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004e1e:	6022      	str	r2, [r4, #0]
 8004e20:	f806 3b01 	strb.w	r3, [r6], #1
 8004e24:	e7e4      	b.n	8004df0 <_scanf_float+0x15c>
 8004e26:	6822      	ldr	r2, [r4, #0]
 8004e28:	0610      	lsls	r0, r2, #24
 8004e2a:	f57f af65 	bpl.w	8004cf8 <_scanf_float+0x64>
 8004e2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e32:	e7f4      	b.n	8004e1e <_scanf_float+0x18a>
 8004e34:	f1ba 0f00 	cmp.w	sl, #0
 8004e38:	d10e      	bne.n	8004e58 <_scanf_float+0x1c4>
 8004e3a:	f1b9 0f00 	cmp.w	r9, #0
 8004e3e:	d10e      	bne.n	8004e5e <_scanf_float+0x1ca>
 8004e40:	6822      	ldr	r2, [r4, #0]
 8004e42:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004e46:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004e4a:	d108      	bne.n	8004e5e <_scanf_float+0x1ca>
 8004e4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e50:	f04f 0a01 	mov.w	sl, #1
 8004e54:	6022      	str	r2, [r4, #0]
 8004e56:	e7e3      	b.n	8004e20 <_scanf_float+0x18c>
 8004e58:	f1ba 0f02 	cmp.w	sl, #2
 8004e5c:	d055      	beq.n	8004f0a <_scanf_float+0x276>
 8004e5e:	2d01      	cmp	r5, #1
 8004e60:	d002      	beq.n	8004e68 <_scanf_float+0x1d4>
 8004e62:	2d04      	cmp	r5, #4
 8004e64:	f47f af48 	bne.w	8004cf8 <_scanf_float+0x64>
 8004e68:	3501      	adds	r5, #1
 8004e6a:	b2ed      	uxtb	r5, r5
 8004e6c:	e7d8      	b.n	8004e20 <_scanf_float+0x18c>
 8004e6e:	f1ba 0f01 	cmp.w	sl, #1
 8004e72:	f47f af41 	bne.w	8004cf8 <_scanf_float+0x64>
 8004e76:	f04f 0a02 	mov.w	sl, #2
 8004e7a:	e7d1      	b.n	8004e20 <_scanf_float+0x18c>
 8004e7c:	b97d      	cbnz	r5, 8004e9e <_scanf_float+0x20a>
 8004e7e:	f1b9 0f00 	cmp.w	r9, #0
 8004e82:	f47f af3c 	bne.w	8004cfe <_scanf_float+0x6a>
 8004e86:	6822      	ldr	r2, [r4, #0]
 8004e88:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004e8c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004e90:	f47f af39 	bne.w	8004d06 <_scanf_float+0x72>
 8004e94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e98:	2501      	movs	r5, #1
 8004e9a:	6022      	str	r2, [r4, #0]
 8004e9c:	e7c0      	b.n	8004e20 <_scanf_float+0x18c>
 8004e9e:	2d03      	cmp	r5, #3
 8004ea0:	d0e2      	beq.n	8004e68 <_scanf_float+0x1d4>
 8004ea2:	2d05      	cmp	r5, #5
 8004ea4:	e7de      	b.n	8004e64 <_scanf_float+0x1d0>
 8004ea6:	2d02      	cmp	r5, #2
 8004ea8:	f47f af26 	bne.w	8004cf8 <_scanf_float+0x64>
 8004eac:	2503      	movs	r5, #3
 8004eae:	e7b7      	b.n	8004e20 <_scanf_float+0x18c>
 8004eb0:	2d06      	cmp	r5, #6
 8004eb2:	f47f af21 	bne.w	8004cf8 <_scanf_float+0x64>
 8004eb6:	2507      	movs	r5, #7
 8004eb8:	e7b2      	b.n	8004e20 <_scanf_float+0x18c>
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	0591      	lsls	r1, r2, #22
 8004ebe:	f57f af1b 	bpl.w	8004cf8 <_scanf_float+0x64>
 8004ec2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004ec6:	6022      	str	r2, [r4, #0]
 8004ec8:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ecc:	e7a8      	b.n	8004e20 <_scanf_float+0x18c>
 8004ece:	6822      	ldr	r2, [r4, #0]
 8004ed0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004ed4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004ed8:	d006      	beq.n	8004ee8 <_scanf_float+0x254>
 8004eda:	0550      	lsls	r0, r2, #21
 8004edc:	f57f af0c 	bpl.w	8004cf8 <_scanf_float+0x64>
 8004ee0:	f1b9 0f00 	cmp.w	r9, #0
 8004ee4:	f43f af0f 	beq.w	8004d06 <_scanf_float+0x72>
 8004ee8:	0591      	lsls	r1, r2, #22
 8004eea:	bf58      	it	pl
 8004eec:	9901      	ldrpl	r1, [sp, #4]
 8004eee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004ef2:	bf58      	it	pl
 8004ef4:	eba9 0101 	subpl.w	r1, r9, r1
 8004ef8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004efc:	f04f 0900 	mov.w	r9, #0
 8004f00:	bf58      	it	pl
 8004f02:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004f06:	6022      	str	r2, [r4, #0]
 8004f08:	e78a      	b.n	8004e20 <_scanf_float+0x18c>
 8004f0a:	f04f 0a03 	mov.w	sl, #3
 8004f0e:	e787      	b.n	8004e20 <_scanf_float+0x18c>
 8004f10:	4639      	mov	r1, r7
 8004f12:	4640      	mov	r0, r8
 8004f14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004f18:	4798      	blx	r3
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	f43f aedf 	beq.w	8004cde <_scanf_float+0x4a>
 8004f20:	e6ea      	b.n	8004cf8 <_scanf_float+0x64>
 8004f22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f26:	463a      	mov	r2, r7
 8004f28:	4640      	mov	r0, r8
 8004f2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f2e:	4798      	blx	r3
 8004f30:	6923      	ldr	r3, [r4, #16]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	6123      	str	r3, [r4, #16]
 8004f36:	e6ec      	b.n	8004d12 <_scanf_float+0x7e>
 8004f38:	1e6b      	subs	r3, r5, #1
 8004f3a:	2b06      	cmp	r3, #6
 8004f3c:	d825      	bhi.n	8004f8a <_scanf_float+0x2f6>
 8004f3e:	2d02      	cmp	r5, #2
 8004f40:	d836      	bhi.n	8004fb0 <_scanf_float+0x31c>
 8004f42:	455e      	cmp	r6, fp
 8004f44:	f67f aee8 	bls.w	8004d18 <_scanf_float+0x84>
 8004f48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f4c:	463a      	mov	r2, r7
 8004f4e:	4640      	mov	r0, r8
 8004f50:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f54:	4798      	blx	r3
 8004f56:	6923      	ldr	r3, [r4, #16]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	6123      	str	r3, [r4, #16]
 8004f5c:	e7f1      	b.n	8004f42 <_scanf_float+0x2ae>
 8004f5e:	9802      	ldr	r0, [sp, #8]
 8004f60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f64:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004f68:	463a      	mov	r2, r7
 8004f6a:	9002      	str	r0, [sp, #8]
 8004f6c:	4640      	mov	r0, r8
 8004f6e:	4798      	blx	r3
 8004f70:	6923      	ldr	r3, [r4, #16]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	6123      	str	r3, [r4, #16]
 8004f76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f7a:	fa5f fa8a 	uxtb.w	sl, sl
 8004f7e:	f1ba 0f02 	cmp.w	sl, #2
 8004f82:	d1ec      	bne.n	8004f5e <_scanf_float+0x2ca>
 8004f84:	3d03      	subs	r5, #3
 8004f86:	b2ed      	uxtb	r5, r5
 8004f88:	1b76      	subs	r6, r6, r5
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	05da      	lsls	r2, r3, #23
 8004f8e:	d52f      	bpl.n	8004ff0 <_scanf_float+0x35c>
 8004f90:	055b      	lsls	r3, r3, #21
 8004f92:	d510      	bpl.n	8004fb6 <_scanf_float+0x322>
 8004f94:	455e      	cmp	r6, fp
 8004f96:	f67f aebf 	bls.w	8004d18 <_scanf_float+0x84>
 8004f9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f9e:	463a      	mov	r2, r7
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004fa6:	4798      	blx	r3
 8004fa8:	6923      	ldr	r3, [r4, #16]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	6123      	str	r3, [r4, #16]
 8004fae:	e7f1      	b.n	8004f94 <_scanf_float+0x300>
 8004fb0:	46aa      	mov	sl, r5
 8004fb2:	9602      	str	r6, [sp, #8]
 8004fb4:	e7df      	b.n	8004f76 <_scanf_float+0x2e2>
 8004fb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004fba:	6923      	ldr	r3, [r4, #16]
 8004fbc:	2965      	cmp	r1, #101	; 0x65
 8004fbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8004fc2:	f106 35ff 	add.w	r5, r6, #4294967295
 8004fc6:	6123      	str	r3, [r4, #16]
 8004fc8:	d00c      	beq.n	8004fe4 <_scanf_float+0x350>
 8004fca:	2945      	cmp	r1, #69	; 0x45
 8004fcc:	d00a      	beq.n	8004fe4 <_scanf_float+0x350>
 8004fce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fd2:	463a      	mov	r2, r7
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	4798      	blx	r3
 8004fd8:	6923      	ldr	r3, [r4, #16]
 8004fda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	1eb5      	subs	r5, r6, #2
 8004fe2:	6123      	str	r3, [r4, #16]
 8004fe4:	463a      	mov	r2, r7
 8004fe6:	4640      	mov	r0, r8
 8004fe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fec:	4798      	blx	r3
 8004fee:	462e      	mov	r6, r5
 8004ff0:	6825      	ldr	r5, [r4, #0]
 8004ff2:	f015 0510 	ands.w	r5, r5, #16
 8004ff6:	d155      	bne.n	80050a4 <_scanf_float+0x410>
 8004ff8:	7035      	strb	r5, [r6, #0]
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005004:	d11b      	bne.n	800503e <_scanf_float+0x3aa>
 8005006:	9b01      	ldr	r3, [sp, #4]
 8005008:	454b      	cmp	r3, r9
 800500a:	eba3 0209 	sub.w	r2, r3, r9
 800500e:	d123      	bne.n	8005058 <_scanf_float+0x3c4>
 8005010:	2200      	movs	r2, #0
 8005012:	4659      	mov	r1, fp
 8005014:	4640      	mov	r0, r8
 8005016:	f000 fe7b 	bl	8005d10 <_strtod_r>
 800501a:	6822      	ldr	r2, [r4, #0]
 800501c:	9b03      	ldr	r3, [sp, #12]
 800501e:	f012 0f02 	tst.w	r2, #2
 8005022:	4606      	mov	r6, r0
 8005024:	460f      	mov	r7, r1
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	d021      	beq.n	800506e <_scanf_float+0x3da>
 800502a:	1d1a      	adds	r2, r3, #4
 800502c:	9903      	ldr	r1, [sp, #12]
 800502e:	600a      	str	r2, [r1, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	e9c3 6700 	strd	r6, r7, [r3]
 8005036:	68e3      	ldr	r3, [r4, #12]
 8005038:	3301      	adds	r3, #1
 800503a:	60e3      	str	r3, [r4, #12]
 800503c:	e66d      	b.n	8004d1a <_scanf_float+0x86>
 800503e:	9b04      	ldr	r3, [sp, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0e5      	beq.n	8005010 <_scanf_float+0x37c>
 8005044:	9905      	ldr	r1, [sp, #20]
 8005046:	230a      	movs	r3, #10
 8005048:	462a      	mov	r2, r5
 800504a:	4640      	mov	r0, r8
 800504c:	3101      	adds	r1, #1
 800504e:	f000 fee1 	bl	8005e14 <_strtol_r>
 8005052:	9b04      	ldr	r3, [sp, #16]
 8005054:	9e05      	ldr	r6, [sp, #20]
 8005056:	1ac2      	subs	r2, r0, r3
 8005058:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800505c:	429e      	cmp	r6, r3
 800505e:	bf28      	it	cs
 8005060:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005064:	4630      	mov	r0, r6
 8005066:	4910      	ldr	r1, [pc, #64]	; (80050a8 <_scanf_float+0x414>)
 8005068:	f000 f826 	bl	80050b8 <siprintf>
 800506c:	e7d0      	b.n	8005010 <_scanf_float+0x37c>
 800506e:	f012 0f04 	tst.w	r2, #4
 8005072:	f103 0204 	add.w	r2, r3, #4
 8005076:	d1d9      	bne.n	800502c <_scanf_float+0x398>
 8005078:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800507c:	f8cc 2000 	str.w	r2, [ip]
 8005080:	f8d3 8000 	ldr.w	r8, [r3]
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	f7fb fd2c 	bl	8000ae4 <__aeabi_dcmpun>
 800508c:	b128      	cbz	r0, 800509a <_scanf_float+0x406>
 800508e:	4807      	ldr	r0, [pc, #28]	; (80050ac <_scanf_float+0x418>)
 8005090:	f000 f80e 	bl	80050b0 <nanf>
 8005094:	f8c8 0000 	str.w	r0, [r8]
 8005098:	e7cd      	b.n	8005036 <_scanf_float+0x3a2>
 800509a:	4630      	mov	r0, r6
 800509c:	4639      	mov	r1, r7
 800509e:	f7fb fd7f 	bl	8000ba0 <__aeabi_d2f>
 80050a2:	e7f7      	b.n	8005094 <_scanf_float+0x400>
 80050a4:	2500      	movs	r5, #0
 80050a6:	e638      	b.n	8004d1a <_scanf_float+0x86>
 80050a8:	08009d40 	.word	0x08009d40
 80050ac:	0800a148 	.word	0x0800a148

080050b0 <nanf>:
 80050b0:	4800      	ldr	r0, [pc, #0]	; (80050b4 <nanf+0x4>)
 80050b2:	4770      	bx	lr
 80050b4:	7fc00000 	.word	0x7fc00000

080050b8 <siprintf>:
 80050b8:	b40e      	push	{r1, r2, r3}
 80050ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050be:	b500      	push	{lr}
 80050c0:	b09c      	sub	sp, #112	; 0x70
 80050c2:	ab1d      	add	r3, sp, #116	; 0x74
 80050c4:	9002      	str	r0, [sp, #8]
 80050c6:	9006      	str	r0, [sp, #24]
 80050c8:	9107      	str	r1, [sp, #28]
 80050ca:	9104      	str	r1, [sp, #16]
 80050cc:	4808      	ldr	r0, [pc, #32]	; (80050f0 <siprintf+0x38>)
 80050ce:	4909      	ldr	r1, [pc, #36]	; (80050f4 <siprintf+0x3c>)
 80050d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050d4:	9105      	str	r1, [sp, #20]
 80050d6:	6800      	ldr	r0, [r0, #0]
 80050d8:	a902      	add	r1, sp, #8
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	f002 feba 	bl	8007e54 <_svfiprintf_r>
 80050e0:	2200      	movs	r2, #0
 80050e2:	9b02      	ldr	r3, [sp, #8]
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	b01c      	add	sp, #112	; 0x70
 80050e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050ec:	b003      	add	sp, #12
 80050ee:	4770      	bx	lr
 80050f0:	20000014 	.word	0x20000014
 80050f4:	ffff0208 	.word	0xffff0208

080050f8 <sulp>:
 80050f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050fc:	460f      	mov	r7, r1
 80050fe:	4690      	mov	r8, r2
 8005100:	f002 fc14 	bl	800792c <__ulp>
 8005104:	4604      	mov	r4, r0
 8005106:	460d      	mov	r5, r1
 8005108:	f1b8 0f00 	cmp.w	r8, #0
 800510c:	d011      	beq.n	8005132 <sulp+0x3a>
 800510e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005112:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005116:	2b00      	cmp	r3, #0
 8005118:	dd0b      	ble.n	8005132 <sulp+0x3a>
 800511a:	2400      	movs	r4, #0
 800511c:	051b      	lsls	r3, r3, #20
 800511e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005122:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005126:	4622      	mov	r2, r4
 8005128:	462b      	mov	r3, r5
 800512a:	f7fb fa41 	bl	80005b0 <__aeabi_dmul>
 800512e:	4604      	mov	r4, r0
 8005130:	460d      	mov	r5, r1
 8005132:	4620      	mov	r0, r4
 8005134:	4629      	mov	r1, r5
 8005136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800513a:	0000      	movs	r0, r0
 800513c:	0000      	movs	r0, r0
	...

08005140 <_strtod_l>:
 8005140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	469b      	mov	fp, r3
 8005146:	2300      	movs	r3, #0
 8005148:	b09f      	sub	sp, #124	; 0x7c
 800514a:	931a      	str	r3, [sp, #104]	; 0x68
 800514c:	4b9e      	ldr	r3, [pc, #632]	; (80053c8 <_strtod_l+0x288>)
 800514e:	4682      	mov	sl, r0
 8005150:	681f      	ldr	r7, [r3, #0]
 8005152:	460e      	mov	r6, r1
 8005154:	4638      	mov	r0, r7
 8005156:	9215      	str	r2, [sp, #84]	; 0x54
 8005158:	f7fb f866 	bl	8000228 <strlen>
 800515c:	f04f 0800 	mov.w	r8, #0
 8005160:	4604      	mov	r4, r0
 8005162:	f04f 0900 	mov.w	r9, #0
 8005166:	9619      	str	r6, [sp, #100]	; 0x64
 8005168:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800516a:	781a      	ldrb	r2, [r3, #0]
 800516c:	2a2b      	cmp	r2, #43	; 0x2b
 800516e:	d04c      	beq.n	800520a <_strtod_l+0xca>
 8005170:	d83a      	bhi.n	80051e8 <_strtod_l+0xa8>
 8005172:	2a0d      	cmp	r2, #13
 8005174:	d833      	bhi.n	80051de <_strtod_l+0x9e>
 8005176:	2a08      	cmp	r2, #8
 8005178:	d833      	bhi.n	80051e2 <_strtod_l+0xa2>
 800517a:	2a00      	cmp	r2, #0
 800517c:	d03d      	beq.n	80051fa <_strtod_l+0xba>
 800517e:	2300      	movs	r3, #0
 8005180:	930a      	str	r3, [sp, #40]	; 0x28
 8005182:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005184:	782b      	ldrb	r3, [r5, #0]
 8005186:	2b30      	cmp	r3, #48	; 0x30
 8005188:	f040 80aa 	bne.w	80052e0 <_strtod_l+0x1a0>
 800518c:	786b      	ldrb	r3, [r5, #1]
 800518e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005192:	2b58      	cmp	r3, #88	; 0x58
 8005194:	d166      	bne.n	8005264 <_strtod_l+0x124>
 8005196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005198:	4650      	mov	r0, sl
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	ab1a      	add	r3, sp, #104	; 0x68
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	4a8a      	ldr	r2, [pc, #552]	; (80053cc <_strtod_l+0x28c>)
 80051a2:	f8cd b008 	str.w	fp, [sp, #8]
 80051a6:	ab1b      	add	r3, sp, #108	; 0x6c
 80051a8:	a919      	add	r1, sp, #100	; 0x64
 80051aa:	f001 fd17 	bl	8006bdc <__gethex>
 80051ae:	f010 0607 	ands.w	r6, r0, #7
 80051b2:	4604      	mov	r4, r0
 80051b4:	d005      	beq.n	80051c2 <_strtod_l+0x82>
 80051b6:	2e06      	cmp	r6, #6
 80051b8:	d129      	bne.n	800520e <_strtod_l+0xce>
 80051ba:	2300      	movs	r3, #0
 80051bc:	3501      	adds	r5, #1
 80051be:	9519      	str	r5, [sp, #100]	; 0x64
 80051c0:	930a      	str	r3, [sp, #40]	; 0x28
 80051c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f040 858a 	bne.w	8005cde <_strtod_l+0xb9e>
 80051ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051cc:	b1d3      	cbz	r3, 8005204 <_strtod_l+0xc4>
 80051ce:	4642      	mov	r2, r8
 80051d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80051d4:	4610      	mov	r0, r2
 80051d6:	4619      	mov	r1, r3
 80051d8:	b01f      	add	sp, #124	; 0x7c
 80051da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051de:	2a20      	cmp	r2, #32
 80051e0:	d1cd      	bne.n	800517e <_strtod_l+0x3e>
 80051e2:	3301      	adds	r3, #1
 80051e4:	9319      	str	r3, [sp, #100]	; 0x64
 80051e6:	e7bf      	b.n	8005168 <_strtod_l+0x28>
 80051e8:	2a2d      	cmp	r2, #45	; 0x2d
 80051ea:	d1c8      	bne.n	800517e <_strtod_l+0x3e>
 80051ec:	2201      	movs	r2, #1
 80051ee:	920a      	str	r2, [sp, #40]	; 0x28
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	9219      	str	r2, [sp, #100]	; 0x64
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1c3      	bne.n	8005182 <_strtod_l+0x42>
 80051fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051fc:	9619      	str	r6, [sp, #100]	; 0x64
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f040 856b 	bne.w	8005cda <_strtod_l+0xb9a>
 8005204:	4642      	mov	r2, r8
 8005206:	464b      	mov	r3, r9
 8005208:	e7e4      	b.n	80051d4 <_strtod_l+0x94>
 800520a:	2200      	movs	r2, #0
 800520c:	e7ef      	b.n	80051ee <_strtod_l+0xae>
 800520e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005210:	b13a      	cbz	r2, 8005222 <_strtod_l+0xe2>
 8005212:	2135      	movs	r1, #53	; 0x35
 8005214:	a81c      	add	r0, sp, #112	; 0x70
 8005216:	f002 fc8d 	bl	8007b34 <__copybits>
 800521a:	4650      	mov	r0, sl
 800521c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800521e:	f002 f855 	bl	80072cc <_Bfree>
 8005222:	3e01      	subs	r6, #1
 8005224:	2e04      	cmp	r6, #4
 8005226:	d806      	bhi.n	8005236 <_strtod_l+0xf6>
 8005228:	e8df f006 	tbb	[pc, r6]
 800522c:	1714030a 	.word	0x1714030a
 8005230:	0a          	.byte	0x0a
 8005231:	00          	.byte	0x00
 8005232:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005236:	0721      	lsls	r1, r4, #28
 8005238:	d5c3      	bpl.n	80051c2 <_strtod_l+0x82>
 800523a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800523e:	e7c0      	b.n	80051c2 <_strtod_l+0x82>
 8005240:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005242:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005246:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800524a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800524e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005252:	e7f0      	b.n	8005236 <_strtod_l+0xf6>
 8005254:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80053d0 <_strtod_l+0x290>
 8005258:	e7ed      	b.n	8005236 <_strtod_l+0xf6>
 800525a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800525e:	f04f 38ff 	mov.w	r8, #4294967295
 8005262:	e7e8      	b.n	8005236 <_strtod_l+0xf6>
 8005264:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	9219      	str	r2, [sp, #100]	; 0x64
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2b30      	cmp	r3, #48	; 0x30
 800526e:	d0f9      	beq.n	8005264 <_strtod_l+0x124>
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0a6      	beq.n	80051c2 <_strtod_l+0x82>
 8005274:	2301      	movs	r3, #1
 8005276:	9307      	str	r3, [sp, #28]
 8005278:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800527a:	220a      	movs	r2, #10
 800527c:	9308      	str	r3, [sp, #32]
 800527e:	2300      	movs	r3, #0
 8005280:	469b      	mov	fp, r3
 8005282:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005286:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005288:	7805      	ldrb	r5, [r0, #0]
 800528a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800528e:	b2d9      	uxtb	r1, r3
 8005290:	2909      	cmp	r1, #9
 8005292:	d927      	bls.n	80052e4 <_strtod_l+0x1a4>
 8005294:	4622      	mov	r2, r4
 8005296:	4639      	mov	r1, r7
 8005298:	f002 fef2 	bl	8008080 <strncmp>
 800529c:	2800      	cmp	r0, #0
 800529e:	d033      	beq.n	8005308 <_strtod_l+0x1c8>
 80052a0:	2000      	movs	r0, #0
 80052a2:	462a      	mov	r2, r5
 80052a4:	465c      	mov	r4, fp
 80052a6:	4603      	mov	r3, r0
 80052a8:	9004      	str	r0, [sp, #16]
 80052aa:	2a65      	cmp	r2, #101	; 0x65
 80052ac:	d001      	beq.n	80052b2 <_strtod_l+0x172>
 80052ae:	2a45      	cmp	r2, #69	; 0x45
 80052b0:	d114      	bne.n	80052dc <_strtod_l+0x19c>
 80052b2:	b91c      	cbnz	r4, 80052bc <_strtod_l+0x17c>
 80052b4:	9a07      	ldr	r2, [sp, #28]
 80052b6:	4302      	orrs	r2, r0
 80052b8:	d09f      	beq.n	80051fa <_strtod_l+0xba>
 80052ba:	2400      	movs	r4, #0
 80052bc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80052be:	1c72      	adds	r2, r6, #1
 80052c0:	9219      	str	r2, [sp, #100]	; 0x64
 80052c2:	7872      	ldrb	r2, [r6, #1]
 80052c4:	2a2b      	cmp	r2, #43	; 0x2b
 80052c6:	d079      	beq.n	80053bc <_strtod_l+0x27c>
 80052c8:	2a2d      	cmp	r2, #45	; 0x2d
 80052ca:	f000 8083 	beq.w	80053d4 <_strtod_l+0x294>
 80052ce:	2700      	movs	r7, #0
 80052d0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80052d4:	2909      	cmp	r1, #9
 80052d6:	f240 8083 	bls.w	80053e0 <_strtod_l+0x2a0>
 80052da:	9619      	str	r6, [sp, #100]	; 0x64
 80052dc:	2500      	movs	r5, #0
 80052de:	e09f      	b.n	8005420 <_strtod_l+0x2e0>
 80052e0:	2300      	movs	r3, #0
 80052e2:	e7c8      	b.n	8005276 <_strtod_l+0x136>
 80052e4:	f1bb 0f08 	cmp.w	fp, #8
 80052e8:	bfd5      	itete	le
 80052ea:	9906      	ldrle	r1, [sp, #24]
 80052ec:	9905      	ldrgt	r1, [sp, #20]
 80052ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80052f2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80052f6:	f100 0001 	add.w	r0, r0, #1
 80052fa:	bfd4      	ite	le
 80052fc:	9306      	strle	r3, [sp, #24]
 80052fe:	9305      	strgt	r3, [sp, #20]
 8005300:	f10b 0b01 	add.w	fp, fp, #1
 8005304:	9019      	str	r0, [sp, #100]	; 0x64
 8005306:	e7be      	b.n	8005286 <_strtod_l+0x146>
 8005308:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800530a:	191a      	adds	r2, r3, r4
 800530c:	9219      	str	r2, [sp, #100]	; 0x64
 800530e:	5d1a      	ldrb	r2, [r3, r4]
 8005310:	f1bb 0f00 	cmp.w	fp, #0
 8005314:	d036      	beq.n	8005384 <_strtod_l+0x244>
 8005316:	465c      	mov	r4, fp
 8005318:	9004      	str	r0, [sp, #16]
 800531a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800531e:	2b09      	cmp	r3, #9
 8005320:	d912      	bls.n	8005348 <_strtod_l+0x208>
 8005322:	2301      	movs	r3, #1
 8005324:	e7c1      	b.n	80052aa <_strtod_l+0x16a>
 8005326:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005328:	3001      	adds	r0, #1
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	9219      	str	r2, [sp, #100]	; 0x64
 800532e:	785a      	ldrb	r2, [r3, #1]
 8005330:	2a30      	cmp	r2, #48	; 0x30
 8005332:	d0f8      	beq.n	8005326 <_strtod_l+0x1e6>
 8005334:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005338:	2b08      	cmp	r3, #8
 800533a:	f200 84d5 	bhi.w	8005ce8 <_strtod_l+0xba8>
 800533e:	9004      	str	r0, [sp, #16]
 8005340:	2000      	movs	r0, #0
 8005342:	4604      	mov	r4, r0
 8005344:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005346:	9308      	str	r3, [sp, #32]
 8005348:	3a30      	subs	r2, #48	; 0x30
 800534a:	f100 0301 	add.w	r3, r0, #1
 800534e:	d013      	beq.n	8005378 <_strtod_l+0x238>
 8005350:	9904      	ldr	r1, [sp, #16]
 8005352:	1905      	adds	r5, r0, r4
 8005354:	4419      	add	r1, r3
 8005356:	9104      	str	r1, [sp, #16]
 8005358:	4623      	mov	r3, r4
 800535a:	210a      	movs	r1, #10
 800535c:	42ab      	cmp	r3, r5
 800535e:	d113      	bne.n	8005388 <_strtod_l+0x248>
 8005360:	1823      	adds	r3, r4, r0
 8005362:	2b08      	cmp	r3, #8
 8005364:	f104 0401 	add.w	r4, r4, #1
 8005368:	4404      	add	r4, r0
 800536a:	dc1b      	bgt.n	80053a4 <_strtod_l+0x264>
 800536c:	230a      	movs	r3, #10
 800536e:	9906      	ldr	r1, [sp, #24]
 8005370:	fb03 2301 	mla	r3, r3, r1, r2
 8005374:	9306      	str	r3, [sp, #24]
 8005376:	2300      	movs	r3, #0
 8005378:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800537a:	4618      	mov	r0, r3
 800537c:	1c51      	adds	r1, r2, #1
 800537e:	9119      	str	r1, [sp, #100]	; 0x64
 8005380:	7852      	ldrb	r2, [r2, #1]
 8005382:	e7ca      	b.n	800531a <_strtod_l+0x1da>
 8005384:	4658      	mov	r0, fp
 8005386:	e7d3      	b.n	8005330 <_strtod_l+0x1f0>
 8005388:	2b08      	cmp	r3, #8
 800538a:	dc04      	bgt.n	8005396 <_strtod_l+0x256>
 800538c:	9f06      	ldr	r7, [sp, #24]
 800538e:	434f      	muls	r7, r1
 8005390:	9706      	str	r7, [sp, #24]
 8005392:	3301      	adds	r3, #1
 8005394:	e7e2      	b.n	800535c <_strtod_l+0x21c>
 8005396:	1c5f      	adds	r7, r3, #1
 8005398:	2f10      	cmp	r7, #16
 800539a:	bfde      	ittt	le
 800539c:	9f05      	ldrle	r7, [sp, #20]
 800539e:	434f      	mulle	r7, r1
 80053a0:	9705      	strle	r7, [sp, #20]
 80053a2:	e7f6      	b.n	8005392 <_strtod_l+0x252>
 80053a4:	2c10      	cmp	r4, #16
 80053a6:	bfdf      	itttt	le
 80053a8:	230a      	movle	r3, #10
 80053aa:	9905      	ldrle	r1, [sp, #20]
 80053ac:	fb03 2301 	mlale	r3, r3, r1, r2
 80053b0:	9305      	strle	r3, [sp, #20]
 80053b2:	e7e0      	b.n	8005376 <_strtod_l+0x236>
 80053b4:	2300      	movs	r3, #0
 80053b6:	9304      	str	r3, [sp, #16]
 80053b8:	2301      	movs	r3, #1
 80053ba:	e77b      	b.n	80052b4 <_strtod_l+0x174>
 80053bc:	2700      	movs	r7, #0
 80053be:	1cb2      	adds	r2, r6, #2
 80053c0:	9219      	str	r2, [sp, #100]	; 0x64
 80053c2:	78b2      	ldrb	r2, [r6, #2]
 80053c4:	e784      	b.n	80052d0 <_strtod_l+0x190>
 80053c6:	bf00      	nop
 80053c8:	08009f90 	.word	0x08009f90
 80053cc:	08009d48 	.word	0x08009d48
 80053d0:	7ff00000 	.word	0x7ff00000
 80053d4:	2701      	movs	r7, #1
 80053d6:	e7f2      	b.n	80053be <_strtod_l+0x27e>
 80053d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053da:	1c51      	adds	r1, r2, #1
 80053dc:	9119      	str	r1, [sp, #100]	; 0x64
 80053de:	7852      	ldrb	r2, [r2, #1]
 80053e0:	2a30      	cmp	r2, #48	; 0x30
 80053e2:	d0f9      	beq.n	80053d8 <_strtod_l+0x298>
 80053e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80053e8:	2908      	cmp	r1, #8
 80053ea:	f63f af77 	bhi.w	80052dc <_strtod_l+0x19c>
 80053ee:	f04f 0e0a 	mov.w	lr, #10
 80053f2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80053f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053f8:	9209      	str	r2, [sp, #36]	; 0x24
 80053fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053fc:	1c51      	adds	r1, r2, #1
 80053fe:	9119      	str	r1, [sp, #100]	; 0x64
 8005400:	7852      	ldrb	r2, [r2, #1]
 8005402:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005406:	2d09      	cmp	r5, #9
 8005408:	d935      	bls.n	8005476 <_strtod_l+0x336>
 800540a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800540c:	1b49      	subs	r1, r1, r5
 800540e:	2908      	cmp	r1, #8
 8005410:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005414:	dc02      	bgt.n	800541c <_strtod_l+0x2dc>
 8005416:	4565      	cmp	r5, ip
 8005418:	bfa8      	it	ge
 800541a:	4665      	movge	r5, ip
 800541c:	b107      	cbz	r7, 8005420 <_strtod_l+0x2e0>
 800541e:	426d      	negs	r5, r5
 8005420:	2c00      	cmp	r4, #0
 8005422:	d14c      	bne.n	80054be <_strtod_l+0x37e>
 8005424:	9907      	ldr	r1, [sp, #28]
 8005426:	4301      	orrs	r1, r0
 8005428:	f47f aecb 	bne.w	80051c2 <_strtod_l+0x82>
 800542c:	2b00      	cmp	r3, #0
 800542e:	f47f aee4 	bne.w	80051fa <_strtod_l+0xba>
 8005432:	2a69      	cmp	r2, #105	; 0x69
 8005434:	d026      	beq.n	8005484 <_strtod_l+0x344>
 8005436:	dc23      	bgt.n	8005480 <_strtod_l+0x340>
 8005438:	2a49      	cmp	r2, #73	; 0x49
 800543a:	d023      	beq.n	8005484 <_strtod_l+0x344>
 800543c:	2a4e      	cmp	r2, #78	; 0x4e
 800543e:	f47f aedc 	bne.w	80051fa <_strtod_l+0xba>
 8005442:	499d      	ldr	r1, [pc, #628]	; (80056b8 <_strtod_l+0x578>)
 8005444:	a819      	add	r0, sp, #100	; 0x64
 8005446:	f001 fe17 	bl	8007078 <__match>
 800544a:	2800      	cmp	r0, #0
 800544c:	f43f aed5 	beq.w	80051fa <_strtod_l+0xba>
 8005450:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b28      	cmp	r3, #40	; 0x28
 8005456:	d12c      	bne.n	80054b2 <_strtod_l+0x372>
 8005458:	4998      	ldr	r1, [pc, #608]	; (80056bc <_strtod_l+0x57c>)
 800545a:	aa1c      	add	r2, sp, #112	; 0x70
 800545c:	a819      	add	r0, sp, #100	; 0x64
 800545e:	f001 fe1f 	bl	80070a0 <__hexnan>
 8005462:	2805      	cmp	r0, #5
 8005464:	d125      	bne.n	80054b2 <_strtod_l+0x372>
 8005466:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005468:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800546c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005470:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005474:	e6a5      	b.n	80051c2 <_strtod_l+0x82>
 8005476:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800547a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800547e:	e7bc      	b.n	80053fa <_strtod_l+0x2ba>
 8005480:	2a6e      	cmp	r2, #110	; 0x6e
 8005482:	e7dc      	b.n	800543e <_strtod_l+0x2fe>
 8005484:	498e      	ldr	r1, [pc, #568]	; (80056c0 <_strtod_l+0x580>)
 8005486:	a819      	add	r0, sp, #100	; 0x64
 8005488:	f001 fdf6 	bl	8007078 <__match>
 800548c:	2800      	cmp	r0, #0
 800548e:	f43f aeb4 	beq.w	80051fa <_strtod_l+0xba>
 8005492:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005494:	498b      	ldr	r1, [pc, #556]	; (80056c4 <_strtod_l+0x584>)
 8005496:	3b01      	subs	r3, #1
 8005498:	a819      	add	r0, sp, #100	; 0x64
 800549a:	9319      	str	r3, [sp, #100]	; 0x64
 800549c:	f001 fdec 	bl	8007078 <__match>
 80054a0:	b910      	cbnz	r0, 80054a8 <_strtod_l+0x368>
 80054a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054a4:	3301      	adds	r3, #1
 80054a6:	9319      	str	r3, [sp, #100]	; 0x64
 80054a8:	f04f 0800 	mov.w	r8, #0
 80054ac:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80056c8 <_strtod_l+0x588>
 80054b0:	e687      	b.n	80051c2 <_strtod_l+0x82>
 80054b2:	4886      	ldr	r0, [pc, #536]	; (80056cc <_strtod_l+0x58c>)
 80054b4:	f002 fdce 	bl	8008054 <nan>
 80054b8:	4680      	mov	r8, r0
 80054ba:	4689      	mov	r9, r1
 80054bc:	e681      	b.n	80051c2 <_strtod_l+0x82>
 80054be:	9b04      	ldr	r3, [sp, #16]
 80054c0:	f1bb 0f00 	cmp.w	fp, #0
 80054c4:	bf08      	it	eq
 80054c6:	46a3      	moveq	fp, r4
 80054c8:	1aeb      	subs	r3, r5, r3
 80054ca:	2c10      	cmp	r4, #16
 80054cc:	9806      	ldr	r0, [sp, #24]
 80054ce:	4626      	mov	r6, r4
 80054d0:	9307      	str	r3, [sp, #28]
 80054d2:	bfa8      	it	ge
 80054d4:	2610      	movge	r6, #16
 80054d6:	f7fa fff1 	bl	80004bc <__aeabi_ui2d>
 80054da:	2c09      	cmp	r4, #9
 80054dc:	4680      	mov	r8, r0
 80054de:	4689      	mov	r9, r1
 80054e0:	dd13      	ble.n	800550a <_strtod_l+0x3ca>
 80054e2:	4b7b      	ldr	r3, [pc, #492]	; (80056d0 <_strtod_l+0x590>)
 80054e4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80054e8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80054ec:	f7fb f860 	bl	80005b0 <__aeabi_dmul>
 80054f0:	4680      	mov	r8, r0
 80054f2:	9805      	ldr	r0, [sp, #20]
 80054f4:	4689      	mov	r9, r1
 80054f6:	f7fa ffe1 	bl	80004bc <__aeabi_ui2d>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4640      	mov	r0, r8
 8005500:	4649      	mov	r1, r9
 8005502:	f7fa fe9f 	bl	8000244 <__adddf3>
 8005506:	4680      	mov	r8, r0
 8005508:	4689      	mov	r9, r1
 800550a:	2c0f      	cmp	r4, #15
 800550c:	dc36      	bgt.n	800557c <_strtod_l+0x43c>
 800550e:	9b07      	ldr	r3, [sp, #28]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f43f ae56 	beq.w	80051c2 <_strtod_l+0x82>
 8005516:	dd22      	ble.n	800555e <_strtod_l+0x41e>
 8005518:	2b16      	cmp	r3, #22
 800551a:	dc09      	bgt.n	8005530 <_strtod_l+0x3f0>
 800551c:	496c      	ldr	r1, [pc, #432]	; (80056d0 <_strtod_l+0x590>)
 800551e:	4642      	mov	r2, r8
 8005520:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005524:	464b      	mov	r3, r9
 8005526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800552a:	f7fb f841 	bl	80005b0 <__aeabi_dmul>
 800552e:	e7c3      	b.n	80054b8 <_strtod_l+0x378>
 8005530:	9a07      	ldr	r2, [sp, #28]
 8005532:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005536:	4293      	cmp	r3, r2
 8005538:	db20      	blt.n	800557c <_strtod_l+0x43c>
 800553a:	4d65      	ldr	r5, [pc, #404]	; (80056d0 <_strtod_l+0x590>)
 800553c:	f1c4 040f 	rsb	r4, r4, #15
 8005540:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005544:	4642      	mov	r2, r8
 8005546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800554a:	464b      	mov	r3, r9
 800554c:	f7fb f830 	bl	80005b0 <__aeabi_dmul>
 8005550:	9b07      	ldr	r3, [sp, #28]
 8005552:	1b1c      	subs	r4, r3, r4
 8005554:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005558:	e9d5 2300 	ldrd	r2, r3, [r5]
 800555c:	e7e5      	b.n	800552a <_strtod_l+0x3ea>
 800555e:	9b07      	ldr	r3, [sp, #28]
 8005560:	3316      	adds	r3, #22
 8005562:	db0b      	blt.n	800557c <_strtod_l+0x43c>
 8005564:	9b04      	ldr	r3, [sp, #16]
 8005566:	4640      	mov	r0, r8
 8005568:	1b5d      	subs	r5, r3, r5
 800556a:	4b59      	ldr	r3, [pc, #356]	; (80056d0 <_strtod_l+0x590>)
 800556c:	4649      	mov	r1, r9
 800556e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005572:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005576:	f7fb f945 	bl	8000804 <__aeabi_ddiv>
 800557a:	e79d      	b.n	80054b8 <_strtod_l+0x378>
 800557c:	9b07      	ldr	r3, [sp, #28]
 800557e:	1ba6      	subs	r6, r4, r6
 8005580:	441e      	add	r6, r3
 8005582:	2e00      	cmp	r6, #0
 8005584:	dd74      	ble.n	8005670 <_strtod_l+0x530>
 8005586:	f016 030f 	ands.w	r3, r6, #15
 800558a:	d00a      	beq.n	80055a2 <_strtod_l+0x462>
 800558c:	4950      	ldr	r1, [pc, #320]	; (80056d0 <_strtod_l+0x590>)
 800558e:	4642      	mov	r2, r8
 8005590:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005598:	464b      	mov	r3, r9
 800559a:	f7fb f809 	bl	80005b0 <__aeabi_dmul>
 800559e:	4680      	mov	r8, r0
 80055a0:	4689      	mov	r9, r1
 80055a2:	f036 060f 	bics.w	r6, r6, #15
 80055a6:	d052      	beq.n	800564e <_strtod_l+0x50e>
 80055a8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80055ac:	dd27      	ble.n	80055fe <_strtod_l+0x4be>
 80055ae:	f04f 0b00 	mov.w	fp, #0
 80055b2:	f8cd b010 	str.w	fp, [sp, #16]
 80055b6:	f8cd b020 	str.w	fp, [sp, #32]
 80055ba:	f8cd b018 	str.w	fp, [sp, #24]
 80055be:	2322      	movs	r3, #34	; 0x22
 80055c0:	f04f 0800 	mov.w	r8, #0
 80055c4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80056c8 <_strtod_l+0x588>
 80055c8:	f8ca 3000 	str.w	r3, [sl]
 80055cc:	9b08      	ldr	r3, [sp, #32]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f43f adf7 	beq.w	80051c2 <_strtod_l+0x82>
 80055d4:	4650      	mov	r0, sl
 80055d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80055d8:	f001 fe78 	bl	80072cc <_Bfree>
 80055dc:	4650      	mov	r0, sl
 80055de:	9906      	ldr	r1, [sp, #24]
 80055e0:	f001 fe74 	bl	80072cc <_Bfree>
 80055e4:	4650      	mov	r0, sl
 80055e6:	9904      	ldr	r1, [sp, #16]
 80055e8:	f001 fe70 	bl	80072cc <_Bfree>
 80055ec:	4650      	mov	r0, sl
 80055ee:	9908      	ldr	r1, [sp, #32]
 80055f0:	f001 fe6c 	bl	80072cc <_Bfree>
 80055f4:	4659      	mov	r1, fp
 80055f6:	4650      	mov	r0, sl
 80055f8:	f001 fe68 	bl	80072cc <_Bfree>
 80055fc:	e5e1      	b.n	80051c2 <_strtod_l+0x82>
 80055fe:	4b35      	ldr	r3, [pc, #212]	; (80056d4 <_strtod_l+0x594>)
 8005600:	4640      	mov	r0, r8
 8005602:	9305      	str	r3, [sp, #20]
 8005604:	2300      	movs	r3, #0
 8005606:	4649      	mov	r1, r9
 8005608:	461f      	mov	r7, r3
 800560a:	1136      	asrs	r6, r6, #4
 800560c:	2e01      	cmp	r6, #1
 800560e:	dc21      	bgt.n	8005654 <_strtod_l+0x514>
 8005610:	b10b      	cbz	r3, 8005616 <_strtod_l+0x4d6>
 8005612:	4680      	mov	r8, r0
 8005614:	4689      	mov	r9, r1
 8005616:	4b2f      	ldr	r3, [pc, #188]	; (80056d4 <_strtod_l+0x594>)
 8005618:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800561c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005620:	4642      	mov	r2, r8
 8005622:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005626:	464b      	mov	r3, r9
 8005628:	f7fa ffc2 	bl	80005b0 <__aeabi_dmul>
 800562c:	4b26      	ldr	r3, [pc, #152]	; (80056c8 <_strtod_l+0x588>)
 800562e:	460a      	mov	r2, r1
 8005630:	400b      	ands	r3, r1
 8005632:	4929      	ldr	r1, [pc, #164]	; (80056d8 <_strtod_l+0x598>)
 8005634:	4680      	mov	r8, r0
 8005636:	428b      	cmp	r3, r1
 8005638:	d8b9      	bhi.n	80055ae <_strtod_l+0x46e>
 800563a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800563e:	428b      	cmp	r3, r1
 8005640:	bf86      	itte	hi
 8005642:	f04f 38ff 	movhi.w	r8, #4294967295
 8005646:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80056dc <_strtod_l+0x59c>
 800564a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800564e:	2300      	movs	r3, #0
 8005650:	9305      	str	r3, [sp, #20]
 8005652:	e07f      	b.n	8005754 <_strtod_l+0x614>
 8005654:	07f2      	lsls	r2, r6, #31
 8005656:	d505      	bpl.n	8005664 <_strtod_l+0x524>
 8005658:	9b05      	ldr	r3, [sp, #20]
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f7fa ffa7 	bl	80005b0 <__aeabi_dmul>
 8005662:	2301      	movs	r3, #1
 8005664:	9a05      	ldr	r2, [sp, #20]
 8005666:	3701      	adds	r7, #1
 8005668:	3208      	adds	r2, #8
 800566a:	1076      	asrs	r6, r6, #1
 800566c:	9205      	str	r2, [sp, #20]
 800566e:	e7cd      	b.n	800560c <_strtod_l+0x4cc>
 8005670:	d0ed      	beq.n	800564e <_strtod_l+0x50e>
 8005672:	4276      	negs	r6, r6
 8005674:	f016 020f 	ands.w	r2, r6, #15
 8005678:	d00a      	beq.n	8005690 <_strtod_l+0x550>
 800567a:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <_strtod_l+0x590>)
 800567c:	4640      	mov	r0, r8
 800567e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005682:	4649      	mov	r1, r9
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f7fb f8bc 	bl	8000804 <__aeabi_ddiv>
 800568c:	4680      	mov	r8, r0
 800568e:	4689      	mov	r9, r1
 8005690:	1136      	asrs	r6, r6, #4
 8005692:	d0dc      	beq.n	800564e <_strtod_l+0x50e>
 8005694:	2e1f      	cmp	r6, #31
 8005696:	dd23      	ble.n	80056e0 <_strtod_l+0x5a0>
 8005698:	f04f 0b00 	mov.w	fp, #0
 800569c:	f8cd b010 	str.w	fp, [sp, #16]
 80056a0:	f8cd b020 	str.w	fp, [sp, #32]
 80056a4:	f8cd b018 	str.w	fp, [sp, #24]
 80056a8:	2322      	movs	r3, #34	; 0x22
 80056aa:	f04f 0800 	mov.w	r8, #0
 80056ae:	f04f 0900 	mov.w	r9, #0
 80056b2:	f8ca 3000 	str.w	r3, [sl]
 80056b6:	e789      	b.n	80055cc <_strtod_l+0x48c>
 80056b8:	08009d19 	.word	0x08009d19
 80056bc:	08009d5c 	.word	0x08009d5c
 80056c0:	08009d11 	.word	0x08009d11
 80056c4:	08009e9c 	.word	0x08009e9c
 80056c8:	7ff00000 	.word	0x7ff00000
 80056cc:	0800a148 	.word	0x0800a148
 80056d0:	0800a028 	.word	0x0800a028
 80056d4:	0800a000 	.word	0x0800a000
 80056d8:	7ca00000 	.word	0x7ca00000
 80056dc:	7fefffff 	.word	0x7fefffff
 80056e0:	f016 0310 	ands.w	r3, r6, #16
 80056e4:	bf18      	it	ne
 80056e6:	236a      	movne	r3, #106	; 0x6a
 80056e8:	4640      	mov	r0, r8
 80056ea:	9305      	str	r3, [sp, #20]
 80056ec:	4649      	mov	r1, r9
 80056ee:	2300      	movs	r3, #0
 80056f0:	4fb0      	ldr	r7, [pc, #704]	; (80059b4 <_strtod_l+0x874>)
 80056f2:	07f2      	lsls	r2, r6, #31
 80056f4:	d504      	bpl.n	8005700 <_strtod_l+0x5c0>
 80056f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056fa:	f7fa ff59 	bl	80005b0 <__aeabi_dmul>
 80056fe:	2301      	movs	r3, #1
 8005700:	1076      	asrs	r6, r6, #1
 8005702:	f107 0708 	add.w	r7, r7, #8
 8005706:	d1f4      	bne.n	80056f2 <_strtod_l+0x5b2>
 8005708:	b10b      	cbz	r3, 800570e <_strtod_l+0x5ce>
 800570a:	4680      	mov	r8, r0
 800570c:	4689      	mov	r9, r1
 800570e:	9b05      	ldr	r3, [sp, #20]
 8005710:	b1c3      	cbz	r3, 8005744 <_strtod_l+0x604>
 8005712:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005716:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800571a:	2b00      	cmp	r3, #0
 800571c:	4649      	mov	r1, r9
 800571e:	dd11      	ble.n	8005744 <_strtod_l+0x604>
 8005720:	2b1f      	cmp	r3, #31
 8005722:	f340 8127 	ble.w	8005974 <_strtod_l+0x834>
 8005726:	2b34      	cmp	r3, #52	; 0x34
 8005728:	bfd8      	it	le
 800572a:	f04f 33ff 	movle.w	r3, #4294967295
 800572e:	f04f 0800 	mov.w	r8, #0
 8005732:	bfcf      	iteee	gt
 8005734:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005738:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800573c:	fa03 f202 	lslle.w	r2, r3, r2
 8005740:	ea02 0901 	andle.w	r9, r2, r1
 8005744:	2200      	movs	r2, #0
 8005746:	2300      	movs	r3, #0
 8005748:	4640      	mov	r0, r8
 800574a:	4649      	mov	r1, r9
 800574c:	f7fb f998 	bl	8000a80 <__aeabi_dcmpeq>
 8005750:	2800      	cmp	r0, #0
 8005752:	d1a1      	bne.n	8005698 <_strtod_l+0x558>
 8005754:	9b06      	ldr	r3, [sp, #24]
 8005756:	465a      	mov	r2, fp
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	4650      	mov	r0, sl
 800575c:	4623      	mov	r3, r4
 800575e:	9908      	ldr	r1, [sp, #32]
 8005760:	f001 fe1c 	bl	800739c <__s2b>
 8005764:	9008      	str	r0, [sp, #32]
 8005766:	2800      	cmp	r0, #0
 8005768:	f43f af21 	beq.w	80055ae <_strtod_l+0x46e>
 800576c:	9b04      	ldr	r3, [sp, #16]
 800576e:	f04f 0b00 	mov.w	fp, #0
 8005772:	1b5d      	subs	r5, r3, r5
 8005774:	9b07      	ldr	r3, [sp, #28]
 8005776:	f8cd b010 	str.w	fp, [sp, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	bfb4      	ite	lt
 800577e:	462b      	movlt	r3, r5
 8005780:	2300      	movge	r3, #0
 8005782:	930e      	str	r3, [sp, #56]	; 0x38
 8005784:	9b07      	ldr	r3, [sp, #28]
 8005786:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800578a:	9314      	str	r3, [sp, #80]	; 0x50
 800578c:	9b08      	ldr	r3, [sp, #32]
 800578e:	4650      	mov	r0, sl
 8005790:	6859      	ldr	r1, [r3, #4]
 8005792:	f001 fd5b 	bl	800724c <_Balloc>
 8005796:	9006      	str	r0, [sp, #24]
 8005798:	2800      	cmp	r0, #0
 800579a:	f43f af10 	beq.w	80055be <_strtod_l+0x47e>
 800579e:	9b08      	ldr	r3, [sp, #32]
 80057a0:	300c      	adds	r0, #12
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	f103 010c 	add.w	r1, r3, #12
 80057a8:	3202      	adds	r2, #2
 80057aa:	0092      	lsls	r2, r2, #2
 80057ac:	f001 fd40 	bl	8007230 <memcpy>
 80057b0:	ab1c      	add	r3, sp, #112	; 0x70
 80057b2:	9301      	str	r3, [sp, #4]
 80057b4:	ab1b      	add	r3, sp, #108	; 0x6c
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	4642      	mov	r2, r8
 80057ba:	464b      	mov	r3, r9
 80057bc:	4650      	mov	r0, sl
 80057be:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80057c2:	f002 f92d 	bl	8007a20 <__d2b>
 80057c6:	901a      	str	r0, [sp, #104]	; 0x68
 80057c8:	2800      	cmp	r0, #0
 80057ca:	f43f aef8 	beq.w	80055be <_strtod_l+0x47e>
 80057ce:	2101      	movs	r1, #1
 80057d0:	4650      	mov	r0, sl
 80057d2:	f001 fe7b 	bl	80074cc <__i2b>
 80057d6:	4603      	mov	r3, r0
 80057d8:	9004      	str	r0, [sp, #16]
 80057da:	2800      	cmp	r0, #0
 80057dc:	f43f aeef 	beq.w	80055be <_strtod_l+0x47e>
 80057e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80057e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80057e4:	2d00      	cmp	r5, #0
 80057e6:	bfab      	itete	ge
 80057e8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80057ea:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80057ec:	18ee      	addge	r6, r5, r3
 80057ee:	1b5c      	sublt	r4, r3, r5
 80057f0:	9b05      	ldr	r3, [sp, #20]
 80057f2:	bfa8      	it	ge
 80057f4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80057f6:	eba5 0503 	sub.w	r5, r5, r3
 80057fa:	4415      	add	r5, r2
 80057fc:	4b6e      	ldr	r3, [pc, #440]	; (80059b8 <_strtod_l+0x878>)
 80057fe:	f105 35ff 	add.w	r5, r5, #4294967295
 8005802:	bfb8      	it	lt
 8005804:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005806:	429d      	cmp	r5, r3
 8005808:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800580c:	f280 80c4 	bge.w	8005998 <_strtod_l+0x858>
 8005810:	1b5b      	subs	r3, r3, r5
 8005812:	2b1f      	cmp	r3, #31
 8005814:	f04f 0701 	mov.w	r7, #1
 8005818:	eba2 0203 	sub.w	r2, r2, r3
 800581c:	f300 80b1 	bgt.w	8005982 <_strtod_l+0x842>
 8005820:	2500      	movs	r5, #0
 8005822:	fa07 f303 	lsl.w	r3, r7, r3
 8005826:	930f      	str	r3, [sp, #60]	; 0x3c
 8005828:	18b7      	adds	r7, r6, r2
 800582a:	9b05      	ldr	r3, [sp, #20]
 800582c:	42be      	cmp	r6, r7
 800582e:	4414      	add	r4, r2
 8005830:	441c      	add	r4, r3
 8005832:	4633      	mov	r3, r6
 8005834:	bfa8      	it	ge
 8005836:	463b      	movge	r3, r7
 8005838:	42a3      	cmp	r3, r4
 800583a:	bfa8      	it	ge
 800583c:	4623      	movge	r3, r4
 800583e:	2b00      	cmp	r3, #0
 8005840:	bfc2      	ittt	gt
 8005842:	1aff      	subgt	r7, r7, r3
 8005844:	1ae4      	subgt	r4, r4, r3
 8005846:	1af6      	subgt	r6, r6, r3
 8005848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800584a:	2b00      	cmp	r3, #0
 800584c:	dd17      	ble.n	800587e <_strtod_l+0x73e>
 800584e:	461a      	mov	r2, r3
 8005850:	4650      	mov	r0, sl
 8005852:	9904      	ldr	r1, [sp, #16]
 8005854:	f001 fef8 	bl	8007648 <__pow5mult>
 8005858:	9004      	str	r0, [sp, #16]
 800585a:	2800      	cmp	r0, #0
 800585c:	f43f aeaf 	beq.w	80055be <_strtod_l+0x47e>
 8005860:	4601      	mov	r1, r0
 8005862:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005864:	4650      	mov	r0, sl
 8005866:	f001 fe47 	bl	80074f8 <__multiply>
 800586a:	9009      	str	r0, [sp, #36]	; 0x24
 800586c:	2800      	cmp	r0, #0
 800586e:	f43f aea6 	beq.w	80055be <_strtod_l+0x47e>
 8005872:	4650      	mov	r0, sl
 8005874:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005876:	f001 fd29 	bl	80072cc <_Bfree>
 800587a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800587c:	931a      	str	r3, [sp, #104]	; 0x68
 800587e:	2f00      	cmp	r7, #0
 8005880:	f300 808e 	bgt.w	80059a0 <_strtod_l+0x860>
 8005884:	9b07      	ldr	r3, [sp, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	dd08      	ble.n	800589c <_strtod_l+0x75c>
 800588a:	4650      	mov	r0, sl
 800588c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800588e:	9906      	ldr	r1, [sp, #24]
 8005890:	f001 feda 	bl	8007648 <__pow5mult>
 8005894:	9006      	str	r0, [sp, #24]
 8005896:	2800      	cmp	r0, #0
 8005898:	f43f ae91 	beq.w	80055be <_strtod_l+0x47e>
 800589c:	2c00      	cmp	r4, #0
 800589e:	dd08      	ble.n	80058b2 <_strtod_l+0x772>
 80058a0:	4622      	mov	r2, r4
 80058a2:	4650      	mov	r0, sl
 80058a4:	9906      	ldr	r1, [sp, #24]
 80058a6:	f001 ff29 	bl	80076fc <__lshift>
 80058aa:	9006      	str	r0, [sp, #24]
 80058ac:	2800      	cmp	r0, #0
 80058ae:	f43f ae86 	beq.w	80055be <_strtod_l+0x47e>
 80058b2:	2e00      	cmp	r6, #0
 80058b4:	dd08      	ble.n	80058c8 <_strtod_l+0x788>
 80058b6:	4632      	mov	r2, r6
 80058b8:	4650      	mov	r0, sl
 80058ba:	9904      	ldr	r1, [sp, #16]
 80058bc:	f001 ff1e 	bl	80076fc <__lshift>
 80058c0:	9004      	str	r0, [sp, #16]
 80058c2:	2800      	cmp	r0, #0
 80058c4:	f43f ae7b 	beq.w	80055be <_strtod_l+0x47e>
 80058c8:	4650      	mov	r0, sl
 80058ca:	9a06      	ldr	r2, [sp, #24]
 80058cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80058ce:	f001 ffa1 	bl	8007814 <__mdiff>
 80058d2:	4683      	mov	fp, r0
 80058d4:	2800      	cmp	r0, #0
 80058d6:	f43f ae72 	beq.w	80055be <_strtod_l+0x47e>
 80058da:	2400      	movs	r4, #0
 80058dc:	68c3      	ldr	r3, [r0, #12]
 80058de:	9904      	ldr	r1, [sp, #16]
 80058e0:	60c4      	str	r4, [r0, #12]
 80058e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80058e4:	f001 ff7a 	bl	80077dc <__mcmp>
 80058e8:	42a0      	cmp	r0, r4
 80058ea:	da6b      	bge.n	80059c4 <_strtod_l+0x884>
 80058ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ee:	ea53 0308 	orrs.w	r3, r3, r8
 80058f2:	f040 8091 	bne.w	8005a18 <_strtod_l+0x8d8>
 80058f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f040 808c 	bne.w	8005a18 <_strtod_l+0x8d8>
 8005900:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005904:	0d1b      	lsrs	r3, r3, #20
 8005906:	051b      	lsls	r3, r3, #20
 8005908:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800590c:	f240 8084 	bls.w	8005a18 <_strtod_l+0x8d8>
 8005910:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005914:	b91b      	cbnz	r3, 800591e <_strtod_l+0x7de>
 8005916:	f8db 3010 	ldr.w	r3, [fp, #16]
 800591a:	2b01      	cmp	r3, #1
 800591c:	dd7c      	ble.n	8005a18 <_strtod_l+0x8d8>
 800591e:	4659      	mov	r1, fp
 8005920:	2201      	movs	r2, #1
 8005922:	4650      	mov	r0, sl
 8005924:	f001 feea 	bl	80076fc <__lshift>
 8005928:	9904      	ldr	r1, [sp, #16]
 800592a:	4683      	mov	fp, r0
 800592c:	f001 ff56 	bl	80077dc <__mcmp>
 8005930:	2800      	cmp	r0, #0
 8005932:	dd71      	ble.n	8005a18 <_strtod_l+0x8d8>
 8005934:	9905      	ldr	r1, [sp, #20]
 8005936:	464b      	mov	r3, r9
 8005938:	4a20      	ldr	r2, [pc, #128]	; (80059bc <_strtod_l+0x87c>)
 800593a:	2900      	cmp	r1, #0
 800593c:	f000 808c 	beq.w	8005a58 <_strtod_l+0x918>
 8005940:	ea02 0109 	and.w	r1, r2, r9
 8005944:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005948:	f300 8086 	bgt.w	8005a58 <_strtod_l+0x918>
 800594c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005950:	f77f aeaa 	ble.w	80056a8 <_strtod_l+0x568>
 8005954:	4640      	mov	r0, r8
 8005956:	4649      	mov	r1, r9
 8005958:	4b19      	ldr	r3, [pc, #100]	; (80059c0 <_strtod_l+0x880>)
 800595a:	2200      	movs	r2, #0
 800595c:	f7fa fe28 	bl	80005b0 <__aeabi_dmul>
 8005960:	460b      	mov	r3, r1
 8005962:	4303      	orrs	r3, r0
 8005964:	bf08      	it	eq
 8005966:	2322      	moveq	r3, #34	; 0x22
 8005968:	4680      	mov	r8, r0
 800596a:	4689      	mov	r9, r1
 800596c:	bf08      	it	eq
 800596e:	f8ca 3000 	streq.w	r3, [sl]
 8005972:	e62f      	b.n	80055d4 <_strtod_l+0x494>
 8005974:	f04f 32ff 	mov.w	r2, #4294967295
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	ea03 0808 	and.w	r8, r3, r8
 8005980:	e6e0      	b.n	8005744 <_strtod_l+0x604>
 8005982:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005986:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800598a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800598e:	35e2      	adds	r5, #226	; 0xe2
 8005990:	fa07 f505 	lsl.w	r5, r7, r5
 8005994:	970f      	str	r7, [sp, #60]	; 0x3c
 8005996:	e747      	b.n	8005828 <_strtod_l+0x6e8>
 8005998:	2301      	movs	r3, #1
 800599a:	2500      	movs	r5, #0
 800599c:	930f      	str	r3, [sp, #60]	; 0x3c
 800599e:	e743      	b.n	8005828 <_strtod_l+0x6e8>
 80059a0:	463a      	mov	r2, r7
 80059a2:	4650      	mov	r0, sl
 80059a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80059a6:	f001 fea9 	bl	80076fc <__lshift>
 80059aa:	901a      	str	r0, [sp, #104]	; 0x68
 80059ac:	2800      	cmp	r0, #0
 80059ae:	f47f af69 	bne.w	8005884 <_strtod_l+0x744>
 80059b2:	e604      	b.n	80055be <_strtod_l+0x47e>
 80059b4:	08009d70 	.word	0x08009d70
 80059b8:	fffffc02 	.word	0xfffffc02
 80059bc:	7ff00000 	.word	0x7ff00000
 80059c0:	39500000 	.word	0x39500000
 80059c4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80059c8:	d165      	bne.n	8005a96 <_strtod_l+0x956>
 80059ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059d0:	b35a      	cbz	r2, 8005a2a <_strtod_l+0x8ea>
 80059d2:	4a99      	ldr	r2, [pc, #612]	; (8005c38 <_strtod_l+0xaf8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d12b      	bne.n	8005a30 <_strtod_l+0x8f0>
 80059d8:	9b05      	ldr	r3, [sp, #20]
 80059da:	4641      	mov	r1, r8
 80059dc:	b303      	cbz	r3, 8005a20 <_strtod_l+0x8e0>
 80059de:	464a      	mov	r2, r9
 80059e0:	4b96      	ldr	r3, [pc, #600]	; (8005c3c <_strtod_l+0xafc>)
 80059e2:	4013      	ands	r3, r2
 80059e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80059e8:	f04f 32ff 	mov.w	r2, #4294967295
 80059ec:	d81b      	bhi.n	8005a26 <_strtod_l+0x8e6>
 80059ee:	0d1b      	lsrs	r3, r3, #20
 80059f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	4299      	cmp	r1, r3
 80059fa:	d119      	bne.n	8005a30 <_strtod_l+0x8f0>
 80059fc:	4b90      	ldr	r3, [pc, #576]	; (8005c40 <_strtod_l+0xb00>)
 80059fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d102      	bne.n	8005a0a <_strtod_l+0x8ca>
 8005a04:	3101      	adds	r1, #1
 8005a06:	f43f adda 	beq.w	80055be <_strtod_l+0x47e>
 8005a0a:	f04f 0800 	mov.w	r8, #0
 8005a0e:	4b8b      	ldr	r3, [pc, #556]	; (8005c3c <_strtod_l+0xafc>)
 8005a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a12:	401a      	ands	r2, r3
 8005a14:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005a18:	9b05      	ldr	r3, [sp, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d19a      	bne.n	8005954 <_strtod_l+0x814>
 8005a1e:	e5d9      	b.n	80055d4 <_strtod_l+0x494>
 8005a20:	f04f 33ff 	mov.w	r3, #4294967295
 8005a24:	e7e8      	b.n	80059f8 <_strtod_l+0x8b8>
 8005a26:	4613      	mov	r3, r2
 8005a28:	e7e6      	b.n	80059f8 <_strtod_l+0x8b8>
 8005a2a:	ea53 0308 	orrs.w	r3, r3, r8
 8005a2e:	d081      	beq.n	8005934 <_strtod_l+0x7f4>
 8005a30:	b1e5      	cbz	r5, 8005a6c <_strtod_l+0x92c>
 8005a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a34:	421d      	tst	r5, r3
 8005a36:	d0ef      	beq.n	8005a18 <_strtod_l+0x8d8>
 8005a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	9a05      	ldr	r2, [sp, #20]
 8005a40:	b1c3      	cbz	r3, 8005a74 <_strtod_l+0x934>
 8005a42:	f7ff fb59 	bl	80050f8 <sulp>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a4e:	f7fa fbf9 	bl	8000244 <__adddf3>
 8005a52:	4680      	mov	r8, r0
 8005a54:	4689      	mov	r9, r1
 8005a56:	e7df      	b.n	8005a18 <_strtod_l+0x8d8>
 8005a58:	4013      	ands	r3, r2
 8005a5a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a5e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005a62:	f04f 38ff 	mov.w	r8, #4294967295
 8005a66:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005a6a:	e7d5      	b.n	8005a18 <_strtod_l+0x8d8>
 8005a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a6e:	ea13 0f08 	tst.w	r3, r8
 8005a72:	e7e0      	b.n	8005a36 <_strtod_l+0x8f6>
 8005a74:	f7ff fb40 	bl	80050f8 <sulp>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a80:	f7fa fbde 	bl	8000240 <__aeabi_dsub>
 8005a84:	2200      	movs	r2, #0
 8005a86:	2300      	movs	r3, #0
 8005a88:	4680      	mov	r8, r0
 8005a8a:	4689      	mov	r9, r1
 8005a8c:	f7fa fff8 	bl	8000a80 <__aeabi_dcmpeq>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	d0c1      	beq.n	8005a18 <_strtod_l+0x8d8>
 8005a94:	e608      	b.n	80056a8 <_strtod_l+0x568>
 8005a96:	4658      	mov	r0, fp
 8005a98:	9904      	ldr	r1, [sp, #16]
 8005a9a:	f002 f81d 	bl	8007ad8 <__ratio>
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	460f      	mov	r7, r1
 8005aa8:	f7fa fffe 	bl	8000aa8 <__aeabi_dcmple>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d070      	beq.n	8005b92 <_strtod_l+0xa52>
 8005ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d042      	beq.n	8005b3c <_strtod_l+0x9fc>
 8005ab6:	2600      	movs	r6, #0
 8005ab8:	4f62      	ldr	r7, [pc, #392]	; (8005c44 <_strtod_l+0xb04>)
 8005aba:	4d62      	ldr	r5, [pc, #392]	; (8005c44 <_strtod_l+0xb04>)
 8005abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005abe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ac2:	0d1b      	lsrs	r3, r3, #20
 8005ac4:	051b      	lsls	r3, r3, #20
 8005ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ac8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005aca:	4b5f      	ldr	r3, [pc, #380]	; (8005c48 <_strtod_l+0xb08>)
 8005acc:	429a      	cmp	r2, r3
 8005ace:	f040 80c3 	bne.w	8005c58 <_strtod_l+0xb18>
 8005ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005ada:	4649      	mov	r1, r9
 8005adc:	f001 ff26 	bl	800792c <__ulp>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	f7fa fd62 	bl	80005b0 <__aeabi_dmul>
 8005aec:	4642      	mov	r2, r8
 8005aee:	464b      	mov	r3, r9
 8005af0:	f7fa fba8 	bl	8000244 <__adddf3>
 8005af4:	460b      	mov	r3, r1
 8005af6:	4951      	ldr	r1, [pc, #324]	; (8005c3c <_strtod_l+0xafc>)
 8005af8:	4a54      	ldr	r2, [pc, #336]	; (8005c4c <_strtod_l+0xb0c>)
 8005afa:	4019      	ands	r1, r3
 8005afc:	4291      	cmp	r1, r2
 8005afe:	4680      	mov	r8, r0
 8005b00:	d95d      	bls.n	8005bbe <_strtod_l+0xa7e>
 8005b02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b04:	4b4e      	ldr	r3, [pc, #312]	; (8005c40 <_strtod_l+0xb00>)
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d103      	bne.n	8005b12 <_strtod_l+0x9d2>
 8005b0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	f43f ad56 	beq.w	80055be <_strtod_l+0x47e>
 8005b12:	f04f 38ff 	mov.w	r8, #4294967295
 8005b16:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005c40 <_strtod_l+0xb00>
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b1e:	f001 fbd5 	bl	80072cc <_Bfree>
 8005b22:	4650      	mov	r0, sl
 8005b24:	9906      	ldr	r1, [sp, #24]
 8005b26:	f001 fbd1 	bl	80072cc <_Bfree>
 8005b2a:	4650      	mov	r0, sl
 8005b2c:	9904      	ldr	r1, [sp, #16]
 8005b2e:	f001 fbcd 	bl	80072cc <_Bfree>
 8005b32:	4659      	mov	r1, fp
 8005b34:	4650      	mov	r0, sl
 8005b36:	f001 fbc9 	bl	80072cc <_Bfree>
 8005b3a:	e627      	b.n	800578c <_strtod_l+0x64c>
 8005b3c:	f1b8 0f00 	cmp.w	r8, #0
 8005b40:	d119      	bne.n	8005b76 <_strtod_l+0xa36>
 8005b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b48:	b9e3      	cbnz	r3, 8005b84 <_strtod_l+0xa44>
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	4639      	mov	r1, r7
 8005b50:	4b3c      	ldr	r3, [pc, #240]	; (8005c44 <_strtod_l+0xb04>)
 8005b52:	f7fa ff9f 	bl	8000a94 <__aeabi_dcmplt>
 8005b56:	b9c8      	cbnz	r0, 8005b8c <_strtod_l+0xa4c>
 8005b58:	2200      	movs	r2, #0
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	4b3c      	ldr	r3, [pc, #240]	; (8005c50 <_strtod_l+0xb10>)
 8005b60:	f7fa fd26 	bl	80005b0 <__aeabi_dmul>
 8005b64:	4604      	mov	r4, r0
 8005b66:	460d      	mov	r5, r1
 8005b68:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005b6c:	9416      	str	r4, [sp, #88]	; 0x58
 8005b6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b70:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005b74:	e7a2      	b.n	8005abc <_strtod_l+0x97c>
 8005b76:	f1b8 0f01 	cmp.w	r8, #1
 8005b7a:	d103      	bne.n	8005b84 <_strtod_l+0xa44>
 8005b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f43f ad92 	beq.w	80056a8 <_strtod_l+0x568>
 8005b84:	2600      	movs	r6, #0
 8005b86:	2400      	movs	r4, #0
 8005b88:	4f32      	ldr	r7, [pc, #200]	; (8005c54 <_strtod_l+0xb14>)
 8005b8a:	e796      	b.n	8005aba <_strtod_l+0x97a>
 8005b8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005b8e:	4d30      	ldr	r5, [pc, #192]	; (8005c50 <_strtod_l+0xb10>)
 8005b90:	e7ea      	b.n	8005b68 <_strtod_l+0xa28>
 8005b92:	4b2f      	ldr	r3, [pc, #188]	; (8005c50 <_strtod_l+0xb10>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	4630      	mov	r0, r6
 8005b98:	4639      	mov	r1, r7
 8005b9a:	f7fa fd09 	bl	80005b0 <__aeabi_dmul>
 8005b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	460d      	mov	r5, r1
 8005ba4:	b933      	cbnz	r3, 8005bb4 <_strtod_l+0xa74>
 8005ba6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005baa:	9010      	str	r0, [sp, #64]	; 0x40
 8005bac:	9311      	str	r3, [sp, #68]	; 0x44
 8005bae:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005bb2:	e783      	b.n	8005abc <_strtod_l+0x97c>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005bbc:	e7f7      	b.n	8005bae <_strtod_l+0xa6e>
 8005bbe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005bc2:	9b05      	ldr	r3, [sp, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1a8      	bne.n	8005b1a <_strtod_l+0x9da>
 8005bc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bce:	0d1b      	lsrs	r3, r3, #20
 8005bd0:	051b      	lsls	r3, r3, #20
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d1a1      	bne.n	8005b1a <_strtod_l+0x9da>
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	4629      	mov	r1, r5
 8005bda:	f7fb f8a7 	bl	8000d2c <__aeabi_d2lz>
 8005bde:	f7fa fcb9 	bl	8000554 <__aeabi_l2d>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4620      	mov	r0, r4
 8005be8:	4629      	mov	r1, r5
 8005bea:	f7fa fb29 	bl	8000240 <__aeabi_dsub>
 8005bee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bf4:	ea43 0308 	orr.w	r3, r3, r8
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	460d      	mov	r5, r1
 8005bfe:	d066      	beq.n	8005cce <_strtod_l+0xb8e>
 8005c00:	a309      	add	r3, pc, #36	; (adr r3, 8005c28 <_strtod_l+0xae8>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f7fa ff45 	bl	8000a94 <__aeabi_dcmplt>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	f47f ace2 	bne.w	80055d4 <_strtod_l+0x494>
 8005c10:	a307      	add	r3, pc, #28	; (adr r3, 8005c30 <_strtod_l+0xaf0>)
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	4620      	mov	r0, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f7fa ff59 	bl	8000ad0 <__aeabi_dcmpgt>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f43f af7b 	beq.w	8005b1a <_strtod_l+0x9da>
 8005c24:	e4d6      	b.n	80055d4 <_strtod_l+0x494>
 8005c26:	bf00      	nop
 8005c28:	94a03595 	.word	0x94a03595
 8005c2c:	3fdfffff 	.word	0x3fdfffff
 8005c30:	35afe535 	.word	0x35afe535
 8005c34:	3fe00000 	.word	0x3fe00000
 8005c38:	000fffff 	.word	0x000fffff
 8005c3c:	7ff00000 	.word	0x7ff00000
 8005c40:	7fefffff 	.word	0x7fefffff
 8005c44:	3ff00000 	.word	0x3ff00000
 8005c48:	7fe00000 	.word	0x7fe00000
 8005c4c:	7c9fffff 	.word	0x7c9fffff
 8005c50:	3fe00000 	.word	0x3fe00000
 8005c54:	bff00000 	.word	0xbff00000
 8005c58:	9b05      	ldr	r3, [sp, #20]
 8005c5a:	b313      	cbz	r3, 8005ca2 <_strtod_l+0xb62>
 8005c5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c62:	d81e      	bhi.n	8005ca2 <_strtod_l+0xb62>
 8005c64:	a326      	add	r3, pc, #152	; (adr r3, 8005d00 <_strtod_l+0xbc0>)
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	f7fa ff1b 	bl	8000aa8 <__aeabi_dcmple>
 8005c72:	b190      	cbz	r0, 8005c9a <_strtod_l+0xb5a>
 8005c74:	4629      	mov	r1, r5
 8005c76:	4620      	mov	r0, r4
 8005c78:	f7fa ff72 	bl	8000b60 <__aeabi_d2uiz>
 8005c7c:	2801      	cmp	r0, #1
 8005c7e:	bf38      	it	cc
 8005c80:	2001      	movcc	r0, #1
 8005c82:	f7fa fc1b 	bl	80004bc <__aeabi_ui2d>
 8005c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c88:	4604      	mov	r4, r0
 8005c8a:	460d      	mov	r5, r1
 8005c8c:	b9d3      	cbnz	r3, 8005cc4 <_strtod_l+0xb84>
 8005c8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c92:	9012      	str	r0, [sp, #72]	; 0x48
 8005c94:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c96:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005c9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c9c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005ca0:	1a9f      	subs	r7, r3, r2
 8005ca2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ca6:	f001 fe41 	bl	800792c <__ulp>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	4630      	mov	r0, r6
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	f7fa fc7d 	bl	80005b0 <__aeabi_dmul>
 8005cb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005cba:	f7fa fac3 	bl	8000244 <__adddf3>
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	4689      	mov	r9, r1
 8005cc2:	e77e      	b.n	8005bc2 <_strtod_l+0xa82>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005ccc:	e7e3      	b.n	8005c96 <_strtod_l+0xb56>
 8005cce:	a30e      	add	r3, pc, #56	; (adr r3, 8005d08 <_strtod_l+0xbc8>)
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	f7fa fede 	bl	8000a94 <__aeabi_dcmplt>
 8005cd8:	e7a1      	b.n	8005c1e <_strtod_l+0xade>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8005cde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ce0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	f7ff ba71 	b.w	80051ca <_strtod_l+0x8a>
 8005ce8:	2a65      	cmp	r2, #101	; 0x65
 8005cea:	f43f ab63 	beq.w	80053b4 <_strtod_l+0x274>
 8005cee:	2a45      	cmp	r2, #69	; 0x45
 8005cf0:	f43f ab60 	beq.w	80053b4 <_strtod_l+0x274>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f7ff bb95 	b.w	8005424 <_strtod_l+0x2e4>
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w
 8005d00:	ffc00000 	.word	0xffc00000
 8005d04:	41dfffff 	.word	0x41dfffff
 8005d08:	94a03595 	.word	0x94a03595
 8005d0c:	3fcfffff 	.word	0x3fcfffff

08005d10 <_strtod_r>:
 8005d10:	4b01      	ldr	r3, [pc, #4]	; (8005d18 <_strtod_r+0x8>)
 8005d12:	f7ff ba15 	b.w	8005140 <_strtod_l>
 8005d16:	bf00      	nop
 8005d18:	2000007c 	.word	0x2000007c

08005d1c <_strtol_l.constprop.0>:
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d22:	4680      	mov	r8, r0
 8005d24:	d001      	beq.n	8005d2a <_strtol_l.constprop.0+0xe>
 8005d26:	2b24      	cmp	r3, #36	; 0x24
 8005d28:	d906      	bls.n	8005d38 <_strtol_l.constprop.0+0x1c>
 8005d2a:	f7fe fb21 	bl	8004370 <__errno>
 8005d2e:	2316      	movs	r3, #22
 8005d30:	6003      	str	r3, [r0, #0]
 8005d32:	2000      	movs	r0, #0
 8005d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d38:	460d      	mov	r5, r1
 8005d3a:	4f35      	ldr	r7, [pc, #212]	; (8005e10 <_strtol_l.constprop.0+0xf4>)
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d42:	5de6      	ldrb	r6, [r4, r7]
 8005d44:	f016 0608 	ands.w	r6, r6, #8
 8005d48:	d1f8      	bne.n	8005d3c <_strtol_l.constprop.0+0x20>
 8005d4a:	2c2d      	cmp	r4, #45	; 0x2d
 8005d4c:	d12f      	bne.n	8005dae <_strtol_l.constprop.0+0x92>
 8005d4e:	2601      	movs	r6, #1
 8005d50:	782c      	ldrb	r4, [r5, #0]
 8005d52:	1c85      	adds	r5, r0, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d057      	beq.n	8005e08 <_strtol_l.constprop.0+0xec>
 8005d58:	2b10      	cmp	r3, #16
 8005d5a:	d109      	bne.n	8005d70 <_strtol_l.constprop.0+0x54>
 8005d5c:	2c30      	cmp	r4, #48	; 0x30
 8005d5e:	d107      	bne.n	8005d70 <_strtol_l.constprop.0+0x54>
 8005d60:	7828      	ldrb	r0, [r5, #0]
 8005d62:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005d66:	2858      	cmp	r0, #88	; 0x58
 8005d68:	d149      	bne.n	8005dfe <_strtol_l.constprop.0+0xe2>
 8005d6a:	2310      	movs	r3, #16
 8005d6c:	786c      	ldrb	r4, [r5, #1]
 8005d6e:	3502      	adds	r5, #2
 8005d70:	2700      	movs	r7, #0
 8005d72:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005d76:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005d7a:	fbbe f9f3 	udiv	r9, lr, r3
 8005d7e:	4638      	mov	r0, r7
 8005d80:	fb03 ea19 	mls	sl, r3, r9, lr
 8005d84:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005d88:	f1bc 0f09 	cmp.w	ip, #9
 8005d8c:	d814      	bhi.n	8005db8 <_strtol_l.constprop.0+0x9c>
 8005d8e:	4664      	mov	r4, ip
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	dd22      	ble.n	8005dda <_strtol_l.constprop.0+0xbe>
 8005d94:	2f00      	cmp	r7, #0
 8005d96:	db1d      	blt.n	8005dd4 <_strtol_l.constprop.0+0xb8>
 8005d98:	4581      	cmp	r9, r0
 8005d9a:	d31b      	bcc.n	8005dd4 <_strtol_l.constprop.0+0xb8>
 8005d9c:	d101      	bne.n	8005da2 <_strtol_l.constprop.0+0x86>
 8005d9e:	45a2      	cmp	sl, r4
 8005da0:	db18      	blt.n	8005dd4 <_strtol_l.constprop.0+0xb8>
 8005da2:	2701      	movs	r7, #1
 8005da4:	fb00 4003 	mla	r0, r0, r3, r4
 8005da8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dac:	e7ea      	b.n	8005d84 <_strtol_l.constprop.0+0x68>
 8005dae:	2c2b      	cmp	r4, #43	; 0x2b
 8005db0:	bf04      	itt	eq
 8005db2:	782c      	ldrbeq	r4, [r5, #0]
 8005db4:	1c85      	addeq	r5, r0, #2
 8005db6:	e7cd      	b.n	8005d54 <_strtol_l.constprop.0+0x38>
 8005db8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005dbc:	f1bc 0f19 	cmp.w	ip, #25
 8005dc0:	d801      	bhi.n	8005dc6 <_strtol_l.constprop.0+0xaa>
 8005dc2:	3c37      	subs	r4, #55	; 0x37
 8005dc4:	e7e4      	b.n	8005d90 <_strtol_l.constprop.0+0x74>
 8005dc6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005dca:	f1bc 0f19 	cmp.w	ip, #25
 8005dce:	d804      	bhi.n	8005dda <_strtol_l.constprop.0+0xbe>
 8005dd0:	3c57      	subs	r4, #87	; 0x57
 8005dd2:	e7dd      	b.n	8005d90 <_strtol_l.constprop.0+0x74>
 8005dd4:	f04f 37ff 	mov.w	r7, #4294967295
 8005dd8:	e7e6      	b.n	8005da8 <_strtol_l.constprop.0+0x8c>
 8005dda:	2f00      	cmp	r7, #0
 8005ddc:	da07      	bge.n	8005dee <_strtol_l.constprop.0+0xd2>
 8005dde:	2322      	movs	r3, #34	; 0x22
 8005de0:	4670      	mov	r0, lr
 8005de2:	f8c8 3000 	str.w	r3, [r8]
 8005de6:	2a00      	cmp	r2, #0
 8005de8:	d0a4      	beq.n	8005d34 <_strtol_l.constprop.0+0x18>
 8005dea:	1e69      	subs	r1, r5, #1
 8005dec:	e005      	b.n	8005dfa <_strtol_l.constprop.0+0xde>
 8005dee:	b106      	cbz	r6, 8005df2 <_strtol_l.constprop.0+0xd6>
 8005df0:	4240      	negs	r0, r0
 8005df2:	2a00      	cmp	r2, #0
 8005df4:	d09e      	beq.n	8005d34 <_strtol_l.constprop.0+0x18>
 8005df6:	2f00      	cmp	r7, #0
 8005df8:	d1f7      	bne.n	8005dea <_strtol_l.constprop.0+0xce>
 8005dfa:	6011      	str	r1, [r2, #0]
 8005dfc:	e79a      	b.n	8005d34 <_strtol_l.constprop.0+0x18>
 8005dfe:	2430      	movs	r4, #48	; 0x30
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1b5      	bne.n	8005d70 <_strtol_l.constprop.0+0x54>
 8005e04:	2308      	movs	r3, #8
 8005e06:	e7b3      	b.n	8005d70 <_strtol_l.constprop.0+0x54>
 8005e08:	2c30      	cmp	r4, #48	; 0x30
 8005e0a:	d0a9      	beq.n	8005d60 <_strtol_l.constprop.0+0x44>
 8005e0c:	230a      	movs	r3, #10
 8005e0e:	e7af      	b.n	8005d70 <_strtol_l.constprop.0+0x54>
 8005e10:	08009d99 	.word	0x08009d99

08005e14 <_strtol_r>:
 8005e14:	f7ff bf82 	b.w	8005d1c <_strtol_l.constprop.0>

08005e18 <quorem>:
 8005e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1c:	6903      	ldr	r3, [r0, #16]
 8005e1e:	690c      	ldr	r4, [r1, #16]
 8005e20:	4607      	mov	r7, r0
 8005e22:	42a3      	cmp	r3, r4
 8005e24:	f2c0 8082 	blt.w	8005f2c <quorem+0x114>
 8005e28:	3c01      	subs	r4, #1
 8005e2a:	f100 0514 	add.w	r5, r0, #20
 8005e2e:	f101 0814 	add.w	r8, r1, #20
 8005e32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e40:	3301      	adds	r3, #1
 8005e42:	429a      	cmp	r2, r3
 8005e44:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e50:	d331      	bcc.n	8005eb6 <quorem+0x9e>
 8005e52:	f04f 0e00 	mov.w	lr, #0
 8005e56:	4640      	mov	r0, r8
 8005e58:	46ac      	mov	ip, r5
 8005e5a:	46f2      	mov	sl, lr
 8005e5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e60:	b293      	uxth	r3, r2
 8005e62:	fb06 e303 	mla	r3, r6, r3, lr
 8005e66:	0c12      	lsrs	r2, r2, #16
 8005e68:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	fb06 e202 	mla	r2, r6, r2, lr
 8005e72:	ebaa 0303 	sub.w	r3, sl, r3
 8005e76:	f8dc a000 	ldr.w	sl, [ip]
 8005e7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e7e:	fa1f fa8a 	uxth.w	sl, sl
 8005e82:	4453      	add	r3, sl
 8005e84:	f8dc a000 	ldr.w	sl, [ip]
 8005e88:	b292      	uxth	r2, r2
 8005e8a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e98:	4581      	cmp	r9, r0
 8005e9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e9e:	f84c 3b04 	str.w	r3, [ip], #4
 8005ea2:	d2db      	bcs.n	8005e5c <quorem+0x44>
 8005ea4:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ea8:	b92b      	cbnz	r3, 8005eb6 <quorem+0x9e>
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	3b04      	subs	r3, #4
 8005eae:	429d      	cmp	r5, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	d32f      	bcc.n	8005f14 <quorem+0xfc>
 8005eb4:	613c      	str	r4, [r7, #16]
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	f001 fc90 	bl	80077dc <__mcmp>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	db25      	blt.n	8005f0c <quorem+0xf4>
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f04f 0c00 	mov.w	ip, #0
 8005ec6:	3601      	adds	r6, #1
 8005ec8:	f858 1b04 	ldr.w	r1, [r8], #4
 8005ecc:	f8d0 e000 	ldr.w	lr, [r0]
 8005ed0:	b28b      	uxth	r3, r1
 8005ed2:	ebac 0303 	sub.w	r3, ip, r3
 8005ed6:	fa1f f28e 	uxth.w	r2, lr
 8005eda:	4413      	add	r3, r2
 8005edc:	0c0a      	lsrs	r2, r1, #16
 8005ede:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ee2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eec:	45c1      	cmp	r9, r8
 8005eee:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ef2:	f840 3b04 	str.w	r3, [r0], #4
 8005ef6:	d2e7      	bcs.n	8005ec8 <quorem+0xb0>
 8005ef8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005efc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f00:	b922      	cbnz	r2, 8005f0c <quorem+0xf4>
 8005f02:	3b04      	subs	r3, #4
 8005f04:	429d      	cmp	r5, r3
 8005f06:	461a      	mov	r2, r3
 8005f08:	d30a      	bcc.n	8005f20 <quorem+0x108>
 8005f0a:	613c      	str	r4, [r7, #16]
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	b003      	add	sp, #12
 8005f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f14:	6812      	ldr	r2, [r2, #0]
 8005f16:	3b04      	subs	r3, #4
 8005f18:	2a00      	cmp	r2, #0
 8005f1a:	d1cb      	bne.n	8005eb4 <quorem+0x9c>
 8005f1c:	3c01      	subs	r4, #1
 8005f1e:	e7c6      	b.n	8005eae <quorem+0x96>
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	3b04      	subs	r3, #4
 8005f24:	2a00      	cmp	r2, #0
 8005f26:	d1f0      	bne.n	8005f0a <quorem+0xf2>
 8005f28:	3c01      	subs	r4, #1
 8005f2a:	e7eb      	b.n	8005f04 <quorem+0xec>
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	e7ee      	b.n	8005f0e <quorem+0xf6>

08005f30 <_dtoa_r>:
 8005f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f34:	4616      	mov	r6, r2
 8005f36:	461f      	mov	r7, r3
 8005f38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f3a:	b099      	sub	sp, #100	; 0x64
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005f42:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005f46:	b974      	cbnz	r4, 8005f66 <_dtoa_r+0x36>
 8005f48:	2010      	movs	r0, #16
 8005f4a:	f001 f949 	bl	80071e0 <malloc>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	6268      	str	r0, [r5, #36]	; 0x24
 8005f52:	b920      	cbnz	r0, 8005f5e <_dtoa_r+0x2e>
 8005f54:	21ea      	movs	r1, #234	; 0xea
 8005f56:	4ba8      	ldr	r3, [pc, #672]	; (80061f8 <_dtoa_r+0x2c8>)
 8005f58:	48a8      	ldr	r0, [pc, #672]	; (80061fc <_dtoa_r+0x2cc>)
 8005f5a:	f002 f8b3 	bl	80080c4 <__assert_func>
 8005f5e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f62:	6004      	str	r4, [r0, #0]
 8005f64:	60c4      	str	r4, [r0, #12]
 8005f66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f68:	6819      	ldr	r1, [r3, #0]
 8005f6a:	b151      	cbz	r1, 8005f82 <_dtoa_r+0x52>
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4093      	lsls	r3, r2
 8005f72:	604a      	str	r2, [r1, #4]
 8005f74:	608b      	str	r3, [r1, #8]
 8005f76:	4628      	mov	r0, r5
 8005f78:	f001 f9a8 	bl	80072cc <_Bfree>
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	1e3b      	subs	r3, r7, #0
 8005f84:	bfaf      	iteee	ge
 8005f86:	2300      	movge	r3, #0
 8005f88:	2201      	movlt	r2, #1
 8005f8a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f8e:	9305      	strlt	r3, [sp, #20]
 8005f90:	bfa8      	it	ge
 8005f92:	f8c8 3000 	strge.w	r3, [r8]
 8005f96:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005f9a:	4b99      	ldr	r3, [pc, #612]	; (8006200 <_dtoa_r+0x2d0>)
 8005f9c:	bfb8      	it	lt
 8005f9e:	f8c8 2000 	strlt.w	r2, [r8]
 8005fa2:	ea33 0309 	bics.w	r3, r3, r9
 8005fa6:	d119      	bne.n	8005fdc <_dtoa_r+0xac>
 8005fa8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005fac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005fb4:	4333      	orrs	r3, r6
 8005fb6:	f000 857f 	beq.w	8006ab8 <_dtoa_r+0xb88>
 8005fba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fbc:	b953      	cbnz	r3, 8005fd4 <_dtoa_r+0xa4>
 8005fbe:	4b91      	ldr	r3, [pc, #580]	; (8006204 <_dtoa_r+0x2d4>)
 8005fc0:	e022      	b.n	8006008 <_dtoa_r+0xd8>
 8005fc2:	4b91      	ldr	r3, [pc, #580]	; (8006208 <_dtoa_r+0x2d8>)
 8005fc4:	9303      	str	r3, [sp, #12]
 8005fc6:	3308      	adds	r3, #8
 8005fc8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	9803      	ldr	r0, [sp, #12]
 8005fce:	b019      	add	sp, #100	; 0x64
 8005fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd4:	4b8b      	ldr	r3, [pc, #556]	; (8006204 <_dtoa_r+0x2d4>)
 8005fd6:	9303      	str	r3, [sp, #12]
 8005fd8:	3303      	adds	r3, #3
 8005fda:	e7f5      	b.n	8005fc8 <_dtoa_r+0x98>
 8005fdc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005fe0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005fe4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2300      	movs	r3, #0
 8005fec:	f7fa fd48 	bl	8000a80 <__aeabi_dcmpeq>
 8005ff0:	4680      	mov	r8, r0
 8005ff2:	b158      	cbz	r0, 800600c <_dtoa_r+0xdc>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8558 	beq.w	8006ab2 <_dtoa_r+0xb82>
 8006002:	4882      	ldr	r0, [pc, #520]	; (800620c <_dtoa_r+0x2dc>)
 8006004:	6018      	str	r0, [r3, #0]
 8006006:	1e43      	subs	r3, r0, #1
 8006008:	9303      	str	r3, [sp, #12]
 800600a:	e7df      	b.n	8005fcc <_dtoa_r+0x9c>
 800600c:	ab16      	add	r3, sp, #88	; 0x58
 800600e:	9301      	str	r3, [sp, #4]
 8006010:	ab17      	add	r3, sp, #92	; 0x5c
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	4628      	mov	r0, r5
 8006016:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800601a:	f001 fd01 	bl	8007a20 <__d2b>
 800601e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006022:	4683      	mov	fp, r0
 8006024:	2c00      	cmp	r4, #0
 8006026:	d07f      	beq.n	8006128 <_dtoa_r+0x1f8>
 8006028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800602c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800602e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006032:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006036:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800603a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800603e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006042:	2200      	movs	r2, #0
 8006044:	4b72      	ldr	r3, [pc, #456]	; (8006210 <_dtoa_r+0x2e0>)
 8006046:	f7fa f8fb 	bl	8000240 <__aeabi_dsub>
 800604a:	a365      	add	r3, pc, #404	; (adr r3, 80061e0 <_dtoa_r+0x2b0>)
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f7fa faae 	bl	80005b0 <__aeabi_dmul>
 8006054:	a364      	add	r3, pc, #400	; (adr r3, 80061e8 <_dtoa_r+0x2b8>)
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f7fa f8f3 	bl	8000244 <__adddf3>
 800605e:	4606      	mov	r6, r0
 8006060:	4620      	mov	r0, r4
 8006062:	460f      	mov	r7, r1
 8006064:	f7fa fa3a 	bl	80004dc <__aeabi_i2d>
 8006068:	a361      	add	r3, pc, #388	; (adr r3, 80061f0 <_dtoa_r+0x2c0>)
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	f7fa fa9f 	bl	80005b0 <__aeabi_dmul>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4630      	mov	r0, r6
 8006078:	4639      	mov	r1, r7
 800607a:	f7fa f8e3 	bl	8000244 <__adddf3>
 800607e:	4606      	mov	r6, r0
 8006080:	460f      	mov	r7, r1
 8006082:	f7fa fd45 	bl	8000b10 <__aeabi_d2iz>
 8006086:	2200      	movs	r2, #0
 8006088:	4682      	mov	sl, r0
 800608a:	2300      	movs	r3, #0
 800608c:	4630      	mov	r0, r6
 800608e:	4639      	mov	r1, r7
 8006090:	f7fa fd00 	bl	8000a94 <__aeabi_dcmplt>
 8006094:	b148      	cbz	r0, 80060aa <_dtoa_r+0x17a>
 8006096:	4650      	mov	r0, sl
 8006098:	f7fa fa20 	bl	80004dc <__aeabi_i2d>
 800609c:	4632      	mov	r2, r6
 800609e:	463b      	mov	r3, r7
 80060a0:	f7fa fcee 	bl	8000a80 <__aeabi_dcmpeq>
 80060a4:	b908      	cbnz	r0, 80060aa <_dtoa_r+0x17a>
 80060a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060aa:	f1ba 0f16 	cmp.w	sl, #22
 80060ae:	d858      	bhi.n	8006162 <_dtoa_r+0x232>
 80060b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060b4:	4b57      	ldr	r3, [pc, #348]	; (8006214 <_dtoa_r+0x2e4>)
 80060b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	f7fa fce9 	bl	8000a94 <__aeabi_dcmplt>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d04f      	beq.n	8006166 <_dtoa_r+0x236>
 80060c6:	2300      	movs	r3, #0
 80060c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80060ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80060d0:	1b1c      	subs	r4, r3, r4
 80060d2:	1e63      	subs	r3, r4, #1
 80060d4:	9309      	str	r3, [sp, #36]	; 0x24
 80060d6:	bf49      	itett	mi
 80060d8:	f1c4 0301 	rsbmi	r3, r4, #1
 80060dc:	2300      	movpl	r3, #0
 80060de:	9306      	strmi	r3, [sp, #24]
 80060e0:	2300      	movmi	r3, #0
 80060e2:	bf54      	ite	pl
 80060e4:	9306      	strpl	r3, [sp, #24]
 80060e6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80060e8:	f1ba 0f00 	cmp.w	sl, #0
 80060ec:	db3d      	blt.n	800616a <_dtoa_r+0x23a>
 80060ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80060f4:	4453      	add	r3, sl
 80060f6:	9309      	str	r3, [sp, #36]	; 0x24
 80060f8:	2300      	movs	r3, #0
 80060fa:	930a      	str	r3, [sp, #40]	; 0x28
 80060fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060fe:	2b09      	cmp	r3, #9
 8006100:	f200 808c 	bhi.w	800621c <_dtoa_r+0x2ec>
 8006104:	2b05      	cmp	r3, #5
 8006106:	bfc4      	itt	gt
 8006108:	3b04      	subgt	r3, #4
 800610a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800610c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800610e:	bfc8      	it	gt
 8006110:	2400      	movgt	r4, #0
 8006112:	f1a3 0302 	sub.w	r3, r3, #2
 8006116:	bfd8      	it	le
 8006118:	2401      	movle	r4, #1
 800611a:	2b03      	cmp	r3, #3
 800611c:	f200 808a 	bhi.w	8006234 <_dtoa_r+0x304>
 8006120:	e8df f003 	tbb	[pc, r3]
 8006124:	5b4d4f2d 	.word	0x5b4d4f2d
 8006128:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800612c:	441c      	add	r4, r3
 800612e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006132:	2b20      	cmp	r3, #32
 8006134:	bfc3      	ittte	gt
 8006136:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800613a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800613e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006142:	f1c3 0320 	rsble	r3, r3, #32
 8006146:	bfc6      	itte	gt
 8006148:	fa26 f000 	lsrgt.w	r0, r6, r0
 800614c:	4318      	orrgt	r0, r3
 800614e:	fa06 f003 	lslle.w	r0, r6, r3
 8006152:	f7fa f9b3 	bl	80004bc <__aeabi_ui2d>
 8006156:	2301      	movs	r3, #1
 8006158:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800615c:	3c01      	subs	r4, #1
 800615e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006160:	e76f      	b.n	8006042 <_dtoa_r+0x112>
 8006162:	2301      	movs	r3, #1
 8006164:	e7b2      	b.n	80060cc <_dtoa_r+0x19c>
 8006166:	900f      	str	r0, [sp, #60]	; 0x3c
 8006168:	e7b1      	b.n	80060ce <_dtoa_r+0x19e>
 800616a:	9b06      	ldr	r3, [sp, #24]
 800616c:	eba3 030a 	sub.w	r3, r3, sl
 8006170:	9306      	str	r3, [sp, #24]
 8006172:	f1ca 0300 	rsb	r3, sl, #0
 8006176:	930a      	str	r3, [sp, #40]	; 0x28
 8006178:	2300      	movs	r3, #0
 800617a:	930e      	str	r3, [sp, #56]	; 0x38
 800617c:	e7be      	b.n	80060fc <_dtoa_r+0x1cc>
 800617e:	2300      	movs	r3, #0
 8006180:	930b      	str	r3, [sp, #44]	; 0x2c
 8006182:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006184:	2b00      	cmp	r3, #0
 8006186:	dc58      	bgt.n	800623a <_dtoa_r+0x30a>
 8006188:	f04f 0901 	mov.w	r9, #1
 800618c:	464b      	mov	r3, r9
 800618e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006192:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006196:	2200      	movs	r2, #0
 8006198:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800619a:	6042      	str	r2, [r0, #4]
 800619c:	2204      	movs	r2, #4
 800619e:	f102 0614 	add.w	r6, r2, #20
 80061a2:	429e      	cmp	r6, r3
 80061a4:	6841      	ldr	r1, [r0, #4]
 80061a6:	d94e      	bls.n	8006246 <_dtoa_r+0x316>
 80061a8:	4628      	mov	r0, r5
 80061aa:	f001 f84f 	bl	800724c <_Balloc>
 80061ae:	9003      	str	r0, [sp, #12]
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d14c      	bne.n	800624e <_dtoa_r+0x31e>
 80061b4:	4602      	mov	r2, r0
 80061b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061ba:	4b17      	ldr	r3, [pc, #92]	; (8006218 <_dtoa_r+0x2e8>)
 80061bc:	e6cc      	b.n	8005f58 <_dtoa_r+0x28>
 80061be:	2301      	movs	r3, #1
 80061c0:	e7de      	b.n	8006180 <_dtoa_r+0x250>
 80061c2:	2300      	movs	r3, #0
 80061c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80061c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061c8:	eb0a 0903 	add.w	r9, sl, r3
 80061cc:	f109 0301 	add.w	r3, r9, #1
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	9308      	str	r3, [sp, #32]
 80061d4:	bfb8      	it	lt
 80061d6:	2301      	movlt	r3, #1
 80061d8:	e7dd      	b.n	8006196 <_dtoa_r+0x266>
 80061da:	2301      	movs	r3, #1
 80061dc:	e7f2      	b.n	80061c4 <_dtoa_r+0x294>
 80061de:	bf00      	nop
 80061e0:	636f4361 	.word	0x636f4361
 80061e4:	3fd287a7 	.word	0x3fd287a7
 80061e8:	8b60c8b3 	.word	0x8b60c8b3
 80061ec:	3fc68a28 	.word	0x3fc68a28
 80061f0:	509f79fb 	.word	0x509f79fb
 80061f4:	3fd34413 	.word	0x3fd34413
 80061f8:	08009ea6 	.word	0x08009ea6
 80061fc:	08009ebd 	.word	0x08009ebd
 8006200:	7ff00000 	.word	0x7ff00000
 8006204:	08009ea2 	.word	0x08009ea2
 8006208:	08009e99 	.word	0x08009e99
 800620c:	08009d1d 	.word	0x08009d1d
 8006210:	3ff80000 	.word	0x3ff80000
 8006214:	0800a028 	.word	0x0800a028
 8006218:	08009f18 	.word	0x08009f18
 800621c:	2401      	movs	r4, #1
 800621e:	2300      	movs	r3, #0
 8006220:	940b      	str	r4, [sp, #44]	; 0x2c
 8006222:	9322      	str	r3, [sp, #136]	; 0x88
 8006224:	f04f 39ff 	mov.w	r9, #4294967295
 8006228:	2200      	movs	r2, #0
 800622a:	2312      	movs	r3, #18
 800622c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006230:	9223      	str	r2, [sp, #140]	; 0x8c
 8006232:	e7b0      	b.n	8006196 <_dtoa_r+0x266>
 8006234:	2301      	movs	r3, #1
 8006236:	930b      	str	r3, [sp, #44]	; 0x2c
 8006238:	e7f4      	b.n	8006224 <_dtoa_r+0x2f4>
 800623a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800623e:	464b      	mov	r3, r9
 8006240:	f8cd 9020 	str.w	r9, [sp, #32]
 8006244:	e7a7      	b.n	8006196 <_dtoa_r+0x266>
 8006246:	3101      	adds	r1, #1
 8006248:	6041      	str	r1, [r0, #4]
 800624a:	0052      	lsls	r2, r2, #1
 800624c:	e7a7      	b.n	800619e <_dtoa_r+0x26e>
 800624e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006250:	9a03      	ldr	r2, [sp, #12]
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	9b08      	ldr	r3, [sp, #32]
 8006256:	2b0e      	cmp	r3, #14
 8006258:	f200 80a8 	bhi.w	80063ac <_dtoa_r+0x47c>
 800625c:	2c00      	cmp	r4, #0
 800625e:	f000 80a5 	beq.w	80063ac <_dtoa_r+0x47c>
 8006262:	f1ba 0f00 	cmp.w	sl, #0
 8006266:	dd34      	ble.n	80062d2 <_dtoa_r+0x3a2>
 8006268:	4a9a      	ldr	r2, [pc, #616]	; (80064d4 <_dtoa_r+0x5a4>)
 800626a:	f00a 030f 	and.w	r3, sl, #15
 800626e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006272:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006276:	e9d3 3400 	ldrd	r3, r4, [r3]
 800627a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800627e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006282:	d016      	beq.n	80062b2 <_dtoa_r+0x382>
 8006284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006288:	4b93      	ldr	r3, [pc, #588]	; (80064d8 <_dtoa_r+0x5a8>)
 800628a:	2703      	movs	r7, #3
 800628c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006290:	f7fa fab8 	bl	8000804 <__aeabi_ddiv>
 8006294:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006298:	f004 040f 	and.w	r4, r4, #15
 800629c:	4e8e      	ldr	r6, [pc, #568]	; (80064d8 <_dtoa_r+0x5a8>)
 800629e:	b954      	cbnz	r4, 80062b6 <_dtoa_r+0x386>
 80062a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062a8:	f7fa faac 	bl	8000804 <__aeabi_ddiv>
 80062ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062b0:	e029      	b.n	8006306 <_dtoa_r+0x3d6>
 80062b2:	2702      	movs	r7, #2
 80062b4:	e7f2      	b.n	800629c <_dtoa_r+0x36c>
 80062b6:	07e1      	lsls	r1, r4, #31
 80062b8:	d508      	bpl.n	80062cc <_dtoa_r+0x39c>
 80062ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062c2:	f7fa f975 	bl	80005b0 <__aeabi_dmul>
 80062c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062ca:	3701      	adds	r7, #1
 80062cc:	1064      	asrs	r4, r4, #1
 80062ce:	3608      	adds	r6, #8
 80062d0:	e7e5      	b.n	800629e <_dtoa_r+0x36e>
 80062d2:	f000 80a5 	beq.w	8006420 <_dtoa_r+0x4f0>
 80062d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062da:	f1ca 0400 	rsb	r4, sl, #0
 80062de:	4b7d      	ldr	r3, [pc, #500]	; (80064d4 <_dtoa_r+0x5a4>)
 80062e0:	f004 020f 	and.w	r2, r4, #15
 80062e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	f7fa f960 	bl	80005b0 <__aeabi_dmul>
 80062f0:	2702      	movs	r7, #2
 80062f2:	2300      	movs	r3, #0
 80062f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062f8:	4e77      	ldr	r6, [pc, #476]	; (80064d8 <_dtoa_r+0x5a8>)
 80062fa:	1124      	asrs	r4, r4, #4
 80062fc:	2c00      	cmp	r4, #0
 80062fe:	f040 8084 	bne.w	800640a <_dtoa_r+0x4da>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1d2      	bne.n	80062ac <_dtoa_r+0x37c>
 8006306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 808b 	beq.w	8006424 <_dtoa_r+0x4f4>
 800630e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006312:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006316:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800631a:	2200      	movs	r2, #0
 800631c:	4b6f      	ldr	r3, [pc, #444]	; (80064dc <_dtoa_r+0x5ac>)
 800631e:	f7fa fbb9 	bl	8000a94 <__aeabi_dcmplt>
 8006322:	2800      	cmp	r0, #0
 8006324:	d07e      	beq.n	8006424 <_dtoa_r+0x4f4>
 8006326:	9b08      	ldr	r3, [sp, #32]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d07b      	beq.n	8006424 <_dtoa_r+0x4f4>
 800632c:	f1b9 0f00 	cmp.w	r9, #0
 8006330:	dd38      	ble.n	80063a4 <_dtoa_r+0x474>
 8006332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006336:	2200      	movs	r2, #0
 8006338:	4b69      	ldr	r3, [pc, #420]	; (80064e0 <_dtoa_r+0x5b0>)
 800633a:	f7fa f939 	bl	80005b0 <__aeabi_dmul>
 800633e:	464c      	mov	r4, r9
 8006340:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006344:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006348:	3701      	adds	r7, #1
 800634a:	4638      	mov	r0, r7
 800634c:	f7fa f8c6 	bl	80004dc <__aeabi_i2d>
 8006350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006354:	f7fa f92c 	bl	80005b0 <__aeabi_dmul>
 8006358:	2200      	movs	r2, #0
 800635a:	4b62      	ldr	r3, [pc, #392]	; (80064e4 <_dtoa_r+0x5b4>)
 800635c:	f7f9 ff72 	bl	8000244 <__adddf3>
 8006360:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006364:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006368:	9611      	str	r6, [sp, #68]	; 0x44
 800636a:	2c00      	cmp	r4, #0
 800636c:	d15d      	bne.n	800642a <_dtoa_r+0x4fa>
 800636e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006372:	2200      	movs	r2, #0
 8006374:	4b5c      	ldr	r3, [pc, #368]	; (80064e8 <_dtoa_r+0x5b8>)
 8006376:	f7f9 ff63 	bl	8000240 <__aeabi_dsub>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006382:	4633      	mov	r3, r6
 8006384:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006386:	f7fa fba3 	bl	8000ad0 <__aeabi_dcmpgt>
 800638a:	2800      	cmp	r0, #0
 800638c:	f040 829c 	bne.w	80068c8 <_dtoa_r+0x998>
 8006390:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006394:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006396:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800639a:	f7fa fb7b 	bl	8000a94 <__aeabi_dcmplt>
 800639e:	2800      	cmp	r0, #0
 80063a0:	f040 8290 	bne.w	80068c4 <_dtoa_r+0x994>
 80063a4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80063a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80063ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f2c0 8152 	blt.w	8006658 <_dtoa_r+0x728>
 80063b4:	f1ba 0f0e 	cmp.w	sl, #14
 80063b8:	f300 814e 	bgt.w	8006658 <_dtoa_r+0x728>
 80063bc:	4b45      	ldr	r3, [pc, #276]	; (80064d4 <_dtoa_r+0x5a4>)
 80063be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063c6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80063ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f280 80db 	bge.w	8006588 <_dtoa_r+0x658>
 80063d2:	9b08      	ldr	r3, [sp, #32]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f300 80d7 	bgt.w	8006588 <_dtoa_r+0x658>
 80063da:	f040 8272 	bne.w	80068c2 <_dtoa_r+0x992>
 80063de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063e2:	2200      	movs	r2, #0
 80063e4:	4b40      	ldr	r3, [pc, #256]	; (80064e8 <_dtoa_r+0x5b8>)
 80063e6:	f7fa f8e3 	bl	80005b0 <__aeabi_dmul>
 80063ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ee:	f7fa fb65 	bl	8000abc <__aeabi_dcmpge>
 80063f2:	9c08      	ldr	r4, [sp, #32]
 80063f4:	4626      	mov	r6, r4
 80063f6:	2800      	cmp	r0, #0
 80063f8:	f040 8248 	bne.w	800688c <_dtoa_r+0x95c>
 80063fc:	2331      	movs	r3, #49	; 0x31
 80063fe:	9f03      	ldr	r7, [sp, #12]
 8006400:	f10a 0a01 	add.w	sl, sl, #1
 8006404:	f807 3b01 	strb.w	r3, [r7], #1
 8006408:	e244      	b.n	8006894 <_dtoa_r+0x964>
 800640a:	07e2      	lsls	r2, r4, #31
 800640c:	d505      	bpl.n	800641a <_dtoa_r+0x4ea>
 800640e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006412:	f7fa f8cd 	bl	80005b0 <__aeabi_dmul>
 8006416:	2301      	movs	r3, #1
 8006418:	3701      	adds	r7, #1
 800641a:	1064      	asrs	r4, r4, #1
 800641c:	3608      	adds	r6, #8
 800641e:	e76d      	b.n	80062fc <_dtoa_r+0x3cc>
 8006420:	2702      	movs	r7, #2
 8006422:	e770      	b.n	8006306 <_dtoa_r+0x3d6>
 8006424:	46d0      	mov	r8, sl
 8006426:	9c08      	ldr	r4, [sp, #32]
 8006428:	e78f      	b.n	800634a <_dtoa_r+0x41a>
 800642a:	9903      	ldr	r1, [sp, #12]
 800642c:	4b29      	ldr	r3, [pc, #164]	; (80064d4 <_dtoa_r+0x5a4>)
 800642e:	4421      	add	r1, r4
 8006430:	9112      	str	r1, [sp, #72]	; 0x48
 8006432:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006434:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006438:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800643c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006440:	2900      	cmp	r1, #0
 8006442:	d055      	beq.n	80064f0 <_dtoa_r+0x5c0>
 8006444:	2000      	movs	r0, #0
 8006446:	4929      	ldr	r1, [pc, #164]	; (80064ec <_dtoa_r+0x5bc>)
 8006448:	f7fa f9dc 	bl	8000804 <__aeabi_ddiv>
 800644c:	463b      	mov	r3, r7
 800644e:	4632      	mov	r2, r6
 8006450:	f7f9 fef6 	bl	8000240 <__aeabi_dsub>
 8006454:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006458:	9f03      	ldr	r7, [sp, #12]
 800645a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800645e:	f7fa fb57 	bl	8000b10 <__aeabi_d2iz>
 8006462:	4604      	mov	r4, r0
 8006464:	f7fa f83a 	bl	80004dc <__aeabi_i2d>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006470:	f7f9 fee6 	bl	8000240 <__aeabi_dsub>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	3430      	adds	r4, #48	; 0x30
 800647a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800647e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006482:	f807 4b01 	strb.w	r4, [r7], #1
 8006486:	f7fa fb05 	bl	8000a94 <__aeabi_dcmplt>
 800648a:	2800      	cmp	r0, #0
 800648c:	d174      	bne.n	8006578 <_dtoa_r+0x648>
 800648e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006492:	2000      	movs	r0, #0
 8006494:	4911      	ldr	r1, [pc, #68]	; (80064dc <_dtoa_r+0x5ac>)
 8006496:	f7f9 fed3 	bl	8000240 <__aeabi_dsub>
 800649a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800649e:	f7fa faf9 	bl	8000a94 <__aeabi_dcmplt>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	f040 80b7 	bne.w	8006616 <_dtoa_r+0x6e6>
 80064a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064aa:	429f      	cmp	r7, r3
 80064ac:	f43f af7a 	beq.w	80063a4 <_dtoa_r+0x474>
 80064b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064b4:	2200      	movs	r2, #0
 80064b6:	4b0a      	ldr	r3, [pc, #40]	; (80064e0 <_dtoa_r+0x5b0>)
 80064b8:	f7fa f87a 	bl	80005b0 <__aeabi_dmul>
 80064bc:	2200      	movs	r2, #0
 80064be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064c6:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <_dtoa_r+0x5b0>)
 80064c8:	f7fa f872 	bl	80005b0 <__aeabi_dmul>
 80064cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064d0:	e7c3      	b.n	800645a <_dtoa_r+0x52a>
 80064d2:	bf00      	nop
 80064d4:	0800a028 	.word	0x0800a028
 80064d8:	0800a000 	.word	0x0800a000
 80064dc:	3ff00000 	.word	0x3ff00000
 80064e0:	40240000 	.word	0x40240000
 80064e4:	401c0000 	.word	0x401c0000
 80064e8:	40140000 	.word	0x40140000
 80064ec:	3fe00000 	.word	0x3fe00000
 80064f0:	4630      	mov	r0, r6
 80064f2:	4639      	mov	r1, r7
 80064f4:	f7fa f85c 	bl	80005b0 <__aeabi_dmul>
 80064f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064fe:	9c03      	ldr	r4, [sp, #12]
 8006500:	9314      	str	r3, [sp, #80]	; 0x50
 8006502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006506:	f7fa fb03 	bl	8000b10 <__aeabi_d2iz>
 800650a:	9015      	str	r0, [sp, #84]	; 0x54
 800650c:	f7f9 ffe6 	bl	80004dc <__aeabi_i2d>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006518:	f7f9 fe92 	bl	8000240 <__aeabi_dsub>
 800651c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800651e:	4606      	mov	r6, r0
 8006520:	3330      	adds	r3, #48	; 0x30
 8006522:	f804 3b01 	strb.w	r3, [r4], #1
 8006526:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006528:	460f      	mov	r7, r1
 800652a:	429c      	cmp	r4, r3
 800652c:	f04f 0200 	mov.w	r2, #0
 8006530:	d124      	bne.n	800657c <_dtoa_r+0x64c>
 8006532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006536:	4bb0      	ldr	r3, [pc, #704]	; (80067f8 <_dtoa_r+0x8c8>)
 8006538:	f7f9 fe84 	bl	8000244 <__adddf3>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4630      	mov	r0, r6
 8006542:	4639      	mov	r1, r7
 8006544:	f7fa fac4 	bl	8000ad0 <__aeabi_dcmpgt>
 8006548:	2800      	cmp	r0, #0
 800654a:	d163      	bne.n	8006614 <_dtoa_r+0x6e4>
 800654c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006550:	2000      	movs	r0, #0
 8006552:	49a9      	ldr	r1, [pc, #676]	; (80067f8 <_dtoa_r+0x8c8>)
 8006554:	f7f9 fe74 	bl	8000240 <__aeabi_dsub>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4630      	mov	r0, r6
 800655e:	4639      	mov	r1, r7
 8006560:	f7fa fa98 	bl	8000a94 <__aeabi_dcmplt>
 8006564:	2800      	cmp	r0, #0
 8006566:	f43f af1d 	beq.w	80063a4 <_dtoa_r+0x474>
 800656a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800656c:	1e7b      	subs	r3, r7, #1
 800656e:	9314      	str	r3, [sp, #80]	; 0x50
 8006570:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006574:	2b30      	cmp	r3, #48	; 0x30
 8006576:	d0f8      	beq.n	800656a <_dtoa_r+0x63a>
 8006578:	46c2      	mov	sl, r8
 800657a:	e03b      	b.n	80065f4 <_dtoa_r+0x6c4>
 800657c:	4b9f      	ldr	r3, [pc, #636]	; (80067fc <_dtoa_r+0x8cc>)
 800657e:	f7fa f817 	bl	80005b0 <__aeabi_dmul>
 8006582:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006586:	e7bc      	b.n	8006502 <_dtoa_r+0x5d2>
 8006588:	9f03      	ldr	r7, [sp, #12]
 800658a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800658e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006592:	4640      	mov	r0, r8
 8006594:	4649      	mov	r1, r9
 8006596:	f7fa f935 	bl	8000804 <__aeabi_ddiv>
 800659a:	f7fa fab9 	bl	8000b10 <__aeabi_d2iz>
 800659e:	4604      	mov	r4, r0
 80065a0:	f7f9 ff9c 	bl	80004dc <__aeabi_i2d>
 80065a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065a8:	f7fa f802 	bl	80005b0 <__aeabi_dmul>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4640      	mov	r0, r8
 80065b2:	4649      	mov	r1, r9
 80065b4:	f7f9 fe44 	bl	8000240 <__aeabi_dsub>
 80065b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80065bc:	f807 6b01 	strb.w	r6, [r7], #1
 80065c0:	9e03      	ldr	r6, [sp, #12]
 80065c2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80065c6:	1bbe      	subs	r6, r7, r6
 80065c8:	45b4      	cmp	ip, r6
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	d136      	bne.n	800663e <_dtoa_r+0x70e>
 80065d0:	f7f9 fe38 	bl	8000244 <__adddf3>
 80065d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065d8:	4680      	mov	r8, r0
 80065da:	4689      	mov	r9, r1
 80065dc:	f7fa fa78 	bl	8000ad0 <__aeabi_dcmpgt>
 80065e0:	bb58      	cbnz	r0, 800663a <_dtoa_r+0x70a>
 80065e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065e6:	4640      	mov	r0, r8
 80065e8:	4649      	mov	r1, r9
 80065ea:	f7fa fa49 	bl	8000a80 <__aeabi_dcmpeq>
 80065ee:	b108      	cbz	r0, 80065f4 <_dtoa_r+0x6c4>
 80065f0:	07e1      	lsls	r1, r4, #31
 80065f2:	d422      	bmi.n	800663a <_dtoa_r+0x70a>
 80065f4:	4628      	mov	r0, r5
 80065f6:	4659      	mov	r1, fp
 80065f8:	f000 fe68 	bl	80072cc <_Bfree>
 80065fc:	2300      	movs	r3, #0
 80065fe:	703b      	strb	r3, [r7, #0]
 8006600:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006602:	f10a 0001 	add.w	r0, sl, #1
 8006606:	6018      	str	r0, [r3, #0]
 8006608:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800660a:	2b00      	cmp	r3, #0
 800660c:	f43f acde 	beq.w	8005fcc <_dtoa_r+0x9c>
 8006610:	601f      	str	r7, [r3, #0]
 8006612:	e4db      	b.n	8005fcc <_dtoa_r+0x9c>
 8006614:	4627      	mov	r7, r4
 8006616:	463b      	mov	r3, r7
 8006618:	461f      	mov	r7, r3
 800661a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800661e:	2a39      	cmp	r2, #57	; 0x39
 8006620:	d107      	bne.n	8006632 <_dtoa_r+0x702>
 8006622:	9a03      	ldr	r2, [sp, #12]
 8006624:	429a      	cmp	r2, r3
 8006626:	d1f7      	bne.n	8006618 <_dtoa_r+0x6e8>
 8006628:	2230      	movs	r2, #48	; 0x30
 800662a:	9903      	ldr	r1, [sp, #12]
 800662c:	f108 0801 	add.w	r8, r8, #1
 8006630:	700a      	strb	r2, [r1, #0]
 8006632:	781a      	ldrb	r2, [r3, #0]
 8006634:	3201      	adds	r2, #1
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	e79e      	b.n	8006578 <_dtoa_r+0x648>
 800663a:	46d0      	mov	r8, sl
 800663c:	e7eb      	b.n	8006616 <_dtoa_r+0x6e6>
 800663e:	2200      	movs	r2, #0
 8006640:	4b6e      	ldr	r3, [pc, #440]	; (80067fc <_dtoa_r+0x8cc>)
 8006642:	f7f9 ffb5 	bl	80005b0 <__aeabi_dmul>
 8006646:	2200      	movs	r2, #0
 8006648:	2300      	movs	r3, #0
 800664a:	4680      	mov	r8, r0
 800664c:	4689      	mov	r9, r1
 800664e:	f7fa fa17 	bl	8000a80 <__aeabi_dcmpeq>
 8006652:	2800      	cmp	r0, #0
 8006654:	d09b      	beq.n	800658e <_dtoa_r+0x65e>
 8006656:	e7cd      	b.n	80065f4 <_dtoa_r+0x6c4>
 8006658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800665a:	2a00      	cmp	r2, #0
 800665c:	f000 80d0 	beq.w	8006800 <_dtoa_r+0x8d0>
 8006660:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006662:	2a01      	cmp	r2, #1
 8006664:	f300 80ae 	bgt.w	80067c4 <_dtoa_r+0x894>
 8006668:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800666a:	2a00      	cmp	r2, #0
 800666c:	f000 80a6 	beq.w	80067bc <_dtoa_r+0x88c>
 8006670:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006674:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006676:	9f06      	ldr	r7, [sp, #24]
 8006678:	9a06      	ldr	r2, [sp, #24]
 800667a:	2101      	movs	r1, #1
 800667c:	441a      	add	r2, r3
 800667e:	9206      	str	r2, [sp, #24]
 8006680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006682:	4628      	mov	r0, r5
 8006684:	441a      	add	r2, r3
 8006686:	9209      	str	r2, [sp, #36]	; 0x24
 8006688:	f000 ff20 	bl	80074cc <__i2b>
 800668c:	4606      	mov	r6, r0
 800668e:	2f00      	cmp	r7, #0
 8006690:	dd0c      	ble.n	80066ac <_dtoa_r+0x77c>
 8006692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006694:	2b00      	cmp	r3, #0
 8006696:	dd09      	ble.n	80066ac <_dtoa_r+0x77c>
 8006698:	42bb      	cmp	r3, r7
 800669a:	bfa8      	it	ge
 800669c:	463b      	movge	r3, r7
 800669e:	9a06      	ldr	r2, [sp, #24]
 80066a0:	1aff      	subs	r7, r7, r3
 80066a2:	1ad2      	subs	r2, r2, r3
 80066a4:	9206      	str	r2, [sp, #24]
 80066a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	9309      	str	r3, [sp, #36]	; 0x24
 80066ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ae:	b1f3      	cbz	r3, 80066ee <_dtoa_r+0x7be>
 80066b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 80a8 	beq.w	8006808 <_dtoa_r+0x8d8>
 80066b8:	2c00      	cmp	r4, #0
 80066ba:	dd10      	ble.n	80066de <_dtoa_r+0x7ae>
 80066bc:	4631      	mov	r1, r6
 80066be:	4622      	mov	r2, r4
 80066c0:	4628      	mov	r0, r5
 80066c2:	f000 ffc1 	bl	8007648 <__pow5mult>
 80066c6:	465a      	mov	r2, fp
 80066c8:	4601      	mov	r1, r0
 80066ca:	4606      	mov	r6, r0
 80066cc:	4628      	mov	r0, r5
 80066ce:	f000 ff13 	bl	80074f8 <__multiply>
 80066d2:	4680      	mov	r8, r0
 80066d4:	4659      	mov	r1, fp
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 fdf8 	bl	80072cc <_Bfree>
 80066dc:	46c3      	mov	fp, r8
 80066de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e0:	1b1a      	subs	r2, r3, r4
 80066e2:	d004      	beq.n	80066ee <_dtoa_r+0x7be>
 80066e4:	4659      	mov	r1, fp
 80066e6:	4628      	mov	r0, r5
 80066e8:	f000 ffae 	bl	8007648 <__pow5mult>
 80066ec:	4683      	mov	fp, r0
 80066ee:	2101      	movs	r1, #1
 80066f0:	4628      	mov	r0, r5
 80066f2:	f000 feeb 	bl	80074cc <__i2b>
 80066f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066f8:	4604      	mov	r4, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f340 8086 	ble.w	800680c <_dtoa_r+0x8dc>
 8006700:	461a      	mov	r2, r3
 8006702:	4601      	mov	r1, r0
 8006704:	4628      	mov	r0, r5
 8006706:	f000 ff9f 	bl	8007648 <__pow5mult>
 800670a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800670c:	4604      	mov	r4, r0
 800670e:	2b01      	cmp	r3, #1
 8006710:	dd7f      	ble.n	8006812 <_dtoa_r+0x8e2>
 8006712:	f04f 0800 	mov.w	r8, #0
 8006716:	6923      	ldr	r3, [r4, #16]
 8006718:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800671c:	6918      	ldr	r0, [r3, #16]
 800671e:	f000 fe87 	bl	8007430 <__hi0bits>
 8006722:	f1c0 0020 	rsb	r0, r0, #32
 8006726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006728:	4418      	add	r0, r3
 800672a:	f010 001f 	ands.w	r0, r0, #31
 800672e:	f000 8092 	beq.w	8006856 <_dtoa_r+0x926>
 8006732:	f1c0 0320 	rsb	r3, r0, #32
 8006736:	2b04      	cmp	r3, #4
 8006738:	f340 808a 	ble.w	8006850 <_dtoa_r+0x920>
 800673c:	f1c0 001c 	rsb	r0, r0, #28
 8006740:	9b06      	ldr	r3, [sp, #24]
 8006742:	4407      	add	r7, r0
 8006744:	4403      	add	r3, r0
 8006746:	9306      	str	r3, [sp, #24]
 8006748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674a:	4403      	add	r3, r0
 800674c:	9309      	str	r3, [sp, #36]	; 0x24
 800674e:	9b06      	ldr	r3, [sp, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	dd05      	ble.n	8006760 <_dtoa_r+0x830>
 8006754:	4659      	mov	r1, fp
 8006756:	461a      	mov	r2, r3
 8006758:	4628      	mov	r0, r5
 800675a:	f000 ffcf 	bl	80076fc <__lshift>
 800675e:	4683      	mov	fp, r0
 8006760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006762:	2b00      	cmp	r3, #0
 8006764:	dd05      	ble.n	8006772 <_dtoa_r+0x842>
 8006766:	4621      	mov	r1, r4
 8006768:	461a      	mov	r2, r3
 800676a:	4628      	mov	r0, r5
 800676c:	f000 ffc6 	bl	80076fc <__lshift>
 8006770:	4604      	mov	r4, r0
 8006772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d070      	beq.n	800685a <_dtoa_r+0x92a>
 8006778:	4621      	mov	r1, r4
 800677a:	4658      	mov	r0, fp
 800677c:	f001 f82e 	bl	80077dc <__mcmp>
 8006780:	2800      	cmp	r0, #0
 8006782:	da6a      	bge.n	800685a <_dtoa_r+0x92a>
 8006784:	2300      	movs	r3, #0
 8006786:	4659      	mov	r1, fp
 8006788:	220a      	movs	r2, #10
 800678a:	4628      	mov	r0, r5
 800678c:	f000 fdc0 	bl	8007310 <__multadd>
 8006790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006792:	4683      	mov	fp, r0
 8006794:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 8194 	beq.w	8006ac6 <_dtoa_r+0xb96>
 800679e:	4631      	mov	r1, r6
 80067a0:	2300      	movs	r3, #0
 80067a2:	220a      	movs	r2, #10
 80067a4:	4628      	mov	r0, r5
 80067a6:	f000 fdb3 	bl	8007310 <__multadd>
 80067aa:	f1b9 0f00 	cmp.w	r9, #0
 80067ae:	4606      	mov	r6, r0
 80067b0:	f300 8093 	bgt.w	80068da <_dtoa_r+0x9aa>
 80067b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	dc57      	bgt.n	800686a <_dtoa_r+0x93a>
 80067ba:	e08e      	b.n	80068da <_dtoa_r+0x9aa>
 80067bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80067be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067c2:	e757      	b.n	8006674 <_dtoa_r+0x744>
 80067c4:	9b08      	ldr	r3, [sp, #32]
 80067c6:	1e5c      	subs	r4, r3, #1
 80067c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ca:	42a3      	cmp	r3, r4
 80067cc:	bfb7      	itett	lt
 80067ce:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80067d0:	1b1c      	subge	r4, r3, r4
 80067d2:	1ae2      	sublt	r2, r4, r3
 80067d4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80067d6:	bfbe      	ittt	lt
 80067d8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80067da:	189b      	addlt	r3, r3, r2
 80067dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80067de:	9b08      	ldr	r3, [sp, #32]
 80067e0:	bfb8      	it	lt
 80067e2:	2400      	movlt	r4, #0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	bfbb      	ittet	lt
 80067e8:	9b06      	ldrlt	r3, [sp, #24]
 80067ea:	9a08      	ldrlt	r2, [sp, #32]
 80067ec:	9f06      	ldrge	r7, [sp, #24]
 80067ee:	1a9f      	sublt	r7, r3, r2
 80067f0:	bfac      	ite	ge
 80067f2:	9b08      	ldrge	r3, [sp, #32]
 80067f4:	2300      	movlt	r3, #0
 80067f6:	e73f      	b.n	8006678 <_dtoa_r+0x748>
 80067f8:	3fe00000 	.word	0x3fe00000
 80067fc:	40240000 	.word	0x40240000
 8006800:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006802:	9f06      	ldr	r7, [sp, #24]
 8006804:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006806:	e742      	b.n	800668e <_dtoa_r+0x75e>
 8006808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800680a:	e76b      	b.n	80066e4 <_dtoa_r+0x7b4>
 800680c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800680e:	2b01      	cmp	r3, #1
 8006810:	dc19      	bgt.n	8006846 <_dtoa_r+0x916>
 8006812:	9b04      	ldr	r3, [sp, #16]
 8006814:	b9bb      	cbnz	r3, 8006846 <_dtoa_r+0x916>
 8006816:	9b05      	ldr	r3, [sp, #20]
 8006818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800681c:	b99b      	cbnz	r3, 8006846 <_dtoa_r+0x916>
 800681e:	9b05      	ldr	r3, [sp, #20]
 8006820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006824:	0d1b      	lsrs	r3, r3, #20
 8006826:	051b      	lsls	r3, r3, #20
 8006828:	b183      	cbz	r3, 800684c <_dtoa_r+0x91c>
 800682a:	f04f 0801 	mov.w	r8, #1
 800682e:	9b06      	ldr	r3, [sp, #24]
 8006830:	3301      	adds	r3, #1
 8006832:	9306      	str	r3, [sp, #24]
 8006834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006836:	3301      	adds	r3, #1
 8006838:	9309      	str	r3, [sp, #36]	; 0x24
 800683a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800683c:	2b00      	cmp	r3, #0
 800683e:	f47f af6a 	bne.w	8006716 <_dtoa_r+0x7e6>
 8006842:	2001      	movs	r0, #1
 8006844:	e76f      	b.n	8006726 <_dtoa_r+0x7f6>
 8006846:	f04f 0800 	mov.w	r8, #0
 800684a:	e7f6      	b.n	800683a <_dtoa_r+0x90a>
 800684c:	4698      	mov	r8, r3
 800684e:	e7f4      	b.n	800683a <_dtoa_r+0x90a>
 8006850:	f43f af7d 	beq.w	800674e <_dtoa_r+0x81e>
 8006854:	4618      	mov	r0, r3
 8006856:	301c      	adds	r0, #28
 8006858:	e772      	b.n	8006740 <_dtoa_r+0x810>
 800685a:	9b08      	ldr	r3, [sp, #32]
 800685c:	2b00      	cmp	r3, #0
 800685e:	dc36      	bgt.n	80068ce <_dtoa_r+0x99e>
 8006860:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006862:	2b02      	cmp	r3, #2
 8006864:	dd33      	ble.n	80068ce <_dtoa_r+0x99e>
 8006866:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800686a:	f1b9 0f00 	cmp.w	r9, #0
 800686e:	d10d      	bne.n	800688c <_dtoa_r+0x95c>
 8006870:	4621      	mov	r1, r4
 8006872:	464b      	mov	r3, r9
 8006874:	2205      	movs	r2, #5
 8006876:	4628      	mov	r0, r5
 8006878:	f000 fd4a 	bl	8007310 <__multadd>
 800687c:	4601      	mov	r1, r0
 800687e:	4604      	mov	r4, r0
 8006880:	4658      	mov	r0, fp
 8006882:	f000 ffab 	bl	80077dc <__mcmp>
 8006886:	2800      	cmp	r0, #0
 8006888:	f73f adb8 	bgt.w	80063fc <_dtoa_r+0x4cc>
 800688c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800688e:	9f03      	ldr	r7, [sp, #12]
 8006890:	ea6f 0a03 	mvn.w	sl, r3
 8006894:	f04f 0800 	mov.w	r8, #0
 8006898:	4621      	mov	r1, r4
 800689a:	4628      	mov	r0, r5
 800689c:	f000 fd16 	bl	80072cc <_Bfree>
 80068a0:	2e00      	cmp	r6, #0
 80068a2:	f43f aea7 	beq.w	80065f4 <_dtoa_r+0x6c4>
 80068a6:	f1b8 0f00 	cmp.w	r8, #0
 80068aa:	d005      	beq.n	80068b8 <_dtoa_r+0x988>
 80068ac:	45b0      	cmp	r8, r6
 80068ae:	d003      	beq.n	80068b8 <_dtoa_r+0x988>
 80068b0:	4641      	mov	r1, r8
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 fd0a 	bl	80072cc <_Bfree>
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	f000 fd06 	bl	80072cc <_Bfree>
 80068c0:	e698      	b.n	80065f4 <_dtoa_r+0x6c4>
 80068c2:	2400      	movs	r4, #0
 80068c4:	4626      	mov	r6, r4
 80068c6:	e7e1      	b.n	800688c <_dtoa_r+0x95c>
 80068c8:	46c2      	mov	sl, r8
 80068ca:	4626      	mov	r6, r4
 80068cc:	e596      	b.n	80063fc <_dtoa_r+0x4cc>
 80068ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 80fd 	beq.w	8006ad4 <_dtoa_r+0xba4>
 80068da:	2f00      	cmp	r7, #0
 80068dc:	dd05      	ble.n	80068ea <_dtoa_r+0x9ba>
 80068de:	4631      	mov	r1, r6
 80068e0:	463a      	mov	r2, r7
 80068e2:	4628      	mov	r0, r5
 80068e4:	f000 ff0a 	bl	80076fc <__lshift>
 80068e8:	4606      	mov	r6, r0
 80068ea:	f1b8 0f00 	cmp.w	r8, #0
 80068ee:	d05c      	beq.n	80069aa <_dtoa_r+0xa7a>
 80068f0:	4628      	mov	r0, r5
 80068f2:	6871      	ldr	r1, [r6, #4]
 80068f4:	f000 fcaa 	bl	800724c <_Balloc>
 80068f8:	4607      	mov	r7, r0
 80068fa:	b928      	cbnz	r0, 8006908 <_dtoa_r+0x9d8>
 80068fc:	4602      	mov	r2, r0
 80068fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006902:	4b7f      	ldr	r3, [pc, #508]	; (8006b00 <_dtoa_r+0xbd0>)
 8006904:	f7ff bb28 	b.w	8005f58 <_dtoa_r+0x28>
 8006908:	6932      	ldr	r2, [r6, #16]
 800690a:	f106 010c 	add.w	r1, r6, #12
 800690e:	3202      	adds	r2, #2
 8006910:	0092      	lsls	r2, r2, #2
 8006912:	300c      	adds	r0, #12
 8006914:	f000 fc8c 	bl	8007230 <memcpy>
 8006918:	2201      	movs	r2, #1
 800691a:	4639      	mov	r1, r7
 800691c:	4628      	mov	r0, r5
 800691e:	f000 feed 	bl	80076fc <__lshift>
 8006922:	46b0      	mov	r8, r6
 8006924:	4606      	mov	r6, r0
 8006926:	9b03      	ldr	r3, [sp, #12]
 8006928:	3301      	adds	r3, #1
 800692a:	9308      	str	r3, [sp, #32]
 800692c:	9b03      	ldr	r3, [sp, #12]
 800692e:	444b      	add	r3, r9
 8006930:	930a      	str	r3, [sp, #40]	; 0x28
 8006932:	9b04      	ldr	r3, [sp, #16]
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	9309      	str	r3, [sp, #36]	; 0x24
 800693a:	9b08      	ldr	r3, [sp, #32]
 800693c:	4621      	mov	r1, r4
 800693e:	3b01      	subs	r3, #1
 8006940:	4658      	mov	r0, fp
 8006942:	9304      	str	r3, [sp, #16]
 8006944:	f7ff fa68 	bl	8005e18 <quorem>
 8006948:	4603      	mov	r3, r0
 800694a:	4641      	mov	r1, r8
 800694c:	3330      	adds	r3, #48	; 0x30
 800694e:	9006      	str	r0, [sp, #24]
 8006950:	4658      	mov	r0, fp
 8006952:	930b      	str	r3, [sp, #44]	; 0x2c
 8006954:	f000 ff42 	bl	80077dc <__mcmp>
 8006958:	4632      	mov	r2, r6
 800695a:	4681      	mov	r9, r0
 800695c:	4621      	mov	r1, r4
 800695e:	4628      	mov	r0, r5
 8006960:	f000 ff58 	bl	8007814 <__mdiff>
 8006964:	68c2      	ldr	r2, [r0, #12]
 8006966:	4607      	mov	r7, r0
 8006968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800696a:	bb02      	cbnz	r2, 80069ae <_dtoa_r+0xa7e>
 800696c:	4601      	mov	r1, r0
 800696e:	4658      	mov	r0, fp
 8006970:	f000 ff34 	bl	80077dc <__mcmp>
 8006974:	4602      	mov	r2, r0
 8006976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006978:	4639      	mov	r1, r7
 800697a:	4628      	mov	r0, r5
 800697c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006980:	f000 fca4 	bl	80072cc <_Bfree>
 8006984:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006986:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006988:	9f08      	ldr	r7, [sp, #32]
 800698a:	ea43 0102 	orr.w	r1, r3, r2
 800698e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006990:	430b      	orrs	r3, r1
 8006992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006994:	d10d      	bne.n	80069b2 <_dtoa_r+0xa82>
 8006996:	2b39      	cmp	r3, #57	; 0x39
 8006998:	d029      	beq.n	80069ee <_dtoa_r+0xabe>
 800699a:	f1b9 0f00 	cmp.w	r9, #0
 800699e:	dd01      	ble.n	80069a4 <_dtoa_r+0xa74>
 80069a0:	9b06      	ldr	r3, [sp, #24]
 80069a2:	3331      	adds	r3, #49	; 0x31
 80069a4:	9a04      	ldr	r2, [sp, #16]
 80069a6:	7013      	strb	r3, [r2, #0]
 80069a8:	e776      	b.n	8006898 <_dtoa_r+0x968>
 80069aa:	4630      	mov	r0, r6
 80069ac:	e7b9      	b.n	8006922 <_dtoa_r+0x9f2>
 80069ae:	2201      	movs	r2, #1
 80069b0:	e7e2      	b.n	8006978 <_dtoa_r+0xa48>
 80069b2:	f1b9 0f00 	cmp.w	r9, #0
 80069b6:	db06      	blt.n	80069c6 <_dtoa_r+0xa96>
 80069b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80069ba:	ea41 0909 	orr.w	r9, r1, r9
 80069be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069c0:	ea59 0101 	orrs.w	r1, r9, r1
 80069c4:	d120      	bne.n	8006a08 <_dtoa_r+0xad8>
 80069c6:	2a00      	cmp	r2, #0
 80069c8:	ddec      	ble.n	80069a4 <_dtoa_r+0xa74>
 80069ca:	4659      	mov	r1, fp
 80069cc:	2201      	movs	r2, #1
 80069ce:	4628      	mov	r0, r5
 80069d0:	9308      	str	r3, [sp, #32]
 80069d2:	f000 fe93 	bl	80076fc <__lshift>
 80069d6:	4621      	mov	r1, r4
 80069d8:	4683      	mov	fp, r0
 80069da:	f000 feff 	bl	80077dc <__mcmp>
 80069de:	2800      	cmp	r0, #0
 80069e0:	9b08      	ldr	r3, [sp, #32]
 80069e2:	dc02      	bgt.n	80069ea <_dtoa_r+0xaba>
 80069e4:	d1de      	bne.n	80069a4 <_dtoa_r+0xa74>
 80069e6:	07da      	lsls	r2, r3, #31
 80069e8:	d5dc      	bpl.n	80069a4 <_dtoa_r+0xa74>
 80069ea:	2b39      	cmp	r3, #57	; 0x39
 80069ec:	d1d8      	bne.n	80069a0 <_dtoa_r+0xa70>
 80069ee:	2339      	movs	r3, #57	; 0x39
 80069f0:	9a04      	ldr	r2, [sp, #16]
 80069f2:	7013      	strb	r3, [r2, #0]
 80069f4:	463b      	mov	r3, r7
 80069f6:	461f      	mov	r7, r3
 80069f8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80069fc:	3b01      	subs	r3, #1
 80069fe:	2a39      	cmp	r2, #57	; 0x39
 8006a00:	d050      	beq.n	8006aa4 <_dtoa_r+0xb74>
 8006a02:	3201      	adds	r2, #1
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	e747      	b.n	8006898 <_dtoa_r+0x968>
 8006a08:	2a00      	cmp	r2, #0
 8006a0a:	dd03      	ble.n	8006a14 <_dtoa_r+0xae4>
 8006a0c:	2b39      	cmp	r3, #57	; 0x39
 8006a0e:	d0ee      	beq.n	80069ee <_dtoa_r+0xabe>
 8006a10:	3301      	adds	r3, #1
 8006a12:	e7c7      	b.n	80069a4 <_dtoa_r+0xa74>
 8006a14:	9a08      	ldr	r2, [sp, #32]
 8006a16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a18:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a1c:	428a      	cmp	r2, r1
 8006a1e:	d02a      	beq.n	8006a76 <_dtoa_r+0xb46>
 8006a20:	4659      	mov	r1, fp
 8006a22:	2300      	movs	r3, #0
 8006a24:	220a      	movs	r2, #10
 8006a26:	4628      	mov	r0, r5
 8006a28:	f000 fc72 	bl	8007310 <__multadd>
 8006a2c:	45b0      	cmp	r8, r6
 8006a2e:	4683      	mov	fp, r0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	f04f 020a 	mov.w	r2, #10
 8006a38:	4641      	mov	r1, r8
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	d107      	bne.n	8006a4e <_dtoa_r+0xb1e>
 8006a3e:	f000 fc67 	bl	8007310 <__multadd>
 8006a42:	4680      	mov	r8, r0
 8006a44:	4606      	mov	r6, r0
 8006a46:	9b08      	ldr	r3, [sp, #32]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	9308      	str	r3, [sp, #32]
 8006a4c:	e775      	b.n	800693a <_dtoa_r+0xa0a>
 8006a4e:	f000 fc5f 	bl	8007310 <__multadd>
 8006a52:	4631      	mov	r1, r6
 8006a54:	4680      	mov	r8, r0
 8006a56:	2300      	movs	r3, #0
 8006a58:	220a      	movs	r2, #10
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f000 fc58 	bl	8007310 <__multadd>
 8006a60:	4606      	mov	r6, r0
 8006a62:	e7f0      	b.n	8006a46 <_dtoa_r+0xb16>
 8006a64:	f1b9 0f00 	cmp.w	r9, #0
 8006a68:	bfcc      	ite	gt
 8006a6a:	464f      	movgt	r7, r9
 8006a6c:	2701      	movle	r7, #1
 8006a6e:	f04f 0800 	mov.w	r8, #0
 8006a72:	9a03      	ldr	r2, [sp, #12]
 8006a74:	4417      	add	r7, r2
 8006a76:	4659      	mov	r1, fp
 8006a78:	2201      	movs	r2, #1
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	9308      	str	r3, [sp, #32]
 8006a7e:	f000 fe3d 	bl	80076fc <__lshift>
 8006a82:	4621      	mov	r1, r4
 8006a84:	4683      	mov	fp, r0
 8006a86:	f000 fea9 	bl	80077dc <__mcmp>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	dcb2      	bgt.n	80069f4 <_dtoa_r+0xac4>
 8006a8e:	d102      	bne.n	8006a96 <_dtoa_r+0xb66>
 8006a90:	9b08      	ldr	r3, [sp, #32]
 8006a92:	07db      	lsls	r3, r3, #31
 8006a94:	d4ae      	bmi.n	80069f4 <_dtoa_r+0xac4>
 8006a96:	463b      	mov	r3, r7
 8006a98:	461f      	mov	r7, r3
 8006a9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a9e:	2a30      	cmp	r2, #48	; 0x30
 8006aa0:	d0fa      	beq.n	8006a98 <_dtoa_r+0xb68>
 8006aa2:	e6f9      	b.n	8006898 <_dtoa_r+0x968>
 8006aa4:	9a03      	ldr	r2, [sp, #12]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d1a5      	bne.n	80069f6 <_dtoa_r+0xac6>
 8006aaa:	2331      	movs	r3, #49	; 0x31
 8006aac:	f10a 0a01 	add.w	sl, sl, #1
 8006ab0:	e779      	b.n	80069a6 <_dtoa_r+0xa76>
 8006ab2:	4b14      	ldr	r3, [pc, #80]	; (8006b04 <_dtoa_r+0xbd4>)
 8006ab4:	f7ff baa8 	b.w	8006008 <_dtoa_r+0xd8>
 8006ab8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f47f aa81 	bne.w	8005fc2 <_dtoa_r+0x92>
 8006ac0:	4b11      	ldr	r3, [pc, #68]	; (8006b08 <_dtoa_r+0xbd8>)
 8006ac2:	f7ff baa1 	b.w	8006008 <_dtoa_r+0xd8>
 8006ac6:	f1b9 0f00 	cmp.w	r9, #0
 8006aca:	dc03      	bgt.n	8006ad4 <_dtoa_r+0xba4>
 8006acc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	f73f aecb 	bgt.w	800686a <_dtoa_r+0x93a>
 8006ad4:	9f03      	ldr	r7, [sp, #12]
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	4658      	mov	r0, fp
 8006ada:	f7ff f99d 	bl	8005e18 <quorem>
 8006ade:	9a03      	ldr	r2, [sp, #12]
 8006ae0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006ae4:	f807 3b01 	strb.w	r3, [r7], #1
 8006ae8:	1aba      	subs	r2, r7, r2
 8006aea:	4591      	cmp	r9, r2
 8006aec:	ddba      	ble.n	8006a64 <_dtoa_r+0xb34>
 8006aee:	4659      	mov	r1, fp
 8006af0:	2300      	movs	r3, #0
 8006af2:	220a      	movs	r2, #10
 8006af4:	4628      	mov	r0, r5
 8006af6:	f000 fc0b 	bl	8007310 <__multadd>
 8006afa:	4683      	mov	fp, r0
 8006afc:	e7eb      	b.n	8006ad6 <_dtoa_r+0xba6>
 8006afe:	bf00      	nop
 8006b00:	08009f18 	.word	0x08009f18
 8006b04:	08009d1c 	.word	0x08009d1c
 8006b08:	08009e99 	.word	0x08009e99

08006b0c <rshift>:
 8006b0c:	6903      	ldr	r3, [r0, #16]
 8006b0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006b16:	f100 0414 	add.w	r4, r0, #20
 8006b1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006b1e:	dd46      	ble.n	8006bae <rshift+0xa2>
 8006b20:	f011 011f 	ands.w	r1, r1, #31
 8006b24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006b28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b2c:	d10c      	bne.n	8006b48 <rshift+0x3c>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	f100 0710 	add.w	r7, r0, #16
 8006b34:	42b1      	cmp	r1, r6
 8006b36:	d335      	bcc.n	8006ba4 <rshift+0x98>
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	1eea      	subs	r2, r5, #3
 8006b3e:	4296      	cmp	r6, r2
 8006b40:	bf38      	it	cc
 8006b42:	2300      	movcc	r3, #0
 8006b44:	4423      	add	r3, r4
 8006b46:	e015      	b.n	8006b74 <rshift+0x68>
 8006b48:	46a1      	mov	r9, r4
 8006b4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006b4e:	f1c1 0820 	rsb	r8, r1, #32
 8006b52:	40cf      	lsrs	r7, r1
 8006b54:	f105 0e04 	add.w	lr, r5, #4
 8006b58:	4576      	cmp	r6, lr
 8006b5a:	46f4      	mov	ip, lr
 8006b5c:	d816      	bhi.n	8006b8c <rshift+0x80>
 8006b5e:	1a9a      	subs	r2, r3, r2
 8006b60:	0092      	lsls	r2, r2, #2
 8006b62:	3a04      	subs	r2, #4
 8006b64:	3501      	adds	r5, #1
 8006b66:	42ae      	cmp	r6, r5
 8006b68:	bf38      	it	cc
 8006b6a:	2200      	movcc	r2, #0
 8006b6c:	18a3      	adds	r3, r4, r2
 8006b6e:	50a7      	str	r7, [r4, r2]
 8006b70:	b107      	cbz	r7, 8006b74 <rshift+0x68>
 8006b72:	3304      	adds	r3, #4
 8006b74:	42a3      	cmp	r3, r4
 8006b76:	eba3 0204 	sub.w	r2, r3, r4
 8006b7a:	bf08      	it	eq
 8006b7c:	2300      	moveq	r3, #0
 8006b7e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006b82:	6102      	str	r2, [r0, #16]
 8006b84:	bf08      	it	eq
 8006b86:	6143      	streq	r3, [r0, #20]
 8006b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b8c:	f8dc c000 	ldr.w	ip, [ip]
 8006b90:	fa0c fc08 	lsl.w	ip, ip, r8
 8006b94:	ea4c 0707 	orr.w	r7, ip, r7
 8006b98:	f849 7b04 	str.w	r7, [r9], #4
 8006b9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ba0:	40cf      	lsrs	r7, r1
 8006ba2:	e7d9      	b.n	8006b58 <rshift+0x4c>
 8006ba4:	f851 cb04 	ldr.w	ip, [r1], #4
 8006ba8:	f847 cf04 	str.w	ip, [r7, #4]!
 8006bac:	e7c2      	b.n	8006b34 <rshift+0x28>
 8006bae:	4623      	mov	r3, r4
 8006bb0:	e7e0      	b.n	8006b74 <rshift+0x68>

08006bb2 <__hexdig_fun>:
 8006bb2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006bb6:	2b09      	cmp	r3, #9
 8006bb8:	d802      	bhi.n	8006bc0 <__hexdig_fun+0xe>
 8006bba:	3820      	subs	r0, #32
 8006bbc:	b2c0      	uxtb	r0, r0
 8006bbe:	4770      	bx	lr
 8006bc0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006bc4:	2b05      	cmp	r3, #5
 8006bc6:	d801      	bhi.n	8006bcc <__hexdig_fun+0x1a>
 8006bc8:	3847      	subs	r0, #71	; 0x47
 8006bca:	e7f7      	b.n	8006bbc <__hexdig_fun+0xa>
 8006bcc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006bd0:	2b05      	cmp	r3, #5
 8006bd2:	d801      	bhi.n	8006bd8 <__hexdig_fun+0x26>
 8006bd4:	3827      	subs	r0, #39	; 0x27
 8006bd6:	e7f1      	b.n	8006bbc <__hexdig_fun+0xa>
 8006bd8:	2000      	movs	r0, #0
 8006bda:	4770      	bx	lr

08006bdc <__gethex>:
 8006bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be0:	b08b      	sub	sp, #44	; 0x2c
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	4bb2      	ldr	r3, [pc, #712]	; (8006eb0 <__gethex+0x2d4>)
 8006be6:	9002      	str	r0, [sp, #8]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	468b      	mov	fp, r1
 8006bec:	4618      	mov	r0, r3
 8006bee:	4690      	mov	r8, r2
 8006bf0:	9303      	str	r3, [sp, #12]
 8006bf2:	f7f9 fb19 	bl	8000228 <strlen>
 8006bf6:	4682      	mov	sl, r0
 8006bf8:	9b03      	ldr	r3, [sp, #12]
 8006bfa:	f8db 2000 	ldr.w	r2, [fp]
 8006bfe:	4403      	add	r3, r0
 8006c00:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006c04:	9306      	str	r3, [sp, #24]
 8006c06:	1c93      	adds	r3, r2, #2
 8006c08:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006c0c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006c10:	32fe      	adds	r2, #254	; 0xfe
 8006c12:	18d1      	adds	r1, r2, r3
 8006c14:	461f      	mov	r7, r3
 8006c16:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006c1a:	9101      	str	r1, [sp, #4]
 8006c1c:	2830      	cmp	r0, #48	; 0x30
 8006c1e:	d0f8      	beq.n	8006c12 <__gethex+0x36>
 8006c20:	f7ff ffc7 	bl	8006bb2 <__hexdig_fun>
 8006c24:	4604      	mov	r4, r0
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d13a      	bne.n	8006ca0 <__gethex+0xc4>
 8006c2a:	4652      	mov	r2, sl
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	9903      	ldr	r1, [sp, #12]
 8006c30:	f001 fa26 	bl	8008080 <strncmp>
 8006c34:	4605      	mov	r5, r0
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d166      	bne.n	8006d08 <__gethex+0x12c>
 8006c3a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006c3e:	eb07 060a 	add.w	r6, r7, sl
 8006c42:	f7ff ffb6 	bl	8006bb2 <__hexdig_fun>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d060      	beq.n	8006d0c <__gethex+0x130>
 8006c4a:	4633      	mov	r3, r6
 8006c4c:	7818      	ldrb	r0, [r3, #0]
 8006c4e:	461f      	mov	r7, r3
 8006c50:	2830      	cmp	r0, #48	; 0x30
 8006c52:	f103 0301 	add.w	r3, r3, #1
 8006c56:	d0f9      	beq.n	8006c4c <__gethex+0x70>
 8006c58:	f7ff ffab 	bl	8006bb2 <__hexdig_fun>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	fab0 f480 	clz	r4, r0
 8006c62:	4635      	mov	r5, r6
 8006c64:	0964      	lsrs	r4, r4, #5
 8006c66:	9301      	str	r3, [sp, #4]
 8006c68:	463a      	mov	r2, r7
 8006c6a:	4616      	mov	r6, r2
 8006c6c:	7830      	ldrb	r0, [r6, #0]
 8006c6e:	3201      	adds	r2, #1
 8006c70:	f7ff ff9f 	bl	8006bb2 <__hexdig_fun>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d1f8      	bne.n	8006c6a <__gethex+0x8e>
 8006c78:	4652      	mov	r2, sl
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	9903      	ldr	r1, [sp, #12]
 8006c7e:	f001 f9ff 	bl	8008080 <strncmp>
 8006c82:	b980      	cbnz	r0, 8006ca6 <__gethex+0xca>
 8006c84:	b94d      	cbnz	r5, 8006c9a <__gethex+0xbe>
 8006c86:	eb06 050a 	add.w	r5, r6, sl
 8006c8a:	462a      	mov	r2, r5
 8006c8c:	4616      	mov	r6, r2
 8006c8e:	7830      	ldrb	r0, [r6, #0]
 8006c90:	3201      	adds	r2, #1
 8006c92:	f7ff ff8e 	bl	8006bb2 <__hexdig_fun>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d1f8      	bne.n	8006c8c <__gethex+0xb0>
 8006c9a:	1bad      	subs	r5, r5, r6
 8006c9c:	00ad      	lsls	r5, r5, #2
 8006c9e:	e004      	b.n	8006caa <__gethex+0xce>
 8006ca0:	2400      	movs	r4, #0
 8006ca2:	4625      	mov	r5, r4
 8006ca4:	e7e0      	b.n	8006c68 <__gethex+0x8c>
 8006ca6:	2d00      	cmp	r5, #0
 8006ca8:	d1f7      	bne.n	8006c9a <__gethex+0xbe>
 8006caa:	7833      	ldrb	r3, [r6, #0]
 8006cac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006cb0:	2b50      	cmp	r3, #80	; 0x50
 8006cb2:	d139      	bne.n	8006d28 <__gethex+0x14c>
 8006cb4:	7873      	ldrb	r3, [r6, #1]
 8006cb6:	2b2b      	cmp	r3, #43	; 0x2b
 8006cb8:	d02a      	beq.n	8006d10 <__gethex+0x134>
 8006cba:	2b2d      	cmp	r3, #45	; 0x2d
 8006cbc:	d02c      	beq.n	8006d18 <__gethex+0x13c>
 8006cbe:	f04f 0900 	mov.w	r9, #0
 8006cc2:	1c71      	adds	r1, r6, #1
 8006cc4:	7808      	ldrb	r0, [r1, #0]
 8006cc6:	f7ff ff74 	bl	8006bb2 <__hexdig_fun>
 8006cca:	1e43      	subs	r3, r0, #1
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b18      	cmp	r3, #24
 8006cd0:	d82a      	bhi.n	8006d28 <__gethex+0x14c>
 8006cd2:	f1a0 0210 	sub.w	r2, r0, #16
 8006cd6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006cda:	f7ff ff6a 	bl	8006bb2 <__hexdig_fun>
 8006cde:	1e43      	subs	r3, r0, #1
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b18      	cmp	r3, #24
 8006ce4:	d91b      	bls.n	8006d1e <__gethex+0x142>
 8006ce6:	f1b9 0f00 	cmp.w	r9, #0
 8006cea:	d000      	beq.n	8006cee <__gethex+0x112>
 8006cec:	4252      	negs	r2, r2
 8006cee:	4415      	add	r5, r2
 8006cf0:	f8cb 1000 	str.w	r1, [fp]
 8006cf4:	b1d4      	cbz	r4, 8006d2c <__gethex+0x150>
 8006cf6:	9b01      	ldr	r3, [sp, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	bf14      	ite	ne
 8006cfc:	2700      	movne	r7, #0
 8006cfe:	2706      	moveq	r7, #6
 8006d00:	4638      	mov	r0, r7
 8006d02:	b00b      	add	sp, #44	; 0x2c
 8006d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d08:	463e      	mov	r6, r7
 8006d0a:	4625      	mov	r5, r4
 8006d0c:	2401      	movs	r4, #1
 8006d0e:	e7cc      	b.n	8006caa <__gethex+0xce>
 8006d10:	f04f 0900 	mov.w	r9, #0
 8006d14:	1cb1      	adds	r1, r6, #2
 8006d16:	e7d5      	b.n	8006cc4 <__gethex+0xe8>
 8006d18:	f04f 0901 	mov.w	r9, #1
 8006d1c:	e7fa      	b.n	8006d14 <__gethex+0x138>
 8006d1e:	230a      	movs	r3, #10
 8006d20:	fb03 0202 	mla	r2, r3, r2, r0
 8006d24:	3a10      	subs	r2, #16
 8006d26:	e7d6      	b.n	8006cd6 <__gethex+0xfa>
 8006d28:	4631      	mov	r1, r6
 8006d2a:	e7e1      	b.n	8006cf0 <__gethex+0x114>
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	1bf3      	subs	r3, r6, r7
 8006d30:	3b01      	subs	r3, #1
 8006d32:	2b07      	cmp	r3, #7
 8006d34:	dc0a      	bgt.n	8006d4c <__gethex+0x170>
 8006d36:	9802      	ldr	r0, [sp, #8]
 8006d38:	f000 fa88 	bl	800724c <_Balloc>
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	b940      	cbnz	r0, 8006d52 <__gethex+0x176>
 8006d40:	4602      	mov	r2, r0
 8006d42:	21de      	movs	r1, #222	; 0xde
 8006d44:	4b5b      	ldr	r3, [pc, #364]	; (8006eb4 <__gethex+0x2d8>)
 8006d46:	485c      	ldr	r0, [pc, #368]	; (8006eb8 <__gethex+0x2dc>)
 8006d48:	f001 f9bc 	bl	80080c4 <__assert_func>
 8006d4c:	3101      	adds	r1, #1
 8006d4e:	105b      	asrs	r3, r3, #1
 8006d50:	e7ef      	b.n	8006d32 <__gethex+0x156>
 8006d52:	f04f 0b00 	mov.w	fp, #0
 8006d56:	f100 0914 	add.w	r9, r0, #20
 8006d5a:	f1ca 0301 	rsb	r3, sl, #1
 8006d5e:	f8cd 9010 	str.w	r9, [sp, #16]
 8006d62:	f8cd b004 	str.w	fp, [sp, #4]
 8006d66:	9308      	str	r3, [sp, #32]
 8006d68:	42b7      	cmp	r7, r6
 8006d6a:	d33f      	bcc.n	8006dec <__gethex+0x210>
 8006d6c:	9f04      	ldr	r7, [sp, #16]
 8006d6e:	9b01      	ldr	r3, [sp, #4]
 8006d70:	f847 3b04 	str.w	r3, [r7], #4
 8006d74:	eba7 0709 	sub.w	r7, r7, r9
 8006d78:	10bf      	asrs	r7, r7, #2
 8006d7a:	6127      	str	r7, [r4, #16]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fb57 	bl	8007430 <__hi0bits>
 8006d82:	017f      	lsls	r7, r7, #5
 8006d84:	f8d8 6000 	ldr.w	r6, [r8]
 8006d88:	1a3f      	subs	r7, r7, r0
 8006d8a:	42b7      	cmp	r7, r6
 8006d8c:	dd62      	ble.n	8006e54 <__gethex+0x278>
 8006d8e:	1bbf      	subs	r7, r7, r6
 8006d90:	4639      	mov	r1, r7
 8006d92:	4620      	mov	r0, r4
 8006d94:	f000 fef1 	bl	8007b7a <__any_on>
 8006d98:	4682      	mov	sl, r0
 8006d9a:	b1a8      	cbz	r0, 8006dc8 <__gethex+0x1ec>
 8006d9c:	f04f 0a01 	mov.w	sl, #1
 8006da0:	1e7b      	subs	r3, r7, #1
 8006da2:	1159      	asrs	r1, r3, #5
 8006da4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006da8:	f003 021f 	and.w	r2, r3, #31
 8006dac:	fa0a f202 	lsl.w	r2, sl, r2
 8006db0:	420a      	tst	r2, r1
 8006db2:	d009      	beq.n	8006dc8 <__gethex+0x1ec>
 8006db4:	4553      	cmp	r3, sl
 8006db6:	dd05      	ble.n	8006dc4 <__gethex+0x1e8>
 8006db8:	4620      	mov	r0, r4
 8006dba:	1eb9      	subs	r1, r7, #2
 8006dbc:	f000 fedd 	bl	8007b7a <__any_on>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d144      	bne.n	8006e4e <__gethex+0x272>
 8006dc4:	f04f 0a02 	mov.w	sl, #2
 8006dc8:	4639      	mov	r1, r7
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f7ff fe9e 	bl	8006b0c <rshift>
 8006dd0:	443d      	add	r5, r7
 8006dd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dd6:	42ab      	cmp	r3, r5
 8006dd8:	da4a      	bge.n	8006e70 <__gethex+0x294>
 8006dda:	4621      	mov	r1, r4
 8006ddc:	9802      	ldr	r0, [sp, #8]
 8006dde:	f000 fa75 	bl	80072cc <_Bfree>
 8006de2:	2300      	movs	r3, #0
 8006de4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006de6:	27a3      	movs	r7, #163	; 0xa3
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	e789      	b.n	8006d00 <__gethex+0x124>
 8006dec:	1e73      	subs	r3, r6, #1
 8006dee:	9a06      	ldr	r2, [sp, #24]
 8006df0:	9307      	str	r3, [sp, #28]
 8006df2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d019      	beq.n	8006e2e <__gethex+0x252>
 8006dfa:	f1bb 0f20 	cmp.w	fp, #32
 8006dfe:	d107      	bne.n	8006e10 <__gethex+0x234>
 8006e00:	9b04      	ldr	r3, [sp, #16]
 8006e02:	9a01      	ldr	r2, [sp, #4]
 8006e04:	f843 2b04 	str.w	r2, [r3], #4
 8006e08:	9304      	str	r3, [sp, #16]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	469b      	mov	fp, r3
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006e14:	f7ff fecd 	bl	8006bb2 <__hexdig_fun>
 8006e18:	9b01      	ldr	r3, [sp, #4]
 8006e1a:	f000 000f 	and.w	r0, r0, #15
 8006e1e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006e22:	4303      	orrs	r3, r0
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	f10b 0b04 	add.w	fp, fp, #4
 8006e2a:	9b07      	ldr	r3, [sp, #28]
 8006e2c:	e00d      	b.n	8006e4a <__gethex+0x26e>
 8006e2e:	9a08      	ldr	r2, [sp, #32]
 8006e30:	1e73      	subs	r3, r6, #1
 8006e32:	4413      	add	r3, r2
 8006e34:	42bb      	cmp	r3, r7
 8006e36:	d3e0      	bcc.n	8006dfa <__gethex+0x21e>
 8006e38:	4618      	mov	r0, r3
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	9903      	ldr	r1, [sp, #12]
 8006e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e40:	f001 f91e 	bl	8008080 <strncmp>
 8006e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d1d7      	bne.n	8006dfa <__gethex+0x21e>
 8006e4a:	461e      	mov	r6, r3
 8006e4c:	e78c      	b.n	8006d68 <__gethex+0x18c>
 8006e4e:	f04f 0a03 	mov.w	sl, #3
 8006e52:	e7b9      	b.n	8006dc8 <__gethex+0x1ec>
 8006e54:	da09      	bge.n	8006e6a <__gethex+0x28e>
 8006e56:	1bf7      	subs	r7, r6, r7
 8006e58:	4621      	mov	r1, r4
 8006e5a:	463a      	mov	r2, r7
 8006e5c:	9802      	ldr	r0, [sp, #8]
 8006e5e:	f000 fc4d 	bl	80076fc <__lshift>
 8006e62:	4604      	mov	r4, r0
 8006e64:	1bed      	subs	r5, r5, r7
 8006e66:	f100 0914 	add.w	r9, r0, #20
 8006e6a:	f04f 0a00 	mov.w	sl, #0
 8006e6e:	e7b0      	b.n	8006dd2 <__gethex+0x1f6>
 8006e70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006e74:	42a8      	cmp	r0, r5
 8006e76:	dd72      	ble.n	8006f5e <__gethex+0x382>
 8006e78:	1b45      	subs	r5, r0, r5
 8006e7a:	42ae      	cmp	r6, r5
 8006e7c:	dc35      	bgt.n	8006eea <__gethex+0x30e>
 8006e7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d029      	beq.n	8006eda <__gethex+0x2fe>
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d02b      	beq.n	8006ee2 <__gethex+0x306>
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d11c      	bne.n	8006ec8 <__gethex+0x2ec>
 8006e8e:	42ae      	cmp	r6, r5
 8006e90:	d11a      	bne.n	8006ec8 <__gethex+0x2ec>
 8006e92:	2e01      	cmp	r6, #1
 8006e94:	d112      	bne.n	8006ebc <__gethex+0x2e0>
 8006e96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e9a:	9a05      	ldr	r2, [sp, #20]
 8006e9c:	2762      	movs	r7, #98	; 0x62
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	6123      	str	r3, [r4, #16]
 8006ea4:	f8c9 3000 	str.w	r3, [r9]
 8006ea8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006eaa:	601c      	str	r4, [r3, #0]
 8006eac:	e728      	b.n	8006d00 <__gethex+0x124>
 8006eae:	bf00      	nop
 8006eb0:	08009f90 	.word	0x08009f90
 8006eb4:	08009f18 	.word	0x08009f18
 8006eb8:	08009f29 	.word	0x08009f29
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	1e71      	subs	r1, r6, #1
 8006ec0:	f000 fe5b 	bl	8007b7a <__any_on>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d1e6      	bne.n	8006e96 <__gethex+0x2ba>
 8006ec8:	4621      	mov	r1, r4
 8006eca:	9802      	ldr	r0, [sp, #8]
 8006ecc:	f000 f9fe 	bl	80072cc <_Bfree>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ed4:	2750      	movs	r7, #80	; 0x50
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	e712      	b.n	8006d00 <__gethex+0x124>
 8006eda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f3      	bne.n	8006ec8 <__gethex+0x2ec>
 8006ee0:	e7d9      	b.n	8006e96 <__gethex+0x2ba>
 8006ee2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1d6      	bne.n	8006e96 <__gethex+0x2ba>
 8006ee8:	e7ee      	b.n	8006ec8 <__gethex+0x2ec>
 8006eea:	1e6f      	subs	r7, r5, #1
 8006eec:	f1ba 0f00 	cmp.w	sl, #0
 8006ef0:	d132      	bne.n	8006f58 <__gethex+0x37c>
 8006ef2:	b127      	cbz	r7, 8006efe <__gethex+0x322>
 8006ef4:	4639      	mov	r1, r7
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f000 fe3f 	bl	8007b7a <__any_on>
 8006efc:	4682      	mov	sl, r0
 8006efe:	2101      	movs	r1, #1
 8006f00:	117b      	asrs	r3, r7, #5
 8006f02:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006f06:	f007 071f 	and.w	r7, r7, #31
 8006f0a:	fa01 f707 	lsl.w	r7, r1, r7
 8006f0e:	421f      	tst	r7, r3
 8006f10:	f04f 0702 	mov.w	r7, #2
 8006f14:	4629      	mov	r1, r5
 8006f16:	4620      	mov	r0, r4
 8006f18:	bf18      	it	ne
 8006f1a:	f04a 0a02 	orrne.w	sl, sl, #2
 8006f1e:	1b76      	subs	r6, r6, r5
 8006f20:	f7ff fdf4 	bl	8006b0c <rshift>
 8006f24:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006f28:	f1ba 0f00 	cmp.w	sl, #0
 8006f2c:	d048      	beq.n	8006fc0 <__gethex+0x3e4>
 8006f2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d015      	beq.n	8006f62 <__gethex+0x386>
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d017      	beq.n	8006f6a <__gethex+0x38e>
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d109      	bne.n	8006f52 <__gethex+0x376>
 8006f3e:	f01a 0f02 	tst.w	sl, #2
 8006f42:	d006      	beq.n	8006f52 <__gethex+0x376>
 8006f44:	f8d9 0000 	ldr.w	r0, [r9]
 8006f48:	ea4a 0a00 	orr.w	sl, sl, r0
 8006f4c:	f01a 0f01 	tst.w	sl, #1
 8006f50:	d10e      	bne.n	8006f70 <__gethex+0x394>
 8006f52:	f047 0710 	orr.w	r7, r7, #16
 8006f56:	e033      	b.n	8006fc0 <__gethex+0x3e4>
 8006f58:	f04f 0a01 	mov.w	sl, #1
 8006f5c:	e7cf      	b.n	8006efe <__gethex+0x322>
 8006f5e:	2701      	movs	r7, #1
 8006f60:	e7e2      	b.n	8006f28 <__gethex+0x34c>
 8006f62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f64:	f1c3 0301 	rsb	r3, r3, #1
 8006f68:	9315      	str	r3, [sp, #84]	; 0x54
 8006f6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d0f0      	beq.n	8006f52 <__gethex+0x376>
 8006f70:	f04f 0c00 	mov.w	ip, #0
 8006f74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006f78:	f104 0314 	add.w	r3, r4, #20
 8006f7c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006f80:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006f8e:	d01c      	beq.n	8006fca <__gethex+0x3ee>
 8006f90:	3201      	adds	r2, #1
 8006f92:	6002      	str	r2, [r0, #0]
 8006f94:	2f02      	cmp	r7, #2
 8006f96:	f104 0314 	add.w	r3, r4, #20
 8006f9a:	d13d      	bne.n	8007018 <__gethex+0x43c>
 8006f9c:	f8d8 2000 	ldr.w	r2, [r8]
 8006fa0:	3a01      	subs	r2, #1
 8006fa2:	42b2      	cmp	r2, r6
 8006fa4:	d10a      	bne.n	8006fbc <__gethex+0x3e0>
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	1171      	asrs	r1, r6, #5
 8006faa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006fae:	f006 061f 	and.w	r6, r6, #31
 8006fb2:	fa02 f606 	lsl.w	r6, r2, r6
 8006fb6:	421e      	tst	r6, r3
 8006fb8:	bf18      	it	ne
 8006fba:	4617      	movne	r7, r2
 8006fbc:	f047 0720 	orr.w	r7, r7, #32
 8006fc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fc2:	601c      	str	r4, [r3, #0]
 8006fc4:	9b05      	ldr	r3, [sp, #20]
 8006fc6:	601d      	str	r5, [r3, #0]
 8006fc8:	e69a      	b.n	8006d00 <__gethex+0x124>
 8006fca:	4299      	cmp	r1, r3
 8006fcc:	f843 cc04 	str.w	ip, [r3, #-4]
 8006fd0:	d8d8      	bhi.n	8006f84 <__gethex+0x3a8>
 8006fd2:	68a3      	ldr	r3, [r4, #8]
 8006fd4:	459b      	cmp	fp, r3
 8006fd6:	db17      	blt.n	8007008 <__gethex+0x42c>
 8006fd8:	6861      	ldr	r1, [r4, #4]
 8006fda:	9802      	ldr	r0, [sp, #8]
 8006fdc:	3101      	adds	r1, #1
 8006fde:	f000 f935 	bl	800724c <_Balloc>
 8006fe2:	4681      	mov	r9, r0
 8006fe4:	b918      	cbnz	r0, 8006fee <__gethex+0x412>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	2184      	movs	r1, #132	; 0x84
 8006fea:	4b19      	ldr	r3, [pc, #100]	; (8007050 <__gethex+0x474>)
 8006fec:	e6ab      	b.n	8006d46 <__gethex+0x16a>
 8006fee:	6922      	ldr	r2, [r4, #16]
 8006ff0:	f104 010c 	add.w	r1, r4, #12
 8006ff4:	3202      	adds	r2, #2
 8006ff6:	0092      	lsls	r2, r2, #2
 8006ff8:	300c      	adds	r0, #12
 8006ffa:	f000 f919 	bl	8007230 <memcpy>
 8006ffe:	4621      	mov	r1, r4
 8007000:	9802      	ldr	r0, [sp, #8]
 8007002:	f000 f963 	bl	80072cc <_Bfree>
 8007006:	464c      	mov	r4, r9
 8007008:	6923      	ldr	r3, [r4, #16]
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	6122      	str	r2, [r4, #16]
 800700e:	2201      	movs	r2, #1
 8007010:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007014:	615a      	str	r2, [r3, #20]
 8007016:	e7bd      	b.n	8006f94 <__gethex+0x3b8>
 8007018:	6922      	ldr	r2, [r4, #16]
 800701a:	455a      	cmp	r2, fp
 800701c:	dd0b      	ble.n	8007036 <__gethex+0x45a>
 800701e:	2101      	movs	r1, #1
 8007020:	4620      	mov	r0, r4
 8007022:	f7ff fd73 	bl	8006b0c <rshift>
 8007026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800702a:	3501      	adds	r5, #1
 800702c:	42ab      	cmp	r3, r5
 800702e:	f6ff aed4 	blt.w	8006dda <__gethex+0x1fe>
 8007032:	2701      	movs	r7, #1
 8007034:	e7c2      	b.n	8006fbc <__gethex+0x3e0>
 8007036:	f016 061f 	ands.w	r6, r6, #31
 800703a:	d0fa      	beq.n	8007032 <__gethex+0x456>
 800703c:	4453      	add	r3, sl
 800703e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007042:	f000 f9f5 	bl	8007430 <__hi0bits>
 8007046:	f1c6 0620 	rsb	r6, r6, #32
 800704a:	42b0      	cmp	r0, r6
 800704c:	dbe7      	blt.n	800701e <__gethex+0x442>
 800704e:	e7f0      	b.n	8007032 <__gethex+0x456>
 8007050:	08009f18 	.word	0x08009f18

08007054 <L_shift>:
 8007054:	f1c2 0208 	rsb	r2, r2, #8
 8007058:	0092      	lsls	r2, r2, #2
 800705a:	b570      	push	{r4, r5, r6, lr}
 800705c:	f1c2 0620 	rsb	r6, r2, #32
 8007060:	6843      	ldr	r3, [r0, #4]
 8007062:	6804      	ldr	r4, [r0, #0]
 8007064:	fa03 f506 	lsl.w	r5, r3, r6
 8007068:	432c      	orrs	r4, r5
 800706a:	40d3      	lsrs	r3, r2
 800706c:	6004      	str	r4, [r0, #0]
 800706e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007072:	4288      	cmp	r0, r1
 8007074:	d3f4      	bcc.n	8007060 <L_shift+0xc>
 8007076:	bd70      	pop	{r4, r5, r6, pc}

08007078 <__match>:
 8007078:	b530      	push	{r4, r5, lr}
 800707a:	6803      	ldr	r3, [r0, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007082:	b914      	cbnz	r4, 800708a <__match+0x12>
 8007084:	6003      	str	r3, [r0, #0]
 8007086:	2001      	movs	r0, #1
 8007088:	bd30      	pop	{r4, r5, pc}
 800708a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800708e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007092:	2d19      	cmp	r5, #25
 8007094:	bf98      	it	ls
 8007096:	3220      	addls	r2, #32
 8007098:	42a2      	cmp	r2, r4
 800709a:	d0f0      	beq.n	800707e <__match+0x6>
 800709c:	2000      	movs	r0, #0
 800709e:	e7f3      	b.n	8007088 <__match+0x10>

080070a0 <__hexnan>:
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	2500      	movs	r5, #0
 80070a6:	680b      	ldr	r3, [r1, #0]
 80070a8:	4682      	mov	sl, r0
 80070aa:	115e      	asrs	r6, r3, #5
 80070ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80070b0:	f013 031f 	ands.w	r3, r3, #31
 80070b4:	bf18      	it	ne
 80070b6:	3604      	addne	r6, #4
 80070b8:	1f37      	subs	r7, r6, #4
 80070ba:	46b9      	mov	r9, r7
 80070bc:	463c      	mov	r4, r7
 80070be:	46ab      	mov	fp, r5
 80070c0:	b087      	sub	sp, #28
 80070c2:	4690      	mov	r8, r2
 80070c4:	6802      	ldr	r2, [r0, #0]
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	f846 5c04 	str.w	r5, [r6, #-4]
 80070cc:	9502      	str	r5, [sp, #8]
 80070ce:	7851      	ldrb	r1, [r2, #1]
 80070d0:	1c53      	adds	r3, r2, #1
 80070d2:	9303      	str	r3, [sp, #12]
 80070d4:	b341      	cbz	r1, 8007128 <__hexnan+0x88>
 80070d6:	4608      	mov	r0, r1
 80070d8:	9205      	str	r2, [sp, #20]
 80070da:	9104      	str	r1, [sp, #16]
 80070dc:	f7ff fd69 	bl	8006bb2 <__hexdig_fun>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d14f      	bne.n	8007184 <__hexnan+0xe4>
 80070e4:	9904      	ldr	r1, [sp, #16]
 80070e6:	9a05      	ldr	r2, [sp, #20]
 80070e8:	2920      	cmp	r1, #32
 80070ea:	d818      	bhi.n	800711e <__hexnan+0x7e>
 80070ec:	9b02      	ldr	r3, [sp, #8]
 80070ee:	459b      	cmp	fp, r3
 80070f0:	dd13      	ble.n	800711a <__hexnan+0x7a>
 80070f2:	454c      	cmp	r4, r9
 80070f4:	d206      	bcs.n	8007104 <__hexnan+0x64>
 80070f6:	2d07      	cmp	r5, #7
 80070f8:	dc04      	bgt.n	8007104 <__hexnan+0x64>
 80070fa:	462a      	mov	r2, r5
 80070fc:	4649      	mov	r1, r9
 80070fe:	4620      	mov	r0, r4
 8007100:	f7ff ffa8 	bl	8007054 <L_shift>
 8007104:	4544      	cmp	r4, r8
 8007106:	d950      	bls.n	80071aa <__hexnan+0x10a>
 8007108:	2300      	movs	r3, #0
 800710a:	f1a4 0904 	sub.w	r9, r4, #4
 800710e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007112:	461d      	mov	r5, r3
 8007114:	464c      	mov	r4, r9
 8007116:	f8cd b008 	str.w	fp, [sp, #8]
 800711a:	9a03      	ldr	r2, [sp, #12]
 800711c:	e7d7      	b.n	80070ce <__hexnan+0x2e>
 800711e:	2929      	cmp	r1, #41	; 0x29
 8007120:	d156      	bne.n	80071d0 <__hexnan+0x130>
 8007122:	3202      	adds	r2, #2
 8007124:	f8ca 2000 	str.w	r2, [sl]
 8007128:	f1bb 0f00 	cmp.w	fp, #0
 800712c:	d050      	beq.n	80071d0 <__hexnan+0x130>
 800712e:	454c      	cmp	r4, r9
 8007130:	d206      	bcs.n	8007140 <__hexnan+0xa0>
 8007132:	2d07      	cmp	r5, #7
 8007134:	dc04      	bgt.n	8007140 <__hexnan+0xa0>
 8007136:	462a      	mov	r2, r5
 8007138:	4649      	mov	r1, r9
 800713a:	4620      	mov	r0, r4
 800713c:	f7ff ff8a 	bl	8007054 <L_shift>
 8007140:	4544      	cmp	r4, r8
 8007142:	d934      	bls.n	80071ae <__hexnan+0x10e>
 8007144:	4623      	mov	r3, r4
 8007146:	f1a8 0204 	sub.w	r2, r8, #4
 800714a:	f853 1b04 	ldr.w	r1, [r3], #4
 800714e:	429f      	cmp	r7, r3
 8007150:	f842 1f04 	str.w	r1, [r2, #4]!
 8007154:	d2f9      	bcs.n	800714a <__hexnan+0xaa>
 8007156:	1b3b      	subs	r3, r7, r4
 8007158:	f023 0303 	bic.w	r3, r3, #3
 800715c:	3304      	adds	r3, #4
 800715e:	3401      	adds	r4, #1
 8007160:	3e03      	subs	r6, #3
 8007162:	42b4      	cmp	r4, r6
 8007164:	bf88      	it	hi
 8007166:	2304      	movhi	r3, #4
 8007168:	2200      	movs	r2, #0
 800716a:	4443      	add	r3, r8
 800716c:	f843 2b04 	str.w	r2, [r3], #4
 8007170:	429f      	cmp	r7, r3
 8007172:	d2fb      	bcs.n	800716c <__hexnan+0xcc>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	b91b      	cbnz	r3, 8007180 <__hexnan+0xe0>
 8007178:	4547      	cmp	r7, r8
 800717a:	d127      	bne.n	80071cc <__hexnan+0x12c>
 800717c:	2301      	movs	r3, #1
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	2005      	movs	r0, #5
 8007182:	e026      	b.n	80071d2 <__hexnan+0x132>
 8007184:	3501      	adds	r5, #1
 8007186:	2d08      	cmp	r5, #8
 8007188:	f10b 0b01 	add.w	fp, fp, #1
 800718c:	dd06      	ble.n	800719c <__hexnan+0xfc>
 800718e:	4544      	cmp	r4, r8
 8007190:	d9c3      	bls.n	800711a <__hexnan+0x7a>
 8007192:	2300      	movs	r3, #0
 8007194:	2501      	movs	r5, #1
 8007196:	f844 3c04 	str.w	r3, [r4, #-4]
 800719a:	3c04      	subs	r4, #4
 800719c:	6822      	ldr	r2, [r4, #0]
 800719e:	f000 000f 	and.w	r0, r0, #15
 80071a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80071a6:	6022      	str	r2, [r4, #0]
 80071a8:	e7b7      	b.n	800711a <__hexnan+0x7a>
 80071aa:	2508      	movs	r5, #8
 80071ac:	e7b5      	b.n	800711a <__hexnan+0x7a>
 80071ae:	9b01      	ldr	r3, [sp, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0df      	beq.n	8007174 <__hexnan+0xd4>
 80071b4:	f04f 32ff 	mov.w	r2, #4294967295
 80071b8:	f1c3 0320 	rsb	r3, r3, #32
 80071bc:	fa22 f303 	lsr.w	r3, r2, r3
 80071c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80071c4:	401a      	ands	r2, r3
 80071c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80071ca:	e7d3      	b.n	8007174 <__hexnan+0xd4>
 80071cc:	3f04      	subs	r7, #4
 80071ce:	e7d1      	b.n	8007174 <__hexnan+0xd4>
 80071d0:	2004      	movs	r0, #4
 80071d2:	b007      	add	sp, #28
 80071d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080071d8 <_localeconv_r>:
 80071d8:	4800      	ldr	r0, [pc, #0]	; (80071dc <_localeconv_r+0x4>)
 80071da:	4770      	bx	lr
 80071dc:	2000016c 	.word	0x2000016c

080071e0 <malloc>:
 80071e0:	4b02      	ldr	r3, [pc, #8]	; (80071ec <malloc+0xc>)
 80071e2:	4601      	mov	r1, r0
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	f000 bd65 	b.w	8007cb4 <_malloc_r>
 80071ea:	bf00      	nop
 80071ec:	20000014 	.word	0x20000014

080071f0 <__ascii_mbtowc>:
 80071f0:	b082      	sub	sp, #8
 80071f2:	b901      	cbnz	r1, 80071f6 <__ascii_mbtowc+0x6>
 80071f4:	a901      	add	r1, sp, #4
 80071f6:	b142      	cbz	r2, 800720a <__ascii_mbtowc+0x1a>
 80071f8:	b14b      	cbz	r3, 800720e <__ascii_mbtowc+0x1e>
 80071fa:	7813      	ldrb	r3, [r2, #0]
 80071fc:	600b      	str	r3, [r1, #0]
 80071fe:	7812      	ldrb	r2, [r2, #0]
 8007200:	1e10      	subs	r0, r2, #0
 8007202:	bf18      	it	ne
 8007204:	2001      	movne	r0, #1
 8007206:	b002      	add	sp, #8
 8007208:	4770      	bx	lr
 800720a:	4610      	mov	r0, r2
 800720c:	e7fb      	b.n	8007206 <__ascii_mbtowc+0x16>
 800720e:	f06f 0001 	mvn.w	r0, #1
 8007212:	e7f8      	b.n	8007206 <__ascii_mbtowc+0x16>

08007214 <memchr>:
 8007214:	4603      	mov	r3, r0
 8007216:	b510      	push	{r4, lr}
 8007218:	b2c9      	uxtb	r1, r1
 800721a:	4402      	add	r2, r0
 800721c:	4293      	cmp	r3, r2
 800721e:	4618      	mov	r0, r3
 8007220:	d101      	bne.n	8007226 <memchr+0x12>
 8007222:	2000      	movs	r0, #0
 8007224:	e003      	b.n	800722e <memchr+0x1a>
 8007226:	7804      	ldrb	r4, [r0, #0]
 8007228:	3301      	adds	r3, #1
 800722a:	428c      	cmp	r4, r1
 800722c:	d1f6      	bne.n	800721c <memchr+0x8>
 800722e:	bd10      	pop	{r4, pc}

08007230 <memcpy>:
 8007230:	440a      	add	r2, r1
 8007232:	4291      	cmp	r1, r2
 8007234:	f100 33ff 	add.w	r3, r0, #4294967295
 8007238:	d100      	bne.n	800723c <memcpy+0xc>
 800723a:	4770      	bx	lr
 800723c:	b510      	push	{r4, lr}
 800723e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007242:	4291      	cmp	r1, r2
 8007244:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007248:	d1f9      	bne.n	800723e <memcpy+0xe>
 800724a:	bd10      	pop	{r4, pc}

0800724c <_Balloc>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007250:	4604      	mov	r4, r0
 8007252:	460d      	mov	r5, r1
 8007254:	b976      	cbnz	r6, 8007274 <_Balloc+0x28>
 8007256:	2010      	movs	r0, #16
 8007258:	f7ff ffc2 	bl	80071e0 <malloc>
 800725c:	4602      	mov	r2, r0
 800725e:	6260      	str	r0, [r4, #36]	; 0x24
 8007260:	b920      	cbnz	r0, 800726c <_Balloc+0x20>
 8007262:	2166      	movs	r1, #102	; 0x66
 8007264:	4b17      	ldr	r3, [pc, #92]	; (80072c4 <_Balloc+0x78>)
 8007266:	4818      	ldr	r0, [pc, #96]	; (80072c8 <_Balloc+0x7c>)
 8007268:	f000 ff2c 	bl	80080c4 <__assert_func>
 800726c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007270:	6006      	str	r6, [r0, #0]
 8007272:	60c6      	str	r6, [r0, #12]
 8007274:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007276:	68f3      	ldr	r3, [r6, #12]
 8007278:	b183      	cbz	r3, 800729c <_Balloc+0x50>
 800727a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007282:	b9b8      	cbnz	r0, 80072b4 <_Balloc+0x68>
 8007284:	2101      	movs	r1, #1
 8007286:	fa01 f605 	lsl.w	r6, r1, r5
 800728a:	1d72      	adds	r2, r6, #5
 800728c:	4620      	mov	r0, r4
 800728e:	0092      	lsls	r2, r2, #2
 8007290:	f000 fc94 	bl	8007bbc <_calloc_r>
 8007294:	b160      	cbz	r0, 80072b0 <_Balloc+0x64>
 8007296:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800729a:	e00e      	b.n	80072ba <_Balloc+0x6e>
 800729c:	2221      	movs	r2, #33	; 0x21
 800729e:	2104      	movs	r1, #4
 80072a0:	4620      	mov	r0, r4
 80072a2:	f000 fc8b 	bl	8007bbc <_calloc_r>
 80072a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072a8:	60f0      	str	r0, [r6, #12]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e4      	bne.n	800727a <_Balloc+0x2e>
 80072b0:	2000      	movs	r0, #0
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	6802      	ldr	r2, [r0, #0]
 80072b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072ba:	2300      	movs	r3, #0
 80072bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072c0:	e7f7      	b.n	80072b2 <_Balloc+0x66>
 80072c2:	bf00      	nop
 80072c4:	08009ea6 	.word	0x08009ea6
 80072c8:	08009fa4 	.word	0x08009fa4

080072cc <_Bfree>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072d0:	4605      	mov	r5, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	b976      	cbnz	r6, 80072f4 <_Bfree+0x28>
 80072d6:	2010      	movs	r0, #16
 80072d8:	f7ff ff82 	bl	80071e0 <malloc>
 80072dc:	4602      	mov	r2, r0
 80072de:	6268      	str	r0, [r5, #36]	; 0x24
 80072e0:	b920      	cbnz	r0, 80072ec <_Bfree+0x20>
 80072e2:	218a      	movs	r1, #138	; 0x8a
 80072e4:	4b08      	ldr	r3, [pc, #32]	; (8007308 <_Bfree+0x3c>)
 80072e6:	4809      	ldr	r0, [pc, #36]	; (800730c <_Bfree+0x40>)
 80072e8:	f000 feec 	bl	80080c4 <__assert_func>
 80072ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072f0:	6006      	str	r6, [r0, #0]
 80072f2:	60c6      	str	r6, [r0, #12]
 80072f4:	b13c      	cbz	r4, 8007306 <_Bfree+0x3a>
 80072f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072f8:	6862      	ldr	r2, [r4, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007300:	6021      	str	r1, [r4, #0]
 8007302:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	08009ea6 	.word	0x08009ea6
 800730c:	08009fa4 	.word	0x08009fa4

08007310 <__multadd>:
 8007310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	4607      	mov	r7, r0
 8007316:	460c      	mov	r4, r1
 8007318:	461e      	mov	r6, r3
 800731a:	2000      	movs	r0, #0
 800731c:	690d      	ldr	r5, [r1, #16]
 800731e:	f101 0c14 	add.w	ip, r1, #20
 8007322:	f8dc 3000 	ldr.w	r3, [ip]
 8007326:	3001      	adds	r0, #1
 8007328:	b299      	uxth	r1, r3
 800732a:	fb02 6101 	mla	r1, r2, r1, r6
 800732e:	0c1e      	lsrs	r6, r3, #16
 8007330:	0c0b      	lsrs	r3, r1, #16
 8007332:	fb02 3306 	mla	r3, r2, r6, r3
 8007336:	b289      	uxth	r1, r1
 8007338:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800733c:	4285      	cmp	r5, r0
 800733e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007342:	f84c 1b04 	str.w	r1, [ip], #4
 8007346:	dcec      	bgt.n	8007322 <__multadd+0x12>
 8007348:	b30e      	cbz	r6, 800738e <__multadd+0x7e>
 800734a:	68a3      	ldr	r3, [r4, #8]
 800734c:	42ab      	cmp	r3, r5
 800734e:	dc19      	bgt.n	8007384 <__multadd+0x74>
 8007350:	6861      	ldr	r1, [r4, #4]
 8007352:	4638      	mov	r0, r7
 8007354:	3101      	adds	r1, #1
 8007356:	f7ff ff79 	bl	800724c <_Balloc>
 800735a:	4680      	mov	r8, r0
 800735c:	b928      	cbnz	r0, 800736a <__multadd+0x5a>
 800735e:	4602      	mov	r2, r0
 8007360:	21b5      	movs	r1, #181	; 0xb5
 8007362:	4b0c      	ldr	r3, [pc, #48]	; (8007394 <__multadd+0x84>)
 8007364:	480c      	ldr	r0, [pc, #48]	; (8007398 <__multadd+0x88>)
 8007366:	f000 fead 	bl	80080c4 <__assert_func>
 800736a:	6922      	ldr	r2, [r4, #16]
 800736c:	f104 010c 	add.w	r1, r4, #12
 8007370:	3202      	adds	r2, #2
 8007372:	0092      	lsls	r2, r2, #2
 8007374:	300c      	adds	r0, #12
 8007376:	f7ff ff5b 	bl	8007230 <memcpy>
 800737a:	4621      	mov	r1, r4
 800737c:	4638      	mov	r0, r7
 800737e:	f7ff ffa5 	bl	80072cc <_Bfree>
 8007382:	4644      	mov	r4, r8
 8007384:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007388:	3501      	adds	r5, #1
 800738a:	615e      	str	r6, [r3, #20]
 800738c:	6125      	str	r5, [r4, #16]
 800738e:	4620      	mov	r0, r4
 8007390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007394:	08009f18 	.word	0x08009f18
 8007398:	08009fa4 	.word	0x08009fa4

0800739c <__s2b>:
 800739c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a0:	4615      	mov	r5, r2
 80073a2:	2209      	movs	r2, #9
 80073a4:	461f      	mov	r7, r3
 80073a6:	3308      	adds	r3, #8
 80073a8:	460c      	mov	r4, r1
 80073aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80073ae:	4606      	mov	r6, r0
 80073b0:	2201      	movs	r2, #1
 80073b2:	2100      	movs	r1, #0
 80073b4:	429a      	cmp	r2, r3
 80073b6:	db09      	blt.n	80073cc <__s2b+0x30>
 80073b8:	4630      	mov	r0, r6
 80073ba:	f7ff ff47 	bl	800724c <_Balloc>
 80073be:	b940      	cbnz	r0, 80073d2 <__s2b+0x36>
 80073c0:	4602      	mov	r2, r0
 80073c2:	21ce      	movs	r1, #206	; 0xce
 80073c4:	4b18      	ldr	r3, [pc, #96]	; (8007428 <__s2b+0x8c>)
 80073c6:	4819      	ldr	r0, [pc, #100]	; (800742c <__s2b+0x90>)
 80073c8:	f000 fe7c 	bl	80080c4 <__assert_func>
 80073cc:	0052      	lsls	r2, r2, #1
 80073ce:	3101      	adds	r1, #1
 80073d0:	e7f0      	b.n	80073b4 <__s2b+0x18>
 80073d2:	9b08      	ldr	r3, [sp, #32]
 80073d4:	2d09      	cmp	r5, #9
 80073d6:	6143      	str	r3, [r0, #20]
 80073d8:	f04f 0301 	mov.w	r3, #1
 80073dc:	6103      	str	r3, [r0, #16]
 80073de:	dd16      	ble.n	800740e <__s2b+0x72>
 80073e0:	f104 0909 	add.w	r9, r4, #9
 80073e4:	46c8      	mov	r8, r9
 80073e6:	442c      	add	r4, r5
 80073e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80073ec:	4601      	mov	r1, r0
 80073ee:	220a      	movs	r2, #10
 80073f0:	4630      	mov	r0, r6
 80073f2:	3b30      	subs	r3, #48	; 0x30
 80073f4:	f7ff ff8c 	bl	8007310 <__multadd>
 80073f8:	45a0      	cmp	r8, r4
 80073fa:	d1f5      	bne.n	80073e8 <__s2b+0x4c>
 80073fc:	f1a5 0408 	sub.w	r4, r5, #8
 8007400:	444c      	add	r4, r9
 8007402:	1b2d      	subs	r5, r5, r4
 8007404:	1963      	adds	r3, r4, r5
 8007406:	42bb      	cmp	r3, r7
 8007408:	db04      	blt.n	8007414 <__s2b+0x78>
 800740a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800740e:	2509      	movs	r5, #9
 8007410:	340a      	adds	r4, #10
 8007412:	e7f6      	b.n	8007402 <__s2b+0x66>
 8007414:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007418:	4601      	mov	r1, r0
 800741a:	220a      	movs	r2, #10
 800741c:	4630      	mov	r0, r6
 800741e:	3b30      	subs	r3, #48	; 0x30
 8007420:	f7ff ff76 	bl	8007310 <__multadd>
 8007424:	e7ee      	b.n	8007404 <__s2b+0x68>
 8007426:	bf00      	nop
 8007428:	08009f18 	.word	0x08009f18
 800742c:	08009fa4 	.word	0x08009fa4

08007430 <__hi0bits>:
 8007430:	0c02      	lsrs	r2, r0, #16
 8007432:	0412      	lsls	r2, r2, #16
 8007434:	4603      	mov	r3, r0
 8007436:	b9ca      	cbnz	r2, 800746c <__hi0bits+0x3c>
 8007438:	0403      	lsls	r3, r0, #16
 800743a:	2010      	movs	r0, #16
 800743c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007440:	bf04      	itt	eq
 8007442:	021b      	lsleq	r3, r3, #8
 8007444:	3008      	addeq	r0, #8
 8007446:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800744a:	bf04      	itt	eq
 800744c:	011b      	lsleq	r3, r3, #4
 800744e:	3004      	addeq	r0, #4
 8007450:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007454:	bf04      	itt	eq
 8007456:	009b      	lsleq	r3, r3, #2
 8007458:	3002      	addeq	r0, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	db05      	blt.n	800746a <__hi0bits+0x3a>
 800745e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007462:	f100 0001 	add.w	r0, r0, #1
 8007466:	bf08      	it	eq
 8007468:	2020      	moveq	r0, #32
 800746a:	4770      	bx	lr
 800746c:	2000      	movs	r0, #0
 800746e:	e7e5      	b.n	800743c <__hi0bits+0xc>

08007470 <__lo0bits>:
 8007470:	6803      	ldr	r3, [r0, #0]
 8007472:	4602      	mov	r2, r0
 8007474:	f013 0007 	ands.w	r0, r3, #7
 8007478:	d00b      	beq.n	8007492 <__lo0bits+0x22>
 800747a:	07d9      	lsls	r1, r3, #31
 800747c:	d421      	bmi.n	80074c2 <__lo0bits+0x52>
 800747e:	0798      	lsls	r0, r3, #30
 8007480:	bf49      	itett	mi
 8007482:	085b      	lsrmi	r3, r3, #1
 8007484:	089b      	lsrpl	r3, r3, #2
 8007486:	2001      	movmi	r0, #1
 8007488:	6013      	strmi	r3, [r2, #0]
 800748a:	bf5c      	itt	pl
 800748c:	2002      	movpl	r0, #2
 800748e:	6013      	strpl	r3, [r2, #0]
 8007490:	4770      	bx	lr
 8007492:	b299      	uxth	r1, r3
 8007494:	b909      	cbnz	r1, 800749a <__lo0bits+0x2a>
 8007496:	2010      	movs	r0, #16
 8007498:	0c1b      	lsrs	r3, r3, #16
 800749a:	b2d9      	uxtb	r1, r3
 800749c:	b909      	cbnz	r1, 80074a2 <__lo0bits+0x32>
 800749e:	3008      	adds	r0, #8
 80074a0:	0a1b      	lsrs	r3, r3, #8
 80074a2:	0719      	lsls	r1, r3, #28
 80074a4:	bf04      	itt	eq
 80074a6:	091b      	lsreq	r3, r3, #4
 80074a8:	3004      	addeq	r0, #4
 80074aa:	0799      	lsls	r1, r3, #30
 80074ac:	bf04      	itt	eq
 80074ae:	089b      	lsreq	r3, r3, #2
 80074b0:	3002      	addeq	r0, #2
 80074b2:	07d9      	lsls	r1, r3, #31
 80074b4:	d403      	bmi.n	80074be <__lo0bits+0x4e>
 80074b6:	085b      	lsrs	r3, r3, #1
 80074b8:	f100 0001 	add.w	r0, r0, #1
 80074bc:	d003      	beq.n	80074c6 <__lo0bits+0x56>
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	4770      	bx	lr
 80074c2:	2000      	movs	r0, #0
 80074c4:	4770      	bx	lr
 80074c6:	2020      	movs	r0, #32
 80074c8:	4770      	bx	lr
	...

080074cc <__i2b>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	460c      	mov	r4, r1
 80074d0:	2101      	movs	r1, #1
 80074d2:	f7ff febb 	bl	800724c <_Balloc>
 80074d6:	4602      	mov	r2, r0
 80074d8:	b928      	cbnz	r0, 80074e6 <__i2b+0x1a>
 80074da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80074de:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <__i2b+0x24>)
 80074e0:	4804      	ldr	r0, [pc, #16]	; (80074f4 <__i2b+0x28>)
 80074e2:	f000 fdef 	bl	80080c4 <__assert_func>
 80074e6:	2301      	movs	r3, #1
 80074e8:	6144      	str	r4, [r0, #20]
 80074ea:	6103      	str	r3, [r0, #16]
 80074ec:	bd10      	pop	{r4, pc}
 80074ee:	bf00      	nop
 80074f0:	08009f18 	.word	0x08009f18
 80074f4:	08009fa4 	.word	0x08009fa4

080074f8 <__multiply>:
 80074f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	4691      	mov	r9, r2
 80074fe:	690a      	ldr	r2, [r1, #16]
 8007500:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007504:	460c      	mov	r4, r1
 8007506:	429a      	cmp	r2, r3
 8007508:	bfbe      	ittt	lt
 800750a:	460b      	movlt	r3, r1
 800750c:	464c      	movlt	r4, r9
 800750e:	4699      	movlt	r9, r3
 8007510:	6927      	ldr	r7, [r4, #16]
 8007512:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007516:	68a3      	ldr	r3, [r4, #8]
 8007518:	6861      	ldr	r1, [r4, #4]
 800751a:	eb07 060a 	add.w	r6, r7, sl
 800751e:	42b3      	cmp	r3, r6
 8007520:	b085      	sub	sp, #20
 8007522:	bfb8      	it	lt
 8007524:	3101      	addlt	r1, #1
 8007526:	f7ff fe91 	bl	800724c <_Balloc>
 800752a:	b930      	cbnz	r0, 800753a <__multiply+0x42>
 800752c:	4602      	mov	r2, r0
 800752e:	f240 115d 	movw	r1, #349	; 0x15d
 8007532:	4b43      	ldr	r3, [pc, #268]	; (8007640 <__multiply+0x148>)
 8007534:	4843      	ldr	r0, [pc, #268]	; (8007644 <__multiply+0x14c>)
 8007536:	f000 fdc5 	bl	80080c4 <__assert_func>
 800753a:	f100 0514 	add.w	r5, r0, #20
 800753e:	462b      	mov	r3, r5
 8007540:	2200      	movs	r2, #0
 8007542:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007546:	4543      	cmp	r3, r8
 8007548:	d321      	bcc.n	800758e <__multiply+0x96>
 800754a:	f104 0314 	add.w	r3, r4, #20
 800754e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007552:	f109 0314 	add.w	r3, r9, #20
 8007556:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800755a:	9202      	str	r2, [sp, #8]
 800755c:	1b3a      	subs	r2, r7, r4
 800755e:	3a15      	subs	r2, #21
 8007560:	f022 0203 	bic.w	r2, r2, #3
 8007564:	3204      	adds	r2, #4
 8007566:	f104 0115 	add.w	r1, r4, #21
 800756a:	428f      	cmp	r7, r1
 800756c:	bf38      	it	cc
 800756e:	2204      	movcc	r2, #4
 8007570:	9201      	str	r2, [sp, #4]
 8007572:	9a02      	ldr	r2, [sp, #8]
 8007574:	9303      	str	r3, [sp, #12]
 8007576:	429a      	cmp	r2, r3
 8007578:	d80c      	bhi.n	8007594 <__multiply+0x9c>
 800757a:	2e00      	cmp	r6, #0
 800757c:	dd03      	ble.n	8007586 <__multiply+0x8e>
 800757e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007582:	2b00      	cmp	r3, #0
 8007584:	d059      	beq.n	800763a <__multiply+0x142>
 8007586:	6106      	str	r6, [r0, #16]
 8007588:	b005      	add	sp, #20
 800758a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758e:	f843 2b04 	str.w	r2, [r3], #4
 8007592:	e7d8      	b.n	8007546 <__multiply+0x4e>
 8007594:	f8b3 a000 	ldrh.w	sl, [r3]
 8007598:	f1ba 0f00 	cmp.w	sl, #0
 800759c:	d023      	beq.n	80075e6 <__multiply+0xee>
 800759e:	46a9      	mov	r9, r5
 80075a0:	f04f 0c00 	mov.w	ip, #0
 80075a4:	f104 0e14 	add.w	lr, r4, #20
 80075a8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80075ac:	f8d9 1000 	ldr.w	r1, [r9]
 80075b0:	fa1f fb82 	uxth.w	fp, r2
 80075b4:	b289      	uxth	r1, r1
 80075b6:	fb0a 110b 	mla	r1, sl, fp, r1
 80075ba:	4461      	add	r1, ip
 80075bc:	f8d9 c000 	ldr.w	ip, [r9]
 80075c0:	0c12      	lsrs	r2, r2, #16
 80075c2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80075c6:	fb0a c202 	mla	r2, sl, r2, ip
 80075ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075ce:	b289      	uxth	r1, r1
 80075d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075d4:	4577      	cmp	r7, lr
 80075d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075da:	f849 1b04 	str.w	r1, [r9], #4
 80075de:	d8e3      	bhi.n	80075a8 <__multiply+0xb0>
 80075e0:	9a01      	ldr	r2, [sp, #4]
 80075e2:	f845 c002 	str.w	ip, [r5, r2]
 80075e6:	9a03      	ldr	r2, [sp, #12]
 80075e8:	3304      	adds	r3, #4
 80075ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075ee:	f1b9 0f00 	cmp.w	r9, #0
 80075f2:	d020      	beq.n	8007636 <__multiply+0x13e>
 80075f4:	46ae      	mov	lr, r5
 80075f6:	f04f 0a00 	mov.w	sl, #0
 80075fa:	6829      	ldr	r1, [r5, #0]
 80075fc:	f104 0c14 	add.w	ip, r4, #20
 8007600:	f8bc b000 	ldrh.w	fp, [ip]
 8007604:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007608:	b289      	uxth	r1, r1
 800760a:	fb09 220b 	mla	r2, r9, fp, r2
 800760e:	4492      	add	sl, r2
 8007610:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007614:	f84e 1b04 	str.w	r1, [lr], #4
 8007618:	f85c 2b04 	ldr.w	r2, [ip], #4
 800761c:	f8be 1000 	ldrh.w	r1, [lr]
 8007620:	0c12      	lsrs	r2, r2, #16
 8007622:	fb09 1102 	mla	r1, r9, r2, r1
 8007626:	4567      	cmp	r7, ip
 8007628:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800762c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007630:	d8e6      	bhi.n	8007600 <__multiply+0x108>
 8007632:	9a01      	ldr	r2, [sp, #4]
 8007634:	50a9      	str	r1, [r5, r2]
 8007636:	3504      	adds	r5, #4
 8007638:	e79b      	b.n	8007572 <__multiply+0x7a>
 800763a:	3e01      	subs	r6, #1
 800763c:	e79d      	b.n	800757a <__multiply+0x82>
 800763e:	bf00      	nop
 8007640:	08009f18 	.word	0x08009f18
 8007644:	08009fa4 	.word	0x08009fa4

08007648 <__pow5mult>:
 8007648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800764c:	4615      	mov	r5, r2
 800764e:	f012 0203 	ands.w	r2, r2, #3
 8007652:	4606      	mov	r6, r0
 8007654:	460f      	mov	r7, r1
 8007656:	d007      	beq.n	8007668 <__pow5mult+0x20>
 8007658:	4c25      	ldr	r4, [pc, #148]	; (80076f0 <__pow5mult+0xa8>)
 800765a:	3a01      	subs	r2, #1
 800765c:	2300      	movs	r3, #0
 800765e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007662:	f7ff fe55 	bl	8007310 <__multadd>
 8007666:	4607      	mov	r7, r0
 8007668:	10ad      	asrs	r5, r5, #2
 800766a:	d03d      	beq.n	80076e8 <__pow5mult+0xa0>
 800766c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800766e:	b97c      	cbnz	r4, 8007690 <__pow5mult+0x48>
 8007670:	2010      	movs	r0, #16
 8007672:	f7ff fdb5 	bl	80071e0 <malloc>
 8007676:	4602      	mov	r2, r0
 8007678:	6270      	str	r0, [r6, #36]	; 0x24
 800767a:	b928      	cbnz	r0, 8007688 <__pow5mult+0x40>
 800767c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007680:	4b1c      	ldr	r3, [pc, #112]	; (80076f4 <__pow5mult+0xac>)
 8007682:	481d      	ldr	r0, [pc, #116]	; (80076f8 <__pow5mult+0xb0>)
 8007684:	f000 fd1e 	bl	80080c4 <__assert_func>
 8007688:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800768c:	6004      	str	r4, [r0, #0]
 800768e:	60c4      	str	r4, [r0, #12]
 8007690:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007698:	b94c      	cbnz	r4, 80076ae <__pow5mult+0x66>
 800769a:	f240 2171 	movw	r1, #625	; 0x271
 800769e:	4630      	mov	r0, r6
 80076a0:	f7ff ff14 	bl	80074cc <__i2b>
 80076a4:	2300      	movs	r3, #0
 80076a6:	4604      	mov	r4, r0
 80076a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80076ac:	6003      	str	r3, [r0, #0]
 80076ae:	f04f 0900 	mov.w	r9, #0
 80076b2:	07eb      	lsls	r3, r5, #31
 80076b4:	d50a      	bpl.n	80076cc <__pow5mult+0x84>
 80076b6:	4639      	mov	r1, r7
 80076b8:	4622      	mov	r2, r4
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7ff ff1c 	bl	80074f8 <__multiply>
 80076c0:	4680      	mov	r8, r0
 80076c2:	4639      	mov	r1, r7
 80076c4:	4630      	mov	r0, r6
 80076c6:	f7ff fe01 	bl	80072cc <_Bfree>
 80076ca:	4647      	mov	r7, r8
 80076cc:	106d      	asrs	r5, r5, #1
 80076ce:	d00b      	beq.n	80076e8 <__pow5mult+0xa0>
 80076d0:	6820      	ldr	r0, [r4, #0]
 80076d2:	b938      	cbnz	r0, 80076e4 <__pow5mult+0x9c>
 80076d4:	4622      	mov	r2, r4
 80076d6:	4621      	mov	r1, r4
 80076d8:	4630      	mov	r0, r6
 80076da:	f7ff ff0d 	bl	80074f8 <__multiply>
 80076de:	6020      	str	r0, [r4, #0]
 80076e0:	f8c0 9000 	str.w	r9, [r0]
 80076e4:	4604      	mov	r4, r0
 80076e6:	e7e4      	b.n	80076b2 <__pow5mult+0x6a>
 80076e8:	4638      	mov	r0, r7
 80076ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ee:	bf00      	nop
 80076f0:	0800a0f0 	.word	0x0800a0f0
 80076f4:	08009ea6 	.word	0x08009ea6
 80076f8:	08009fa4 	.word	0x08009fa4

080076fc <__lshift>:
 80076fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007700:	460c      	mov	r4, r1
 8007702:	4607      	mov	r7, r0
 8007704:	4691      	mov	r9, r2
 8007706:	6923      	ldr	r3, [r4, #16]
 8007708:	6849      	ldr	r1, [r1, #4]
 800770a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800770e:	68a3      	ldr	r3, [r4, #8]
 8007710:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007714:	f108 0601 	add.w	r6, r8, #1
 8007718:	42b3      	cmp	r3, r6
 800771a:	db0b      	blt.n	8007734 <__lshift+0x38>
 800771c:	4638      	mov	r0, r7
 800771e:	f7ff fd95 	bl	800724c <_Balloc>
 8007722:	4605      	mov	r5, r0
 8007724:	b948      	cbnz	r0, 800773a <__lshift+0x3e>
 8007726:	4602      	mov	r2, r0
 8007728:	f240 11d9 	movw	r1, #473	; 0x1d9
 800772c:	4b29      	ldr	r3, [pc, #164]	; (80077d4 <__lshift+0xd8>)
 800772e:	482a      	ldr	r0, [pc, #168]	; (80077d8 <__lshift+0xdc>)
 8007730:	f000 fcc8 	bl	80080c4 <__assert_func>
 8007734:	3101      	adds	r1, #1
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	e7ee      	b.n	8007718 <__lshift+0x1c>
 800773a:	2300      	movs	r3, #0
 800773c:	f100 0114 	add.w	r1, r0, #20
 8007740:	f100 0210 	add.w	r2, r0, #16
 8007744:	4618      	mov	r0, r3
 8007746:	4553      	cmp	r3, sl
 8007748:	db37      	blt.n	80077ba <__lshift+0xbe>
 800774a:	6920      	ldr	r0, [r4, #16]
 800774c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007750:	f104 0314 	add.w	r3, r4, #20
 8007754:	f019 091f 	ands.w	r9, r9, #31
 8007758:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800775c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007760:	d02f      	beq.n	80077c2 <__lshift+0xc6>
 8007762:	468a      	mov	sl, r1
 8007764:	f04f 0c00 	mov.w	ip, #0
 8007768:	f1c9 0e20 	rsb	lr, r9, #32
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	fa02 f209 	lsl.w	r2, r2, r9
 8007772:	ea42 020c 	orr.w	r2, r2, ip
 8007776:	f84a 2b04 	str.w	r2, [sl], #4
 800777a:	f853 2b04 	ldr.w	r2, [r3], #4
 800777e:	4298      	cmp	r0, r3
 8007780:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007784:	d8f2      	bhi.n	800776c <__lshift+0x70>
 8007786:	1b03      	subs	r3, r0, r4
 8007788:	3b15      	subs	r3, #21
 800778a:	f023 0303 	bic.w	r3, r3, #3
 800778e:	3304      	adds	r3, #4
 8007790:	f104 0215 	add.w	r2, r4, #21
 8007794:	4290      	cmp	r0, r2
 8007796:	bf38      	it	cc
 8007798:	2304      	movcc	r3, #4
 800779a:	f841 c003 	str.w	ip, [r1, r3]
 800779e:	f1bc 0f00 	cmp.w	ip, #0
 80077a2:	d001      	beq.n	80077a8 <__lshift+0xac>
 80077a4:	f108 0602 	add.w	r6, r8, #2
 80077a8:	3e01      	subs	r6, #1
 80077aa:	4638      	mov	r0, r7
 80077ac:	4621      	mov	r1, r4
 80077ae:	612e      	str	r6, [r5, #16]
 80077b0:	f7ff fd8c 	bl	80072cc <_Bfree>
 80077b4:	4628      	mov	r0, r5
 80077b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80077be:	3301      	adds	r3, #1
 80077c0:	e7c1      	b.n	8007746 <__lshift+0x4a>
 80077c2:	3904      	subs	r1, #4
 80077c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c8:	4298      	cmp	r0, r3
 80077ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80077ce:	d8f9      	bhi.n	80077c4 <__lshift+0xc8>
 80077d0:	e7ea      	b.n	80077a8 <__lshift+0xac>
 80077d2:	bf00      	nop
 80077d4:	08009f18 	.word	0x08009f18
 80077d8:	08009fa4 	.word	0x08009fa4

080077dc <__mcmp>:
 80077dc:	4603      	mov	r3, r0
 80077de:	690a      	ldr	r2, [r1, #16]
 80077e0:	6900      	ldr	r0, [r0, #16]
 80077e2:	b530      	push	{r4, r5, lr}
 80077e4:	1a80      	subs	r0, r0, r2
 80077e6:	d10d      	bne.n	8007804 <__mcmp+0x28>
 80077e8:	3314      	adds	r3, #20
 80077ea:	3114      	adds	r1, #20
 80077ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077fc:	4295      	cmp	r5, r2
 80077fe:	d002      	beq.n	8007806 <__mcmp+0x2a>
 8007800:	d304      	bcc.n	800780c <__mcmp+0x30>
 8007802:	2001      	movs	r0, #1
 8007804:	bd30      	pop	{r4, r5, pc}
 8007806:	42a3      	cmp	r3, r4
 8007808:	d3f4      	bcc.n	80077f4 <__mcmp+0x18>
 800780a:	e7fb      	b.n	8007804 <__mcmp+0x28>
 800780c:	f04f 30ff 	mov.w	r0, #4294967295
 8007810:	e7f8      	b.n	8007804 <__mcmp+0x28>
	...

08007814 <__mdiff>:
 8007814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	460d      	mov	r5, r1
 800781a:	4607      	mov	r7, r0
 800781c:	4611      	mov	r1, r2
 800781e:	4628      	mov	r0, r5
 8007820:	4614      	mov	r4, r2
 8007822:	f7ff ffdb 	bl	80077dc <__mcmp>
 8007826:	1e06      	subs	r6, r0, #0
 8007828:	d111      	bne.n	800784e <__mdiff+0x3a>
 800782a:	4631      	mov	r1, r6
 800782c:	4638      	mov	r0, r7
 800782e:	f7ff fd0d 	bl	800724c <_Balloc>
 8007832:	4602      	mov	r2, r0
 8007834:	b928      	cbnz	r0, 8007842 <__mdiff+0x2e>
 8007836:	f240 2132 	movw	r1, #562	; 0x232
 800783a:	4b3a      	ldr	r3, [pc, #232]	; (8007924 <__mdiff+0x110>)
 800783c:	483a      	ldr	r0, [pc, #232]	; (8007928 <__mdiff+0x114>)
 800783e:	f000 fc41 	bl	80080c4 <__assert_func>
 8007842:	2301      	movs	r3, #1
 8007844:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007848:	4610      	mov	r0, r2
 800784a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800784e:	bfa4      	itt	ge
 8007850:	4623      	movge	r3, r4
 8007852:	462c      	movge	r4, r5
 8007854:	4638      	mov	r0, r7
 8007856:	6861      	ldr	r1, [r4, #4]
 8007858:	bfa6      	itte	ge
 800785a:	461d      	movge	r5, r3
 800785c:	2600      	movge	r6, #0
 800785e:	2601      	movlt	r6, #1
 8007860:	f7ff fcf4 	bl	800724c <_Balloc>
 8007864:	4602      	mov	r2, r0
 8007866:	b918      	cbnz	r0, 8007870 <__mdiff+0x5c>
 8007868:	f44f 7110 	mov.w	r1, #576	; 0x240
 800786c:	4b2d      	ldr	r3, [pc, #180]	; (8007924 <__mdiff+0x110>)
 800786e:	e7e5      	b.n	800783c <__mdiff+0x28>
 8007870:	f102 0814 	add.w	r8, r2, #20
 8007874:	46c2      	mov	sl, r8
 8007876:	f04f 0c00 	mov.w	ip, #0
 800787a:	6927      	ldr	r7, [r4, #16]
 800787c:	60c6      	str	r6, [r0, #12]
 800787e:	692e      	ldr	r6, [r5, #16]
 8007880:	f104 0014 	add.w	r0, r4, #20
 8007884:	f105 0914 	add.w	r9, r5, #20
 8007888:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800788c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007890:	3410      	adds	r4, #16
 8007892:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007896:	f859 3b04 	ldr.w	r3, [r9], #4
 800789a:	fa1f f18b 	uxth.w	r1, fp
 800789e:	448c      	add	ip, r1
 80078a0:	b299      	uxth	r1, r3
 80078a2:	0c1b      	lsrs	r3, r3, #16
 80078a4:	ebac 0101 	sub.w	r1, ip, r1
 80078a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078ac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80078b0:	b289      	uxth	r1, r1
 80078b2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80078b6:	454e      	cmp	r6, r9
 80078b8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80078bc:	f84a 3b04 	str.w	r3, [sl], #4
 80078c0:	d8e7      	bhi.n	8007892 <__mdiff+0x7e>
 80078c2:	1b73      	subs	r3, r6, r5
 80078c4:	3b15      	subs	r3, #21
 80078c6:	f023 0303 	bic.w	r3, r3, #3
 80078ca:	3515      	adds	r5, #21
 80078cc:	3304      	adds	r3, #4
 80078ce:	42ae      	cmp	r6, r5
 80078d0:	bf38      	it	cc
 80078d2:	2304      	movcc	r3, #4
 80078d4:	4418      	add	r0, r3
 80078d6:	4443      	add	r3, r8
 80078d8:	461e      	mov	r6, r3
 80078da:	4605      	mov	r5, r0
 80078dc:	4575      	cmp	r5, lr
 80078de:	d30e      	bcc.n	80078fe <__mdiff+0xea>
 80078e0:	f10e 0103 	add.w	r1, lr, #3
 80078e4:	1a09      	subs	r1, r1, r0
 80078e6:	f021 0103 	bic.w	r1, r1, #3
 80078ea:	3803      	subs	r0, #3
 80078ec:	4586      	cmp	lr, r0
 80078ee:	bf38      	it	cc
 80078f0:	2100      	movcc	r1, #0
 80078f2:	4419      	add	r1, r3
 80078f4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80078f8:	b18b      	cbz	r3, 800791e <__mdiff+0x10a>
 80078fa:	6117      	str	r7, [r2, #16]
 80078fc:	e7a4      	b.n	8007848 <__mdiff+0x34>
 80078fe:	f855 8b04 	ldr.w	r8, [r5], #4
 8007902:	fa1f f188 	uxth.w	r1, r8
 8007906:	4461      	add	r1, ip
 8007908:	140c      	asrs	r4, r1, #16
 800790a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800790e:	b289      	uxth	r1, r1
 8007910:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007914:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007918:	f846 1b04 	str.w	r1, [r6], #4
 800791c:	e7de      	b.n	80078dc <__mdiff+0xc8>
 800791e:	3f01      	subs	r7, #1
 8007920:	e7e8      	b.n	80078f4 <__mdiff+0xe0>
 8007922:	bf00      	nop
 8007924:	08009f18 	.word	0x08009f18
 8007928:	08009fa4 	.word	0x08009fa4

0800792c <__ulp>:
 800792c:	4b11      	ldr	r3, [pc, #68]	; (8007974 <__ulp+0x48>)
 800792e:	400b      	ands	r3, r1
 8007930:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007934:	2b00      	cmp	r3, #0
 8007936:	dd02      	ble.n	800793e <__ulp+0x12>
 8007938:	2000      	movs	r0, #0
 800793a:	4619      	mov	r1, r3
 800793c:	4770      	bx	lr
 800793e:	425b      	negs	r3, r3
 8007940:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007944:	f04f 0000 	mov.w	r0, #0
 8007948:	f04f 0100 	mov.w	r1, #0
 800794c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007950:	da04      	bge.n	800795c <__ulp+0x30>
 8007952:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007956:	fa43 f102 	asr.w	r1, r3, r2
 800795a:	4770      	bx	lr
 800795c:	f1a2 0314 	sub.w	r3, r2, #20
 8007960:	2b1e      	cmp	r3, #30
 8007962:	bfd6      	itet	le
 8007964:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007968:	2301      	movgt	r3, #1
 800796a:	fa22 f303 	lsrle.w	r3, r2, r3
 800796e:	4618      	mov	r0, r3
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	7ff00000 	.word	0x7ff00000

08007978 <__b2d>:
 8007978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800797c:	6907      	ldr	r7, [r0, #16]
 800797e:	f100 0914 	add.w	r9, r0, #20
 8007982:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007986:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800798a:	f1a7 0804 	sub.w	r8, r7, #4
 800798e:	4630      	mov	r0, r6
 8007990:	f7ff fd4e 	bl	8007430 <__hi0bits>
 8007994:	f1c0 0320 	rsb	r3, r0, #32
 8007998:	280a      	cmp	r0, #10
 800799a:	600b      	str	r3, [r1, #0]
 800799c:	491f      	ldr	r1, [pc, #124]	; (8007a1c <__b2d+0xa4>)
 800799e:	dc17      	bgt.n	80079d0 <__b2d+0x58>
 80079a0:	45c1      	cmp	r9, r8
 80079a2:	bf28      	it	cs
 80079a4:	2200      	movcs	r2, #0
 80079a6:	f1c0 0c0b 	rsb	ip, r0, #11
 80079aa:	fa26 f30c 	lsr.w	r3, r6, ip
 80079ae:	bf38      	it	cc
 80079b0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80079b4:	ea43 0501 	orr.w	r5, r3, r1
 80079b8:	f100 0315 	add.w	r3, r0, #21
 80079bc:	fa06 f303 	lsl.w	r3, r6, r3
 80079c0:	fa22 f20c 	lsr.w	r2, r2, ip
 80079c4:	ea43 0402 	orr.w	r4, r3, r2
 80079c8:	4620      	mov	r0, r4
 80079ca:	4629      	mov	r1, r5
 80079cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079d0:	45c1      	cmp	r9, r8
 80079d2:	bf2e      	itee	cs
 80079d4:	2200      	movcs	r2, #0
 80079d6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80079da:	f1a7 0808 	subcc.w	r8, r7, #8
 80079de:	f1b0 030b 	subs.w	r3, r0, #11
 80079e2:	d016      	beq.n	8007a12 <__b2d+0x9a>
 80079e4:	f1c3 0720 	rsb	r7, r3, #32
 80079e8:	fa22 f107 	lsr.w	r1, r2, r7
 80079ec:	45c8      	cmp	r8, r9
 80079ee:	fa06 f603 	lsl.w	r6, r6, r3
 80079f2:	ea46 0601 	orr.w	r6, r6, r1
 80079f6:	bf94      	ite	ls
 80079f8:	2100      	movls	r1, #0
 80079fa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80079fe:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007a02:	fa02 f003 	lsl.w	r0, r2, r3
 8007a06:	40f9      	lsrs	r1, r7
 8007a08:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007a0c:	ea40 0401 	orr.w	r4, r0, r1
 8007a10:	e7da      	b.n	80079c8 <__b2d+0x50>
 8007a12:	4614      	mov	r4, r2
 8007a14:	ea46 0501 	orr.w	r5, r6, r1
 8007a18:	e7d6      	b.n	80079c8 <__b2d+0x50>
 8007a1a:	bf00      	nop
 8007a1c:	3ff00000 	.word	0x3ff00000

08007a20 <__d2b>:
 8007a20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007a24:	2101      	movs	r1, #1
 8007a26:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007a2a:	4690      	mov	r8, r2
 8007a2c:	461d      	mov	r5, r3
 8007a2e:	f7ff fc0d 	bl	800724c <_Balloc>
 8007a32:	4604      	mov	r4, r0
 8007a34:	b930      	cbnz	r0, 8007a44 <__d2b+0x24>
 8007a36:	4602      	mov	r2, r0
 8007a38:	f240 310a 	movw	r1, #778	; 0x30a
 8007a3c:	4b24      	ldr	r3, [pc, #144]	; (8007ad0 <__d2b+0xb0>)
 8007a3e:	4825      	ldr	r0, [pc, #148]	; (8007ad4 <__d2b+0xb4>)
 8007a40:	f000 fb40 	bl	80080c4 <__assert_func>
 8007a44:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007a48:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007a4c:	bb2d      	cbnz	r5, 8007a9a <__d2b+0x7a>
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	f1b8 0300 	subs.w	r3, r8, #0
 8007a54:	d026      	beq.n	8007aa4 <__d2b+0x84>
 8007a56:	4668      	mov	r0, sp
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	f7ff fd09 	bl	8007470 <__lo0bits>
 8007a5e:	9900      	ldr	r1, [sp, #0]
 8007a60:	b1f0      	cbz	r0, 8007aa0 <__d2b+0x80>
 8007a62:	9a01      	ldr	r2, [sp, #4]
 8007a64:	f1c0 0320 	rsb	r3, r0, #32
 8007a68:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	40c2      	lsrs	r2, r0
 8007a70:	6163      	str	r3, [r4, #20]
 8007a72:	9201      	str	r2, [sp, #4]
 8007a74:	9b01      	ldr	r3, [sp, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	bf14      	ite	ne
 8007a7a:	2102      	movne	r1, #2
 8007a7c:	2101      	moveq	r1, #1
 8007a7e:	61a3      	str	r3, [r4, #24]
 8007a80:	6121      	str	r1, [r4, #16]
 8007a82:	b1c5      	cbz	r5, 8007ab6 <__d2b+0x96>
 8007a84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a88:	4405      	add	r5, r0
 8007a8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a8e:	603d      	str	r5, [r7, #0]
 8007a90:	6030      	str	r0, [r6, #0]
 8007a92:	4620      	mov	r0, r4
 8007a94:	b002      	add	sp, #8
 8007a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a9e:	e7d6      	b.n	8007a4e <__d2b+0x2e>
 8007aa0:	6161      	str	r1, [r4, #20]
 8007aa2:	e7e7      	b.n	8007a74 <__d2b+0x54>
 8007aa4:	a801      	add	r0, sp, #4
 8007aa6:	f7ff fce3 	bl	8007470 <__lo0bits>
 8007aaa:	2101      	movs	r1, #1
 8007aac:	9b01      	ldr	r3, [sp, #4]
 8007aae:	6121      	str	r1, [r4, #16]
 8007ab0:	6163      	str	r3, [r4, #20]
 8007ab2:	3020      	adds	r0, #32
 8007ab4:	e7e5      	b.n	8007a82 <__d2b+0x62>
 8007ab6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007aba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007abe:	6038      	str	r0, [r7, #0]
 8007ac0:	6918      	ldr	r0, [r3, #16]
 8007ac2:	f7ff fcb5 	bl	8007430 <__hi0bits>
 8007ac6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007aca:	6031      	str	r1, [r6, #0]
 8007acc:	e7e1      	b.n	8007a92 <__d2b+0x72>
 8007ace:	bf00      	nop
 8007ad0:	08009f18 	.word	0x08009f18
 8007ad4:	08009fa4 	.word	0x08009fa4

08007ad8 <__ratio>:
 8007ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	4688      	mov	r8, r1
 8007ade:	4669      	mov	r1, sp
 8007ae0:	4681      	mov	r9, r0
 8007ae2:	f7ff ff49 	bl	8007978 <__b2d>
 8007ae6:	460f      	mov	r7, r1
 8007ae8:	4604      	mov	r4, r0
 8007aea:	460d      	mov	r5, r1
 8007aec:	4640      	mov	r0, r8
 8007aee:	a901      	add	r1, sp, #4
 8007af0:	f7ff ff42 	bl	8007978 <__b2d>
 8007af4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007af8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007afc:	468b      	mov	fp, r1
 8007afe:	eba3 0c02 	sub.w	ip, r3, r2
 8007b02:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007b06:	1a9b      	subs	r3, r3, r2
 8007b08:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	bfd5      	itete	le
 8007b10:	460a      	movle	r2, r1
 8007b12:	462a      	movgt	r2, r5
 8007b14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b18:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007b1c:	bfd8      	it	le
 8007b1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007b22:	465b      	mov	r3, fp
 8007b24:	4602      	mov	r2, r0
 8007b26:	4639      	mov	r1, r7
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7f8 fe6b 	bl	8000804 <__aeabi_ddiv>
 8007b2e:	b003      	add	sp, #12
 8007b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b34 <__copybits>:
 8007b34:	3901      	subs	r1, #1
 8007b36:	b570      	push	{r4, r5, r6, lr}
 8007b38:	1149      	asrs	r1, r1, #5
 8007b3a:	6914      	ldr	r4, [r2, #16]
 8007b3c:	3101      	adds	r1, #1
 8007b3e:	f102 0314 	add.w	r3, r2, #20
 8007b42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b4a:	1f05      	subs	r5, r0, #4
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	d30c      	bcc.n	8007b6a <__copybits+0x36>
 8007b50:	1aa3      	subs	r3, r4, r2
 8007b52:	3b11      	subs	r3, #17
 8007b54:	f023 0303 	bic.w	r3, r3, #3
 8007b58:	3211      	adds	r2, #17
 8007b5a:	42a2      	cmp	r2, r4
 8007b5c:	bf88      	it	hi
 8007b5e:	2300      	movhi	r3, #0
 8007b60:	4418      	add	r0, r3
 8007b62:	2300      	movs	r3, #0
 8007b64:	4288      	cmp	r0, r1
 8007b66:	d305      	bcc.n	8007b74 <__copybits+0x40>
 8007b68:	bd70      	pop	{r4, r5, r6, pc}
 8007b6a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b6e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b72:	e7eb      	b.n	8007b4c <__copybits+0x18>
 8007b74:	f840 3b04 	str.w	r3, [r0], #4
 8007b78:	e7f4      	b.n	8007b64 <__copybits+0x30>

08007b7a <__any_on>:
 8007b7a:	f100 0214 	add.w	r2, r0, #20
 8007b7e:	6900      	ldr	r0, [r0, #16]
 8007b80:	114b      	asrs	r3, r1, #5
 8007b82:	4298      	cmp	r0, r3
 8007b84:	b510      	push	{r4, lr}
 8007b86:	db11      	blt.n	8007bac <__any_on+0x32>
 8007b88:	dd0a      	ble.n	8007ba0 <__any_on+0x26>
 8007b8a:	f011 011f 	ands.w	r1, r1, #31
 8007b8e:	d007      	beq.n	8007ba0 <__any_on+0x26>
 8007b90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b94:	fa24 f001 	lsr.w	r0, r4, r1
 8007b98:	fa00 f101 	lsl.w	r1, r0, r1
 8007b9c:	428c      	cmp	r4, r1
 8007b9e:	d10b      	bne.n	8007bb8 <__any_on+0x3e>
 8007ba0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d803      	bhi.n	8007bb0 <__any_on+0x36>
 8007ba8:	2000      	movs	r0, #0
 8007baa:	bd10      	pop	{r4, pc}
 8007bac:	4603      	mov	r3, r0
 8007bae:	e7f7      	b.n	8007ba0 <__any_on+0x26>
 8007bb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	d0f5      	beq.n	8007ba4 <__any_on+0x2a>
 8007bb8:	2001      	movs	r0, #1
 8007bba:	e7f6      	b.n	8007baa <__any_on+0x30>

08007bbc <_calloc_r>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	fba1 5402 	umull	r5, r4, r1, r2
 8007bc2:	b934      	cbnz	r4, 8007bd2 <_calloc_r+0x16>
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	f000 f875 	bl	8007cb4 <_malloc_r>
 8007bca:	4606      	mov	r6, r0
 8007bcc:	b928      	cbnz	r0, 8007bda <_calloc_r+0x1e>
 8007bce:	4630      	mov	r0, r6
 8007bd0:	bd70      	pop	{r4, r5, r6, pc}
 8007bd2:	220c      	movs	r2, #12
 8007bd4:	2600      	movs	r6, #0
 8007bd6:	6002      	str	r2, [r0, #0]
 8007bd8:	e7f9      	b.n	8007bce <_calloc_r+0x12>
 8007bda:	462a      	mov	r2, r5
 8007bdc:	4621      	mov	r1, r4
 8007bde:	f7fc fbf1 	bl	80043c4 <memset>
 8007be2:	e7f4      	b.n	8007bce <_calloc_r+0x12>

08007be4 <_free_r>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	4605      	mov	r5, r0
 8007be8:	2900      	cmp	r1, #0
 8007bea:	d040      	beq.n	8007c6e <_free_r+0x8a>
 8007bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bf0:	1f0c      	subs	r4, r1, #4
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	bfb8      	it	lt
 8007bf6:	18e4      	addlt	r4, r4, r3
 8007bf8:	f000 faae 	bl	8008158 <__malloc_lock>
 8007bfc:	4a1c      	ldr	r2, [pc, #112]	; (8007c70 <_free_r+0x8c>)
 8007bfe:	6813      	ldr	r3, [r2, #0]
 8007c00:	b933      	cbnz	r3, 8007c10 <_free_r+0x2c>
 8007c02:	6063      	str	r3, [r4, #4]
 8007c04:	6014      	str	r4, [r2, #0]
 8007c06:	4628      	mov	r0, r5
 8007c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c0c:	f000 baaa 	b.w	8008164 <__malloc_unlock>
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	d908      	bls.n	8007c26 <_free_r+0x42>
 8007c14:	6820      	ldr	r0, [r4, #0]
 8007c16:	1821      	adds	r1, r4, r0
 8007c18:	428b      	cmp	r3, r1
 8007c1a:	bf01      	itttt	eq
 8007c1c:	6819      	ldreq	r1, [r3, #0]
 8007c1e:	685b      	ldreq	r3, [r3, #4]
 8007c20:	1809      	addeq	r1, r1, r0
 8007c22:	6021      	streq	r1, [r4, #0]
 8007c24:	e7ed      	b.n	8007c02 <_free_r+0x1e>
 8007c26:	461a      	mov	r2, r3
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	b10b      	cbz	r3, 8007c30 <_free_r+0x4c>
 8007c2c:	42a3      	cmp	r3, r4
 8007c2e:	d9fa      	bls.n	8007c26 <_free_r+0x42>
 8007c30:	6811      	ldr	r1, [r2, #0]
 8007c32:	1850      	adds	r0, r2, r1
 8007c34:	42a0      	cmp	r0, r4
 8007c36:	d10b      	bne.n	8007c50 <_free_r+0x6c>
 8007c38:	6820      	ldr	r0, [r4, #0]
 8007c3a:	4401      	add	r1, r0
 8007c3c:	1850      	adds	r0, r2, r1
 8007c3e:	4283      	cmp	r3, r0
 8007c40:	6011      	str	r1, [r2, #0]
 8007c42:	d1e0      	bne.n	8007c06 <_free_r+0x22>
 8007c44:	6818      	ldr	r0, [r3, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	4401      	add	r1, r0
 8007c4a:	6011      	str	r1, [r2, #0]
 8007c4c:	6053      	str	r3, [r2, #4]
 8007c4e:	e7da      	b.n	8007c06 <_free_r+0x22>
 8007c50:	d902      	bls.n	8007c58 <_free_r+0x74>
 8007c52:	230c      	movs	r3, #12
 8007c54:	602b      	str	r3, [r5, #0]
 8007c56:	e7d6      	b.n	8007c06 <_free_r+0x22>
 8007c58:	6820      	ldr	r0, [r4, #0]
 8007c5a:	1821      	adds	r1, r4, r0
 8007c5c:	428b      	cmp	r3, r1
 8007c5e:	bf01      	itttt	eq
 8007c60:	6819      	ldreq	r1, [r3, #0]
 8007c62:	685b      	ldreq	r3, [r3, #4]
 8007c64:	1809      	addeq	r1, r1, r0
 8007c66:	6021      	streq	r1, [r4, #0]
 8007c68:	6063      	str	r3, [r4, #4]
 8007c6a:	6054      	str	r4, [r2, #4]
 8007c6c:	e7cb      	b.n	8007c06 <_free_r+0x22>
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	200006c8 	.word	0x200006c8

08007c74 <sbrk_aligned>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	4e0e      	ldr	r6, [pc, #56]	; (8007cb0 <sbrk_aligned+0x3c>)
 8007c78:	460c      	mov	r4, r1
 8007c7a:	6831      	ldr	r1, [r6, #0]
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	b911      	cbnz	r1, 8007c86 <sbrk_aligned+0x12>
 8007c80:	f000 f9ee 	bl	8008060 <_sbrk_r>
 8007c84:	6030      	str	r0, [r6, #0]
 8007c86:	4621      	mov	r1, r4
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f000 f9e9 	bl	8008060 <_sbrk_r>
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	d00a      	beq.n	8007ca8 <sbrk_aligned+0x34>
 8007c92:	1cc4      	adds	r4, r0, #3
 8007c94:	f024 0403 	bic.w	r4, r4, #3
 8007c98:	42a0      	cmp	r0, r4
 8007c9a:	d007      	beq.n	8007cac <sbrk_aligned+0x38>
 8007c9c:	1a21      	subs	r1, r4, r0
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	f000 f9de 	bl	8008060 <_sbrk_r>
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	d101      	bne.n	8007cac <sbrk_aligned+0x38>
 8007ca8:	f04f 34ff 	mov.w	r4, #4294967295
 8007cac:	4620      	mov	r0, r4
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	200006cc 	.word	0x200006cc

08007cb4 <_malloc_r>:
 8007cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb8:	1ccd      	adds	r5, r1, #3
 8007cba:	f025 0503 	bic.w	r5, r5, #3
 8007cbe:	3508      	adds	r5, #8
 8007cc0:	2d0c      	cmp	r5, #12
 8007cc2:	bf38      	it	cc
 8007cc4:	250c      	movcc	r5, #12
 8007cc6:	2d00      	cmp	r5, #0
 8007cc8:	4607      	mov	r7, r0
 8007cca:	db01      	blt.n	8007cd0 <_malloc_r+0x1c>
 8007ccc:	42a9      	cmp	r1, r5
 8007cce:	d905      	bls.n	8007cdc <_malloc_r+0x28>
 8007cd0:	230c      	movs	r3, #12
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	603b      	str	r3, [r7, #0]
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cdc:	4e2e      	ldr	r6, [pc, #184]	; (8007d98 <_malloc_r+0xe4>)
 8007cde:	f000 fa3b 	bl	8008158 <__malloc_lock>
 8007ce2:	6833      	ldr	r3, [r6, #0]
 8007ce4:	461c      	mov	r4, r3
 8007ce6:	bb34      	cbnz	r4, 8007d36 <_malloc_r+0x82>
 8007ce8:	4629      	mov	r1, r5
 8007cea:	4638      	mov	r0, r7
 8007cec:	f7ff ffc2 	bl	8007c74 <sbrk_aligned>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	d14d      	bne.n	8007d92 <_malloc_r+0xde>
 8007cf6:	6834      	ldr	r4, [r6, #0]
 8007cf8:	4626      	mov	r6, r4
 8007cfa:	2e00      	cmp	r6, #0
 8007cfc:	d140      	bne.n	8007d80 <_malloc_r+0xcc>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	4631      	mov	r1, r6
 8007d02:	4638      	mov	r0, r7
 8007d04:	eb04 0803 	add.w	r8, r4, r3
 8007d08:	f000 f9aa 	bl	8008060 <_sbrk_r>
 8007d0c:	4580      	cmp	r8, r0
 8007d0e:	d13a      	bne.n	8007d86 <_malloc_r+0xd2>
 8007d10:	6821      	ldr	r1, [r4, #0]
 8007d12:	3503      	adds	r5, #3
 8007d14:	1a6d      	subs	r5, r5, r1
 8007d16:	f025 0503 	bic.w	r5, r5, #3
 8007d1a:	3508      	adds	r5, #8
 8007d1c:	2d0c      	cmp	r5, #12
 8007d1e:	bf38      	it	cc
 8007d20:	250c      	movcc	r5, #12
 8007d22:	4638      	mov	r0, r7
 8007d24:	4629      	mov	r1, r5
 8007d26:	f7ff ffa5 	bl	8007c74 <sbrk_aligned>
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	d02b      	beq.n	8007d86 <_malloc_r+0xd2>
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	442b      	add	r3, r5
 8007d32:	6023      	str	r3, [r4, #0]
 8007d34:	e00e      	b.n	8007d54 <_malloc_r+0xa0>
 8007d36:	6822      	ldr	r2, [r4, #0]
 8007d38:	1b52      	subs	r2, r2, r5
 8007d3a:	d41e      	bmi.n	8007d7a <_malloc_r+0xc6>
 8007d3c:	2a0b      	cmp	r2, #11
 8007d3e:	d916      	bls.n	8007d6e <_malloc_r+0xba>
 8007d40:	1961      	adds	r1, r4, r5
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	6025      	str	r5, [r4, #0]
 8007d46:	bf18      	it	ne
 8007d48:	6059      	strne	r1, [r3, #4]
 8007d4a:	6863      	ldr	r3, [r4, #4]
 8007d4c:	bf08      	it	eq
 8007d4e:	6031      	streq	r1, [r6, #0]
 8007d50:	5162      	str	r2, [r4, r5]
 8007d52:	604b      	str	r3, [r1, #4]
 8007d54:	4638      	mov	r0, r7
 8007d56:	f104 060b 	add.w	r6, r4, #11
 8007d5a:	f000 fa03 	bl	8008164 <__malloc_unlock>
 8007d5e:	f026 0607 	bic.w	r6, r6, #7
 8007d62:	1d23      	adds	r3, r4, #4
 8007d64:	1af2      	subs	r2, r6, r3
 8007d66:	d0b6      	beq.n	8007cd6 <_malloc_r+0x22>
 8007d68:	1b9b      	subs	r3, r3, r6
 8007d6a:	50a3      	str	r3, [r4, r2]
 8007d6c:	e7b3      	b.n	8007cd6 <_malloc_r+0x22>
 8007d6e:	6862      	ldr	r2, [r4, #4]
 8007d70:	42a3      	cmp	r3, r4
 8007d72:	bf0c      	ite	eq
 8007d74:	6032      	streq	r2, [r6, #0]
 8007d76:	605a      	strne	r2, [r3, #4]
 8007d78:	e7ec      	b.n	8007d54 <_malloc_r+0xa0>
 8007d7a:	4623      	mov	r3, r4
 8007d7c:	6864      	ldr	r4, [r4, #4]
 8007d7e:	e7b2      	b.n	8007ce6 <_malloc_r+0x32>
 8007d80:	4634      	mov	r4, r6
 8007d82:	6876      	ldr	r6, [r6, #4]
 8007d84:	e7b9      	b.n	8007cfa <_malloc_r+0x46>
 8007d86:	230c      	movs	r3, #12
 8007d88:	4638      	mov	r0, r7
 8007d8a:	603b      	str	r3, [r7, #0]
 8007d8c:	f000 f9ea 	bl	8008164 <__malloc_unlock>
 8007d90:	e7a1      	b.n	8007cd6 <_malloc_r+0x22>
 8007d92:	6025      	str	r5, [r4, #0]
 8007d94:	e7de      	b.n	8007d54 <_malloc_r+0xa0>
 8007d96:	bf00      	nop
 8007d98:	200006c8 	.word	0x200006c8

08007d9c <__ssputs_r>:
 8007d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007da0:	688e      	ldr	r6, [r1, #8]
 8007da2:	4682      	mov	sl, r0
 8007da4:	429e      	cmp	r6, r3
 8007da6:	460c      	mov	r4, r1
 8007da8:	4690      	mov	r8, r2
 8007daa:	461f      	mov	r7, r3
 8007dac:	d838      	bhi.n	8007e20 <__ssputs_r+0x84>
 8007dae:	898a      	ldrh	r2, [r1, #12]
 8007db0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007db4:	d032      	beq.n	8007e1c <__ssputs_r+0x80>
 8007db6:	6825      	ldr	r5, [r4, #0]
 8007db8:	6909      	ldr	r1, [r1, #16]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	eba5 0901 	sub.w	r9, r5, r1
 8007dc0:	6965      	ldr	r5, [r4, #20]
 8007dc2:	444b      	add	r3, r9
 8007dc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dcc:	106d      	asrs	r5, r5, #1
 8007dce:	429d      	cmp	r5, r3
 8007dd0:	bf38      	it	cc
 8007dd2:	461d      	movcc	r5, r3
 8007dd4:	0553      	lsls	r3, r2, #21
 8007dd6:	d531      	bpl.n	8007e3c <__ssputs_r+0xa0>
 8007dd8:	4629      	mov	r1, r5
 8007dda:	f7ff ff6b 	bl	8007cb4 <_malloc_r>
 8007dde:	4606      	mov	r6, r0
 8007de0:	b950      	cbnz	r0, 8007df8 <__ssputs_r+0x5c>
 8007de2:	230c      	movs	r3, #12
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295
 8007de8:	f8ca 3000 	str.w	r3, [sl]
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df2:	81a3      	strh	r3, [r4, #12]
 8007df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df8:	464a      	mov	r2, r9
 8007dfa:	6921      	ldr	r1, [r4, #16]
 8007dfc:	f7ff fa18 	bl	8007230 <memcpy>
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e0a:	81a3      	strh	r3, [r4, #12]
 8007e0c:	6126      	str	r6, [r4, #16]
 8007e0e:	444e      	add	r6, r9
 8007e10:	6026      	str	r6, [r4, #0]
 8007e12:	463e      	mov	r6, r7
 8007e14:	6165      	str	r5, [r4, #20]
 8007e16:	eba5 0509 	sub.w	r5, r5, r9
 8007e1a:	60a5      	str	r5, [r4, #8]
 8007e1c:	42be      	cmp	r6, r7
 8007e1e:	d900      	bls.n	8007e22 <__ssputs_r+0x86>
 8007e20:	463e      	mov	r6, r7
 8007e22:	4632      	mov	r2, r6
 8007e24:	4641      	mov	r1, r8
 8007e26:	6820      	ldr	r0, [r4, #0]
 8007e28:	f000 f97c 	bl	8008124 <memmove>
 8007e2c:	68a3      	ldr	r3, [r4, #8]
 8007e2e:	2000      	movs	r0, #0
 8007e30:	1b9b      	subs	r3, r3, r6
 8007e32:	60a3      	str	r3, [r4, #8]
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	4433      	add	r3, r6
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	e7db      	b.n	8007df4 <__ssputs_r+0x58>
 8007e3c:	462a      	mov	r2, r5
 8007e3e:	f000 f997 	bl	8008170 <_realloc_r>
 8007e42:	4606      	mov	r6, r0
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d1e1      	bne.n	8007e0c <__ssputs_r+0x70>
 8007e48:	4650      	mov	r0, sl
 8007e4a:	6921      	ldr	r1, [r4, #16]
 8007e4c:	f7ff feca 	bl	8007be4 <_free_r>
 8007e50:	e7c7      	b.n	8007de2 <__ssputs_r+0x46>
	...

08007e54 <_svfiprintf_r>:
 8007e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e58:	4698      	mov	r8, r3
 8007e5a:	898b      	ldrh	r3, [r1, #12]
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	061b      	lsls	r3, r3, #24
 8007e60:	460d      	mov	r5, r1
 8007e62:	4614      	mov	r4, r2
 8007e64:	b09d      	sub	sp, #116	; 0x74
 8007e66:	d50e      	bpl.n	8007e86 <_svfiprintf_r+0x32>
 8007e68:	690b      	ldr	r3, [r1, #16]
 8007e6a:	b963      	cbnz	r3, 8007e86 <_svfiprintf_r+0x32>
 8007e6c:	2140      	movs	r1, #64	; 0x40
 8007e6e:	f7ff ff21 	bl	8007cb4 <_malloc_r>
 8007e72:	6028      	str	r0, [r5, #0]
 8007e74:	6128      	str	r0, [r5, #16]
 8007e76:	b920      	cbnz	r0, 8007e82 <_svfiprintf_r+0x2e>
 8007e78:	230c      	movs	r3, #12
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e80:	e0d1      	b.n	8008026 <_svfiprintf_r+0x1d2>
 8007e82:	2340      	movs	r3, #64	; 0x40
 8007e84:	616b      	str	r3, [r5, #20]
 8007e86:	2300      	movs	r3, #0
 8007e88:	9309      	str	r3, [sp, #36]	; 0x24
 8007e8a:	2320      	movs	r3, #32
 8007e8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e90:	2330      	movs	r3, #48	; 0x30
 8007e92:	f04f 0901 	mov.w	r9, #1
 8007e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008040 <_svfiprintf_r+0x1ec>
 8007e9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ea2:	4623      	mov	r3, r4
 8007ea4:	469a      	mov	sl, r3
 8007ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eaa:	b10a      	cbz	r2, 8007eb0 <_svfiprintf_r+0x5c>
 8007eac:	2a25      	cmp	r2, #37	; 0x25
 8007eae:	d1f9      	bne.n	8007ea4 <_svfiprintf_r+0x50>
 8007eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8007eb4:	d00b      	beq.n	8007ece <_svfiprintf_r+0x7a>
 8007eb6:	465b      	mov	r3, fp
 8007eb8:	4622      	mov	r2, r4
 8007eba:	4629      	mov	r1, r5
 8007ebc:	4638      	mov	r0, r7
 8007ebe:	f7ff ff6d 	bl	8007d9c <__ssputs_r>
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	f000 80aa 	beq.w	800801c <_svfiprintf_r+0x1c8>
 8007ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eca:	445a      	add	r2, fp
 8007ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ece:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80a2 	beq.w	800801c <_svfiprintf_r+0x1c8>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f04f 32ff 	mov.w	r2, #4294967295
 8007ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ee2:	f10a 0a01 	add.w	sl, sl, #1
 8007ee6:	9304      	str	r3, [sp, #16]
 8007ee8:	9307      	str	r3, [sp, #28]
 8007eea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eee:	931a      	str	r3, [sp, #104]	; 0x68
 8007ef0:	4654      	mov	r4, sl
 8007ef2:	2205      	movs	r2, #5
 8007ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef8:	4851      	ldr	r0, [pc, #324]	; (8008040 <_svfiprintf_r+0x1ec>)
 8007efa:	f7ff f98b 	bl	8007214 <memchr>
 8007efe:	9a04      	ldr	r2, [sp, #16]
 8007f00:	b9d8      	cbnz	r0, 8007f3a <_svfiprintf_r+0xe6>
 8007f02:	06d0      	lsls	r0, r2, #27
 8007f04:	bf44      	itt	mi
 8007f06:	2320      	movmi	r3, #32
 8007f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f0c:	0711      	lsls	r1, r2, #28
 8007f0e:	bf44      	itt	mi
 8007f10:	232b      	movmi	r3, #43	; 0x2b
 8007f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f16:	f89a 3000 	ldrb.w	r3, [sl]
 8007f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f1c:	d015      	beq.n	8007f4a <_svfiprintf_r+0xf6>
 8007f1e:	4654      	mov	r4, sl
 8007f20:	2000      	movs	r0, #0
 8007f22:	f04f 0c0a 	mov.w	ip, #10
 8007f26:	9a07      	ldr	r2, [sp, #28]
 8007f28:	4621      	mov	r1, r4
 8007f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f2e:	3b30      	subs	r3, #48	; 0x30
 8007f30:	2b09      	cmp	r3, #9
 8007f32:	d94e      	bls.n	8007fd2 <_svfiprintf_r+0x17e>
 8007f34:	b1b0      	cbz	r0, 8007f64 <_svfiprintf_r+0x110>
 8007f36:	9207      	str	r2, [sp, #28]
 8007f38:	e014      	b.n	8007f64 <_svfiprintf_r+0x110>
 8007f3a:	eba0 0308 	sub.w	r3, r0, r8
 8007f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8007f42:	4313      	orrs	r3, r2
 8007f44:	46a2      	mov	sl, r4
 8007f46:	9304      	str	r3, [sp, #16]
 8007f48:	e7d2      	b.n	8007ef0 <_svfiprintf_r+0x9c>
 8007f4a:	9b03      	ldr	r3, [sp, #12]
 8007f4c:	1d19      	adds	r1, r3, #4
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	9103      	str	r1, [sp, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	bfbb      	ittet	lt
 8007f56:	425b      	neglt	r3, r3
 8007f58:	f042 0202 	orrlt.w	r2, r2, #2
 8007f5c:	9307      	strge	r3, [sp, #28]
 8007f5e:	9307      	strlt	r3, [sp, #28]
 8007f60:	bfb8      	it	lt
 8007f62:	9204      	strlt	r2, [sp, #16]
 8007f64:	7823      	ldrb	r3, [r4, #0]
 8007f66:	2b2e      	cmp	r3, #46	; 0x2e
 8007f68:	d10c      	bne.n	8007f84 <_svfiprintf_r+0x130>
 8007f6a:	7863      	ldrb	r3, [r4, #1]
 8007f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f6e:	d135      	bne.n	8007fdc <_svfiprintf_r+0x188>
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	3402      	adds	r4, #2
 8007f74:	1d1a      	adds	r2, r3, #4
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	9203      	str	r2, [sp, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	bfb8      	it	lt
 8007f7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f82:	9305      	str	r3, [sp, #20]
 8007f84:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008044 <_svfiprintf_r+0x1f0>
 8007f88:	2203      	movs	r2, #3
 8007f8a:	4650      	mov	r0, sl
 8007f8c:	7821      	ldrb	r1, [r4, #0]
 8007f8e:	f7ff f941 	bl	8007214 <memchr>
 8007f92:	b140      	cbz	r0, 8007fa6 <_svfiprintf_r+0x152>
 8007f94:	2340      	movs	r3, #64	; 0x40
 8007f96:	eba0 000a 	sub.w	r0, r0, sl
 8007f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8007f9e:	9b04      	ldr	r3, [sp, #16]
 8007fa0:	3401      	adds	r4, #1
 8007fa2:	4303      	orrs	r3, r0
 8007fa4:	9304      	str	r3, [sp, #16]
 8007fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007faa:	2206      	movs	r2, #6
 8007fac:	4826      	ldr	r0, [pc, #152]	; (8008048 <_svfiprintf_r+0x1f4>)
 8007fae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fb2:	f7ff f92f 	bl	8007214 <memchr>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d038      	beq.n	800802c <_svfiprintf_r+0x1d8>
 8007fba:	4b24      	ldr	r3, [pc, #144]	; (800804c <_svfiprintf_r+0x1f8>)
 8007fbc:	bb1b      	cbnz	r3, 8008006 <_svfiprintf_r+0x1b2>
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	3307      	adds	r3, #7
 8007fc2:	f023 0307 	bic.w	r3, r3, #7
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	9303      	str	r3, [sp, #12]
 8007fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fcc:	4433      	add	r3, r6
 8007fce:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd0:	e767      	b.n	8007ea2 <_svfiprintf_r+0x4e>
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	2001      	movs	r0, #1
 8007fd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fda:	e7a5      	b.n	8007f28 <_svfiprintf_r+0xd4>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f04f 0c0a 	mov.w	ip, #10
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	3401      	adds	r4, #1
 8007fe6:	9305      	str	r3, [sp, #20]
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fee:	3a30      	subs	r2, #48	; 0x30
 8007ff0:	2a09      	cmp	r2, #9
 8007ff2:	d903      	bls.n	8007ffc <_svfiprintf_r+0x1a8>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0c5      	beq.n	8007f84 <_svfiprintf_r+0x130>
 8007ff8:	9105      	str	r1, [sp, #20]
 8007ffa:	e7c3      	b.n	8007f84 <_svfiprintf_r+0x130>
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	2301      	movs	r3, #1
 8008000:	fb0c 2101 	mla	r1, ip, r1, r2
 8008004:	e7f0      	b.n	8007fe8 <_svfiprintf_r+0x194>
 8008006:	ab03      	add	r3, sp, #12
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	462a      	mov	r2, r5
 800800c:	4638      	mov	r0, r7
 800800e:	4b10      	ldr	r3, [pc, #64]	; (8008050 <_svfiprintf_r+0x1fc>)
 8008010:	a904      	add	r1, sp, #16
 8008012:	f7fc fa7d 	bl	8004510 <_printf_float>
 8008016:	1c42      	adds	r2, r0, #1
 8008018:	4606      	mov	r6, r0
 800801a:	d1d6      	bne.n	8007fca <_svfiprintf_r+0x176>
 800801c:	89ab      	ldrh	r3, [r5, #12]
 800801e:	065b      	lsls	r3, r3, #25
 8008020:	f53f af2c 	bmi.w	8007e7c <_svfiprintf_r+0x28>
 8008024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008026:	b01d      	add	sp, #116	; 0x74
 8008028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802c:	ab03      	add	r3, sp, #12
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	462a      	mov	r2, r5
 8008032:	4638      	mov	r0, r7
 8008034:	4b06      	ldr	r3, [pc, #24]	; (8008050 <_svfiprintf_r+0x1fc>)
 8008036:	a904      	add	r1, sp, #16
 8008038:	f7fc fd06 	bl	8004a48 <_printf_i>
 800803c:	e7eb      	b.n	8008016 <_svfiprintf_r+0x1c2>
 800803e:	bf00      	nop
 8008040:	0800a0fc 	.word	0x0800a0fc
 8008044:	0800a102 	.word	0x0800a102
 8008048:	0800a106 	.word	0x0800a106
 800804c:	08004511 	.word	0x08004511
 8008050:	08007d9d 	.word	0x08007d9d

08008054 <nan>:
 8008054:	2000      	movs	r0, #0
 8008056:	4901      	ldr	r1, [pc, #4]	; (800805c <nan+0x8>)
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	7ff80000 	.word	0x7ff80000

08008060 <_sbrk_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	2300      	movs	r3, #0
 8008064:	4d05      	ldr	r5, [pc, #20]	; (800807c <_sbrk_r+0x1c>)
 8008066:	4604      	mov	r4, r0
 8008068:	4608      	mov	r0, r1
 800806a:	602b      	str	r3, [r5, #0]
 800806c:	f7f9 fdb4 	bl	8001bd8 <_sbrk>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d102      	bne.n	800807a <_sbrk_r+0x1a>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	b103      	cbz	r3, 800807a <_sbrk_r+0x1a>
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	200006d0 	.word	0x200006d0

08008080 <strncmp>:
 8008080:	4603      	mov	r3, r0
 8008082:	b510      	push	{r4, lr}
 8008084:	b172      	cbz	r2, 80080a4 <strncmp+0x24>
 8008086:	3901      	subs	r1, #1
 8008088:	1884      	adds	r4, r0, r2
 800808a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800808e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008092:	4290      	cmp	r0, r2
 8008094:	d101      	bne.n	800809a <strncmp+0x1a>
 8008096:	42a3      	cmp	r3, r4
 8008098:	d101      	bne.n	800809e <strncmp+0x1e>
 800809a:	1a80      	subs	r0, r0, r2
 800809c:	bd10      	pop	{r4, pc}
 800809e:	2800      	cmp	r0, #0
 80080a0:	d1f3      	bne.n	800808a <strncmp+0xa>
 80080a2:	e7fa      	b.n	800809a <strncmp+0x1a>
 80080a4:	4610      	mov	r0, r2
 80080a6:	e7f9      	b.n	800809c <strncmp+0x1c>

080080a8 <__ascii_wctomb>:
 80080a8:	4603      	mov	r3, r0
 80080aa:	4608      	mov	r0, r1
 80080ac:	b141      	cbz	r1, 80080c0 <__ascii_wctomb+0x18>
 80080ae:	2aff      	cmp	r2, #255	; 0xff
 80080b0:	d904      	bls.n	80080bc <__ascii_wctomb+0x14>
 80080b2:	228a      	movs	r2, #138	; 0x8a
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	4770      	bx	lr
 80080bc:	2001      	movs	r0, #1
 80080be:	700a      	strb	r2, [r1, #0]
 80080c0:	4770      	bx	lr
	...

080080c4 <__assert_func>:
 80080c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080c6:	4614      	mov	r4, r2
 80080c8:	461a      	mov	r2, r3
 80080ca:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <__assert_func+0x2c>)
 80080cc:	4605      	mov	r5, r0
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68d8      	ldr	r0, [r3, #12]
 80080d2:	b14c      	cbz	r4, 80080e8 <__assert_func+0x24>
 80080d4:	4b07      	ldr	r3, [pc, #28]	; (80080f4 <__assert_func+0x30>)
 80080d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080da:	9100      	str	r1, [sp, #0]
 80080dc:	462b      	mov	r3, r5
 80080de:	4906      	ldr	r1, [pc, #24]	; (80080f8 <__assert_func+0x34>)
 80080e0:	f000 f80e 	bl	8008100 <fiprintf>
 80080e4:	f000 fa8a 	bl	80085fc <abort>
 80080e8:	4b04      	ldr	r3, [pc, #16]	; (80080fc <__assert_func+0x38>)
 80080ea:	461c      	mov	r4, r3
 80080ec:	e7f3      	b.n	80080d6 <__assert_func+0x12>
 80080ee:	bf00      	nop
 80080f0:	20000014 	.word	0x20000014
 80080f4:	0800a10d 	.word	0x0800a10d
 80080f8:	0800a11a 	.word	0x0800a11a
 80080fc:	0800a148 	.word	0x0800a148

08008100 <fiprintf>:
 8008100:	b40e      	push	{r1, r2, r3}
 8008102:	b503      	push	{r0, r1, lr}
 8008104:	4601      	mov	r1, r0
 8008106:	ab03      	add	r3, sp, #12
 8008108:	4805      	ldr	r0, [pc, #20]	; (8008120 <fiprintf+0x20>)
 800810a:	f853 2b04 	ldr.w	r2, [r3], #4
 800810e:	6800      	ldr	r0, [r0, #0]
 8008110:	9301      	str	r3, [sp, #4]
 8008112:	f000 f883 	bl	800821c <_vfiprintf_r>
 8008116:	b002      	add	sp, #8
 8008118:	f85d eb04 	ldr.w	lr, [sp], #4
 800811c:	b003      	add	sp, #12
 800811e:	4770      	bx	lr
 8008120:	20000014 	.word	0x20000014

08008124 <memmove>:
 8008124:	4288      	cmp	r0, r1
 8008126:	b510      	push	{r4, lr}
 8008128:	eb01 0402 	add.w	r4, r1, r2
 800812c:	d902      	bls.n	8008134 <memmove+0x10>
 800812e:	4284      	cmp	r4, r0
 8008130:	4623      	mov	r3, r4
 8008132:	d807      	bhi.n	8008144 <memmove+0x20>
 8008134:	1e43      	subs	r3, r0, #1
 8008136:	42a1      	cmp	r1, r4
 8008138:	d008      	beq.n	800814c <memmove+0x28>
 800813a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800813e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008142:	e7f8      	b.n	8008136 <memmove+0x12>
 8008144:	4601      	mov	r1, r0
 8008146:	4402      	add	r2, r0
 8008148:	428a      	cmp	r2, r1
 800814a:	d100      	bne.n	800814e <memmove+0x2a>
 800814c:	bd10      	pop	{r4, pc}
 800814e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008156:	e7f7      	b.n	8008148 <memmove+0x24>

08008158 <__malloc_lock>:
 8008158:	4801      	ldr	r0, [pc, #4]	; (8008160 <__malloc_lock+0x8>)
 800815a:	f000 bc0b 	b.w	8008974 <__retarget_lock_acquire_recursive>
 800815e:	bf00      	nop
 8008160:	200006d4 	.word	0x200006d4

08008164 <__malloc_unlock>:
 8008164:	4801      	ldr	r0, [pc, #4]	; (800816c <__malloc_unlock+0x8>)
 8008166:	f000 bc06 	b.w	8008976 <__retarget_lock_release_recursive>
 800816a:	bf00      	nop
 800816c:	200006d4 	.word	0x200006d4

08008170 <_realloc_r>:
 8008170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008174:	4680      	mov	r8, r0
 8008176:	4614      	mov	r4, r2
 8008178:	460e      	mov	r6, r1
 800817a:	b921      	cbnz	r1, 8008186 <_realloc_r+0x16>
 800817c:	4611      	mov	r1, r2
 800817e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008182:	f7ff bd97 	b.w	8007cb4 <_malloc_r>
 8008186:	b92a      	cbnz	r2, 8008194 <_realloc_r+0x24>
 8008188:	f7ff fd2c 	bl	8007be4 <_free_r>
 800818c:	4625      	mov	r5, r4
 800818e:	4628      	mov	r0, r5
 8008190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008194:	f000 fc56 	bl	8008a44 <_malloc_usable_size_r>
 8008198:	4284      	cmp	r4, r0
 800819a:	4607      	mov	r7, r0
 800819c:	d802      	bhi.n	80081a4 <_realloc_r+0x34>
 800819e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081a2:	d812      	bhi.n	80081ca <_realloc_r+0x5a>
 80081a4:	4621      	mov	r1, r4
 80081a6:	4640      	mov	r0, r8
 80081a8:	f7ff fd84 	bl	8007cb4 <_malloc_r>
 80081ac:	4605      	mov	r5, r0
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d0ed      	beq.n	800818e <_realloc_r+0x1e>
 80081b2:	42bc      	cmp	r4, r7
 80081b4:	4622      	mov	r2, r4
 80081b6:	4631      	mov	r1, r6
 80081b8:	bf28      	it	cs
 80081ba:	463a      	movcs	r2, r7
 80081bc:	f7ff f838 	bl	8007230 <memcpy>
 80081c0:	4631      	mov	r1, r6
 80081c2:	4640      	mov	r0, r8
 80081c4:	f7ff fd0e 	bl	8007be4 <_free_r>
 80081c8:	e7e1      	b.n	800818e <_realloc_r+0x1e>
 80081ca:	4635      	mov	r5, r6
 80081cc:	e7df      	b.n	800818e <_realloc_r+0x1e>

080081ce <__sfputc_r>:
 80081ce:	6893      	ldr	r3, [r2, #8]
 80081d0:	b410      	push	{r4}
 80081d2:	3b01      	subs	r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	6093      	str	r3, [r2, #8]
 80081d8:	da07      	bge.n	80081ea <__sfputc_r+0x1c>
 80081da:	6994      	ldr	r4, [r2, #24]
 80081dc:	42a3      	cmp	r3, r4
 80081de:	db01      	blt.n	80081e4 <__sfputc_r+0x16>
 80081e0:	290a      	cmp	r1, #10
 80081e2:	d102      	bne.n	80081ea <__sfputc_r+0x1c>
 80081e4:	bc10      	pop	{r4}
 80081e6:	f000 b949 	b.w	800847c <__swbuf_r>
 80081ea:	6813      	ldr	r3, [r2, #0]
 80081ec:	1c58      	adds	r0, r3, #1
 80081ee:	6010      	str	r0, [r2, #0]
 80081f0:	7019      	strb	r1, [r3, #0]
 80081f2:	4608      	mov	r0, r1
 80081f4:	bc10      	pop	{r4}
 80081f6:	4770      	bx	lr

080081f8 <__sfputs_r>:
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fa:	4606      	mov	r6, r0
 80081fc:	460f      	mov	r7, r1
 80081fe:	4614      	mov	r4, r2
 8008200:	18d5      	adds	r5, r2, r3
 8008202:	42ac      	cmp	r4, r5
 8008204:	d101      	bne.n	800820a <__sfputs_r+0x12>
 8008206:	2000      	movs	r0, #0
 8008208:	e007      	b.n	800821a <__sfputs_r+0x22>
 800820a:	463a      	mov	r2, r7
 800820c:	4630      	mov	r0, r6
 800820e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008212:	f7ff ffdc 	bl	80081ce <__sfputc_r>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	d1f3      	bne.n	8008202 <__sfputs_r+0xa>
 800821a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800821c <_vfiprintf_r>:
 800821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008220:	460d      	mov	r5, r1
 8008222:	4614      	mov	r4, r2
 8008224:	4698      	mov	r8, r3
 8008226:	4606      	mov	r6, r0
 8008228:	b09d      	sub	sp, #116	; 0x74
 800822a:	b118      	cbz	r0, 8008234 <_vfiprintf_r+0x18>
 800822c:	6983      	ldr	r3, [r0, #24]
 800822e:	b90b      	cbnz	r3, 8008234 <_vfiprintf_r+0x18>
 8008230:	f000 fb02 	bl	8008838 <__sinit>
 8008234:	4b89      	ldr	r3, [pc, #548]	; (800845c <_vfiprintf_r+0x240>)
 8008236:	429d      	cmp	r5, r3
 8008238:	d11b      	bne.n	8008272 <_vfiprintf_r+0x56>
 800823a:	6875      	ldr	r5, [r6, #4]
 800823c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800823e:	07d9      	lsls	r1, r3, #31
 8008240:	d405      	bmi.n	800824e <_vfiprintf_r+0x32>
 8008242:	89ab      	ldrh	r3, [r5, #12]
 8008244:	059a      	lsls	r2, r3, #22
 8008246:	d402      	bmi.n	800824e <_vfiprintf_r+0x32>
 8008248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800824a:	f000 fb93 	bl	8008974 <__retarget_lock_acquire_recursive>
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	071b      	lsls	r3, r3, #28
 8008252:	d501      	bpl.n	8008258 <_vfiprintf_r+0x3c>
 8008254:	692b      	ldr	r3, [r5, #16]
 8008256:	b9eb      	cbnz	r3, 8008294 <_vfiprintf_r+0x78>
 8008258:	4629      	mov	r1, r5
 800825a:	4630      	mov	r0, r6
 800825c:	f000 f960 	bl	8008520 <__swsetup_r>
 8008260:	b1c0      	cbz	r0, 8008294 <_vfiprintf_r+0x78>
 8008262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008264:	07dc      	lsls	r4, r3, #31
 8008266:	d50e      	bpl.n	8008286 <_vfiprintf_r+0x6a>
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	b01d      	add	sp, #116	; 0x74
 800826e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008272:	4b7b      	ldr	r3, [pc, #492]	; (8008460 <_vfiprintf_r+0x244>)
 8008274:	429d      	cmp	r5, r3
 8008276:	d101      	bne.n	800827c <_vfiprintf_r+0x60>
 8008278:	68b5      	ldr	r5, [r6, #8]
 800827a:	e7df      	b.n	800823c <_vfiprintf_r+0x20>
 800827c:	4b79      	ldr	r3, [pc, #484]	; (8008464 <_vfiprintf_r+0x248>)
 800827e:	429d      	cmp	r5, r3
 8008280:	bf08      	it	eq
 8008282:	68f5      	ldreq	r5, [r6, #12]
 8008284:	e7da      	b.n	800823c <_vfiprintf_r+0x20>
 8008286:	89ab      	ldrh	r3, [r5, #12]
 8008288:	0598      	lsls	r0, r3, #22
 800828a:	d4ed      	bmi.n	8008268 <_vfiprintf_r+0x4c>
 800828c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800828e:	f000 fb72 	bl	8008976 <__retarget_lock_release_recursive>
 8008292:	e7e9      	b.n	8008268 <_vfiprintf_r+0x4c>
 8008294:	2300      	movs	r3, #0
 8008296:	9309      	str	r3, [sp, #36]	; 0x24
 8008298:	2320      	movs	r3, #32
 800829a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800829e:	2330      	movs	r3, #48	; 0x30
 80082a0:	f04f 0901 	mov.w	r9, #1
 80082a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80082a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008468 <_vfiprintf_r+0x24c>
 80082ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082b0:	4623      	mov	r3, r4
 80082b2:	469a      	mov	sl, r3
 80082b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082b8:	b10a      	cbz	r2, 80082be <_vfiprintf_r+0xa2>
 80082ba:	2a25      	cmp	r2, #37	; 0x25
 80082bc:	d1f9      	bne.n	80082b2 <_vfiprintf_r+0x96>
 80082be:	ebba 0b04 	subs.w	fp, sl, r4
 80082c2:	d00b      	beq.n	80082dc <_vfiprintf_r+0xc0>
 80082c4:	465b      	mov	r3, fp
 80082c6:	4622      	mov	r2, r4
 80082c8:	4629      	mov	r1, r5
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7ff ff94 	bl	80081f8 <__sfputs_r>
 80082d0:	3001      	adds	r0, #1
 80082d2:	f000 80aa 	beq.w	800842a <_vfiprintf_r+0x20e>
 80082d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082d8:	445a      	add	r2, fp
 80082da:	9209      	str	r2, [sp, #36]	; 0x24
 80082dc:	f89a 3000 	ldrb.w	r3, [sl]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 80a2 	beq.w	800842a <_vfiprintf_r+0x20e>
 80082e6:	2300      	movs	r3, #0
 80082e8:	f04f 32ff 	mov.w	r2, #4294967295
 80082ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082f0:	f10a 0a01 	add.w	sl, sl, #1
 80082f4:	9304      	str	r3, [sp, #16]
 80082f6:	9307      	str	r3, [sp, #28]
 80082f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082fc:	931a      	str	r3, [sp, #104]	; 0x68
 80082fe:	4654      	mov	r4, sl
 8008300:	2205      	movs	r2, #5
 8008302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008306:	4858      	ldr	r0, [pc, #352]	; (8008468 <_vfiprintf_r+0x24c>)
 8008308:	f7fe ff84 	bl	8007214 <memchr>
 800830c:	9a04      	ldr	r2, [sp, #16]
 800830e:	b9d8      	cbnz	r0, 8008348 <_vfiprintf_r+0x12c>
 8008310:	06d1      	lsls	r1, r2, #27
 8008312:	bf44      	itt	mi
 8008314:	2320      	movmi	r3, #32
 8008316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800831a:	0713      	lsls	r3, r2, #28
 800831c:	bf44      	itt	mi
 800831e:	232b      	movmi	r3, #43	; 0x2b
 8008320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008324:	f89a 3000 	ldrb.w	r3, [sl]
 8008328:	2b2a      	cmp	r3, #42	; 0x2a
 800832a:	d015      	beq.n	8008358 <_vfiprintf_r+0x13c>
 800832c:	4654      	mov	r4, sl
 800832e:	2000      	movs	r0, #0
 8008330:	f04f 0c0a 	mov.w	ip, #10
 8008334:	9a07      	ldr	r2, [sp, #28]
 8008336:	4621      	mov	r1, r4
 8008338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800833c:	3b30      	subs	r3, #48	; 0x30
 800833e:	2b09      	cmp	r3, #9
 8008340:	d94e      	bls.n	80083e0 <_vfiprintf_r+0x1c4>
 8008342:	b1b0      	cbz	r0, 8008372 <_vfiprintf_r+0x156>
 8008344:	9207      	str	r2, [sp, #28]
 8008346:	e014      	b.n	8008372 <_vfiprintf_r+0x156>
 8008348:	eba0 0308 	sub.w	r3, r0, r8
 800834c:	fa09 f303 	lsl.w	r3, r9, r3
 8008350:	4313      	orrs	r3, r2
 8008352:	46a2      	mov	sl, r4
 8008354:	9304      	str	r3, [sp, #16]
 8008356:	e7d2      	b.n	80082fe <_vfiprintf_r+0xe2>
 8008358:	9b03      	ldr	r3, [sp, #12]
 800835a:	1d19      	adds	r1, r3, #4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	9103      	str	r1, [sp, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	bfbb      	ittet	lt
 8008364:	425b      	neglt	r3, r3
 8008366:	f042 0202 	orrlt.w	r2, r2, #2
 800836a:	9307      	strge	r3, [sp, #28]
 800836c:	9307      	strlt	r3, [sp, #28]
 800836e:	bfb8      	it	lt
 8008370:	9204      	strlt	r2, [sp, #16]
 8008372:	7823      	ldrb	r3, [r4, #0]
 8008374:	2b2e      	cmp	r3, #46	; 0x2e
 8008376:	d10c      	bne.n	8008392 <_vfiprintf_r+0x176>
 8008378:	7863      	ldrb	r3, [r4, #1]
 800837a:	2b2a      	cmp	r3, #42	; 0x2a
 800837c:	d135      	bne.n	80083ea <_vfiprintf_r+0x1ce>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	3402      	adds	r4, #2
 8008382:	1d1a      	adds	r2, r3, #4
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	9203      	str	r2, [sp, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	bfb8      	it	lt
 800838c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008390:	9305      	str	r3, [sp, #20]
 8008392:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800846c <_vfiprintf_r+0x250>
 8008396:	2203      	movs	r2, #3
 8008398:	4650      	mov	r0, sl
 800839a:	7821      	ldrb	r1, [r4, #0]
 800839c:	f7fe ff3a 	bl	8007214 <memchr>
 80083a0:	b140      	cbz	r0, 80083b4 <_vfiprintf_r+0x198>
 80083a2:	2340      	movs	r3, #64	; 0x40
 80083a4:	eba0 000a 	sub.w	r0, r0, sl
 80083a8:	fa03 f000 	lsl.w	r0, r3, r0
 80083ac:	9b04      	ldr	r3, [sp, #16]
 80083ae:	3401      	adds	r4, #1
 80083b0:	4303      	orrs	r3, r0
 80083b2:	9304      	str	r3, [sp, #16]
 80083b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b8:	2206      	movs	r2, #6
 80083ba:	482d      	ldr	r0, [pc, #180]	; (8008470 <_vfiprintf_r+0x254>)
 80083bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083c0:	f7fe ff28 	bl	8007214 <memchr>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d03f      	beq.n	8008448 <_vfiprintf_r+0x22c>
 80083c8:	4b2a      	ldr	r3, [pc, #168]	; (8008474 <_vfiprintf_r+0x258>)
 80083ca:	bb1b      	cbnz	r3, 8008414 <_vfiprintf_r+0x1f8>
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	3307      	adds	r3, #7
 80083d0:	f023 0307 	bic.w	r3, r3, #7
 80083d4:	3308      	adds	r3, #8
 80083d6:	9303      	str	r3, [sp, #12]
 80083d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083da:	443b      	add	r3, r7
 80083dc:	9309      	str	r3, [sp, #36]	; 0x24
 80083de:	e767      	b.n	80082b0 <_vfiprintf_r+0x94>
 80083e0:	460c      	mov	r4, r1
 80083e2:	2001      	movs	r0, #1
 80083e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80083e8:	e7a5      	b.n	8008336 <_vfiprintf_r+0x11a>
 80083ea:	2300      	movs	r3, #0
 80083ec:	f04f 0c0a 	mov.w	ip, #10
 80083f0:	4619      	mov	r1, r3
 80083f2:	3401      	adds	r4, #1
 80083f4:	9305      	str	r3, [sp, #20]
 80083f6:	4620      	mov	r0, r4
 80083f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083fc:	3a30      	subs	r2, #48	; 0x30
 80083fe:	2a09      	cmp	r2, #9
 8008400:	d903      	bls.n	800840a <_vfiprintf_r+0x1ee>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0c5      	beq.n	8008392 <_vfiprintf_r+0x176>
 8008406:	9105      	str	r1, [sp, #20]
 8008408:	e7c3      	b.n	8008392 <_vfiprintf_r+0x176>
 800840a:	4604      	mov	r4, r0
 800840c:	2301      	movs	r3, #1
 800840e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008412:	e7f0      	b.n	80083f6 <_vfiprintf_r+0x1da>
 8008414:	ab03      	add	r3, sp, #12
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	462a      	mov	r2, r5
 800841a:	4630      	mov	r0, r6
 800841c:	4b16      	ldr	r3, [pc, #88]	; (8008478 <_vfiprintf_r+0x25c>)
 800841e:	a904      	add	r1, sp, #16
 8008420:	f7fc f876 	bl	8004510 <_printf_float>
 8008424:	4607      	mov	r7, r0
 8008426:	1c78      	adds	r0, r7, #1
 8008428:	d1d6      	bne.n	80083d8 <_vfiprintf_r+0x1bc>
 800842a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800842c:	07d9      	lsls	r1, r3, #31
 800842e:	d405      	bmi.n	800843c <_vfiprintf_r+0x220>
 8008430:	89ab      	ldrh	r3, [r5, #12]
 8008432:	059a      	lsls	r2, r3, #22
 8008434:	d402      	bmi.n	800843c <_vfiprintf_r+0x220>
 8008436:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008438:	f000 fa9d 	bl	8008976 <__retarget_lock_release_recursive>
 800843c:	89ab      	ldrh	r3, [r5, #12]
 800843e:	065b      	lsls	r3, r3, #25
 8008440:	f53f af12 	bmi.w	8008268 <_vfiprintf_r+0x4c>
 8008444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008446:	e711      	b.n	800826c <_vfiprintf_r+0x50>
 8008448:	ab03      	add	r3, sp, #12
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	462a      	mov	r2, r5
 800844e:	4630      	mov	r0, r6
 8008450:	4b09      	ldr	r3, [pc, #36]	; (8008478 <_vfiprintf_r+0x25c>)
 8008452:	a904      	add	r1, sp, #16
 8008454:	f7fc faf8 	bl	8004a48 <_printf_i>
 8008458:	e7e4      	b.n	8008424 <_vfiprintf_r+0x208>
 800845a:	bf00      	nop
 800845c:	0800a16c 	.word	0x0800a16c
 8008460:	0800a18c 	.word	0x0800a18c
 8008464:	0800a14c 	.word	0x0800a14c
 8008468:	0800a0fc 	.word	0x0800a0fc
 800846c:	0800a102 	.word	0x0800a102
 8008470:	0800a106 	.word	0x0800a106
 8008474:	08004511 	.word	0x08004511
 8008478:	080081f9 	.word	0x080081f9

0800847c <__swbuf_r>:
 800847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847e:	460e      	mov	r6, r1
 8008480:	4614      	mov	r4, r2
 8008482:	4605      	mov	r5, r0
 8008484:	b118      	cbz	r0, 800848e <__swbuf_r+0x12>
 8008486:	6983      	ldr	r3, [r0, #24]
 8008488:	b90b      	cbnz	r3, 800848e <__swbuf_r+0x12>
 800848a:	f000 f9d5 	bl	8008838 <__sinit>
 800848e:	4b21      	ldr	r3, [pc, #132]	; (8008514 <__swbuf_r+0x98>)
 8008490:	429c      	cmp	r4, r3
 8008492:	d12b      	bne.n	80084ec <__swbuf_r+0x70>
 8008494:	686c      	ldr	r4, [r5, #4]
 8008496:	69a3      	ldr	r3, [r4, #24]
 8008498:	60a3      	str	r3, [r4, #8]
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	071a      	lsls	r2, r3, #28
 800849e:	d52f      	bpl.n	8008500 <__swbuf_r+0x84>
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	b36b      	cbz	r3, 8008500 <__swbuf_r+0x84>
 80084a4:	6923      	ldr	r3, [r4, #16]
 80084a6:	6820      	ldr	r0, [r4, #0]
 80084a8:	b2f6      	uxtb	r6, r6
 80084aa:	1ac0      	subs	r0, r0, r3
 80084ac:	6963      	ldr	r3, [r4, #20]
 80084ae:	4637      	mov	r7, r6
 80084b0:	4283      	cmp	r3, r0
 80084b2:	dc04      	bgt.n	80084be <__swbuf_r+0x42>
 80084b4:	4621      	mov	r1, r4
 80084b6:	4628      	mov	r0, r5
 80084b8:	f000 f92a 	bl	8008710 <_fflush_r>
 80084bc:	bb30      	cbnz	r0, 800850c <__swbuf_r+0x90>
 80084be:	68a3      	ldr	r3, [r4, #8]
 80084c0:	3001      	adds	r0, #1
 80084c2:	3b01      	subs	r3, #1
 80084c4:	60a3      	str	r3, [r4, #8]
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	1c5a      	adds	r2, r3, #1
 80084ca:	6022      	str	r2, [r4, #0]
 80084cc:	701e      	strb	r6, [r3, #0]
 80084ce:	6963      	ldr	r3, [r4, #20]
 80084d0:	4283      	cmp	r3, r0
 80084d2:	d004      	beq.n	80084de <__swbuf_r+0x62>
 80084d4:	89a3      	ldrh	r3, [r4, #12]
 80084d6:	07db      	lsls	r3, r3, #31
 80084d8:	d506      	bpl.n	80084e8 <__swbuf_r+0x6c>
 80084da:	2e0a      	cmp	r6, #10
 80084dc:	d104      	bne.n	80084e8 <__swbuf_r+0x6c>
 80084de:	4621      	mov	r1, r4
 80084e0:	4628      	mov	r0, r5
 80084e2:	f000 f915 	bl	8008710 <_fflush_r>
 80084e6:	b988      	cbnz	r0, 800850c <__swbuf_r+0x90>
 80084e8:	4638      	mov	r0, r7
 80084ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ec:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <__swbuf_r+0x9c>)
 80084ee:	429c      	cmp	r4, r3
 80084f0:	d101      	bne.n	80084f6 <__swbuf_r+0x7a>
 80084f2:	68ac      	ldr	r4, [r5, #8]
 80084f4:	e7cf      	b.n	8008496 <__swbuf_r+0x1a>
 80084f6:	4b09      	ldr	r3, [pc, #36]	; (800851c <__swbuf_r+0xa0>)
 80084f8:	429c      	cmp	r4, r3
 80084fa:	bf08      	it	eq
 80084fc:	68ec      	ldreq	r4, [r5, #12]
 80084fe:	e7ca      	b.n	8008496 <__swbuf_r+0x1a>
 8008500:	4621      	mov	r1, r4
 8008502:	4628      	mov	r0, r5
 8008504:	f000 f80c 	bl	8008520 <__swsetup_r>
 8008508:	2800      	cmp	r0, #0
 800850a:	d0cb      	beq.n	80084a4 <__swbuf_r+0x28>
 800850c:	f04f 37ff 	mov.w	r7, #4294967295
 8008510:	e7ea      	b.n	80084e8 <__swbuf_r+0x6c>
 8008512:	bf00      	nop
 8008514:	0800a16c 	.word	0x0800a16c
 8008518:	0800a18c 	.word	0x0800a18c
 800851c:	0800a14c 	.word	0x0800a14c

08008520 <__swsetup_r>:
 8008520:	4b32      	ldr	r3, [pc, #200]	; (80085ec <__swsetup_r+0xcc>)
 8008522:	b570      	push	{r4, r5, r6, lr}
 8008524:	681d      	ldr	r5, [r3, #0]
 8008526:	4606      	mov	r6, r0
 8008528:	460c      	mov	r4, r1
 800852a:	b125      	cbz	r5, 8008536 <__swsetup_r+0x16>
 800852c:	69ab      	ldr	r3, [r5, #24]
 800852e:	b913      	cbnz	r3, 8008536 <__swsetup_r+0x16>
 8008530:	4628      	mov	r0, r5
 8008532:	f000 f981 	bl	8008838 <__sinit>
 8008536:	4b2e      	ldr	r3, [pc, #184]	; (80085f0 <__swsetup_r+0xd0>)
 8008538:	429c      	cmp	r4, r3
 800853a:	d10f      	bne.n	800855c <__swsetup_r+0x3c>
 800853c:	686c      	ldr	r4, [r5, #4]
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008544:	0719      	lsls	r1, r3, #28
 8008546:	d42c      	bmi.n	80085a2 <__swsetup_r+0x82>
 8008548:	06dd      	lsls	r5, r3, #27
 800854a:	d411      	bmi.n	8008570 <__swsetup_r+0x50>
 800854c:	2309      	movs	r3, #9
 800854e:	6033      	str	r3, [r6, #0]
 8008550:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008554:	f04f 30ff 	mov.w	r0, #4294967295
 8008558:	81a3      	strh	r3, [r4, #12]
 800855a:	e03e      	b.n	80085da <__swsetup_r+0xba>
 800855c:	4b25      	ldr	r3, [pc, #148]	; (80085f4 <__swsetup_r+0xd4>)
 800855e:	429c      	cmp	r4, r3
 8008560:	d101      	bne.n	8008566 <__swsetup_r+0x46>
 8008562:	68ac      	ldr	r4, [r5, #8]
 8008564:	e7eb      	b.n	800853e <__swsetup_r+0x1e>
 8008566:	4b24      	ldr	r3, [pc, #144]	; (80085f8 <__swsetup_r+0xd8>)
 8008568:	429c      	cmp	r4, r3
 800856a:	bf08      	it	eq
 800856c:	68ec      	ldreq	r4, [r5, #12]
 800856e:	e7e6      	b.n	800853e <__swsetup_r+0x1e>
 8008570:	0758      	lsls	r0, r3, #29
 8008572:	d512      	bpl.n	800859a <__swsetup_r+0x7a>
 8008574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008576:	b141      	cbz	r1, 800858a <__swsetup_r+0x6a>
 8008578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800857c:	4299      	cmp	r1, r3
 800857e:	d002      	beq.n	8008586 <__swsetup_r+0x66>
 8008580:	4630      	mov	r0, r6
 8008582:	f7ff fb2f 	bl	8007be4 <_free_r>
 8008586:	2300      	movs	r3, #0
 8008588:	6363      	str	r3, [r4, #52]	; 0x34
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008590:	81a3      	strh	r3, [r4, #12]
 8008592:	2300      	movs	r3, #0
 8008594:	6063      	str	r3, [r4, #4]
 8008596:	6923      	ldr	r3, [r4, #16]
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	f043 0308 	orr.w	r3, r3, #8
 80085a0:	81a3      	strh	r3, [r4, #12]
 80085a2:	6923      	ldr	r3, [r4, #16]
 80085a4:	b94b      	cbnz	r3, 80085ba <__swsetup_r+0x9a>
 80085a6:	89a3      	ldrh	r3, [r4, #12]
 80085a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085b0:	d003      	beq.n	80085ba <__swsetup_r+0x9a>
 80085b2:	4621      	mov	r1, r4
 80085b4:	4630      	mov	r0, r6
 80085b6:	f000 fa05 	bl	80089c4 <__smakebuf_r>
 80085ba:	89a0      	ldrh	r0, [r4, #12]
 80085bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085c0:	f010 0301 	ands.w	r3, r0, #1
 80085c4:	d00a      	beq.n	80085dc <__swsetup_r+0xbc>
 80085c6:	2300      	movs	r3, #0
 80085c8:	60a3      	str	r3, [r4, #8]
 80085ca:	6963      	ldr	r3, [r4, #20]
 80085cc:	425b      	negs	r3, r3
 80085ce:	61a3      	str	r3, [r4, #24]
 80085d0:	6923      	ldr	r3, [r4, #16]
 80085d2:	b943      	cbnz	r3, 80085e6 <__swsetup_r+0xc6>
 80085d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085d8:	d1ba      	bne.n	8008550 <__swsetup_r+0x30>
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	0781      	lsls	r1, r0, #30
 80085de:	bf58      	it	pl
 80085e0:	6963      	ldrpl	r3, [r4, #20]
 80085e2:	60a3      	str	r3, [r4, #8]
 80085e4:	e7f4      	b.n	80085d0 <__swsetup_r+0xb0>
 80085e6:	2000      	movs	r0, #0
 80085e8:	e7f7      	b.n	80085da <__swsetup_r+0xba>
 80085ea:	bf00      	nop
 80085ec:	20000014 	.word	0x20000014
 80085f0:	0800a16c 	.word	0x0800a16c
 80085f4:	0800a18c 	.word	0x0800a18c
 80085f8:	0800a14c 	.word	0x0800a14c

080085fc <abort>:
 80085fc:	2006      	movs	r0, #6
 80085fe:	b508      	push	{r3, lr}
 8008600:	f000 fa50 	bl	8008aa4 <raise>
 8008604:	2001      	movs	r0, #1
 8008606:	f7f9 fa73 	bl	8001af0 <_exit>
	...

0800860c <__sflush_r>:
 800860c:	898a      	ldrh	r2, [r1, #12]
 800860e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008610:	4605      	mov	r5, r0
 8008612:	0710      	lsls	r0, r2, #28
 8008614:	460c      	mov	r4, r1
 8008616:	d457      	bmi.n	80086c8 <__sflush_r+0xbc>
 8008618:	684b      	ldr	r3, [r1, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	dc04      	bgt.n	8008628 <__sflush_r+0x1c>
 800861e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008620:	2b00      	cmp	r3, #0
 8008622:	dc01      	bgt.n	8008628 <__sflush_r+0x1c>
 8008624:	2000      	movs	r0, #0
 8008626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008628:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800862a:	2e00      	cmp	r6, #0
 800862c:	d0fa      	beq.n	8008624 <__sflush_r+0x18>
 800862e:	2300      	movs	r3, #0
 8008630:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008634:	682f      	ldr	r7, [r5, #0]
 8008636:	602b      	str	r3, [r5, #0]
 8008638:	d032      	beq.n	80086a0 <__sflush_r+0x94>
 800863a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800863c:	89a3      	ldrh	r3, [r4, #12]
 800863e:	075a      	lsls	r2, r3, #29
 8008640:	d505      	bpl.n	800864e <__sflush_r+0x42>
 8008642:	6863      	ldr	r3, [r4, #4]
 8008644:	1ac0      	subs	r0, r0, r3
 8008646:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008648:	b10b      	cbz	r3, 800864e <__sflush_r+0x42>
 800864a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800864c:	1ac0      	subs	r0, r0, r3
 800864e:	2300      	movs	r3, #0
 8008650:	4602      	mov	r2, r0
 8008652:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008654:	4628      	mov	r0, r5
 8008656:	6a21      	ldr	r1, [r4, #32]
 8008658:	47b0      	blx	r6
 800865a:	1c43      	adds	r3, r0, #1
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	d106      	bne.n	800866e <__sflush_r+0x62>
 8008660:	6829      	ldr	r1, [r5, #0]
 8008662:	291d      	cmp	r1, #29
 8008664:	d82c      	bhi.n	80086c0 <__sflush_r+0xb4>
 8008666:	4a29      	ldr	r2, [pc, #164]	; (800870c <__sflush_r+0x100>)
 8008668:	40ca      	lsrs	r2, r1
 800866a:	07d6      	lsls	r6, r2, #31
 800866c:	d528      	bpl.n	80086c0 <__sflush_r+0xb4>
 800866e:	2200      	movs	r2, #0
 8008670:	6062      	str	r2, [r4, #4]
 8008672:	6922      	ldr	r2, [r4, #16]
 8008674:	04d9      	lsls	r1, r3, #19
 8008676:	6022      	str	r2, [r4, #0]
 8008678:	d504      	bpl.n	8008684 <__sflush_r+0x78>
 800867a:	1c42      	adds	r2, r0, #1
 800867c:	d101      	bne.n	8008682 <__sflush_r+0x76>
 800867e:	682b      	ldr	r3, [r5, #0]
 8008680:	b903      	cbnz	r3, 8008684 <__sflush_r+0x78>
 8008682:	6560      	str	r0, [r4, #84]	; 0x54
 8008684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008686:	602f      	str	r7, [r5, #0]
 8008688:	2900      	cmp	r1, #0
 800868a:	d0cb      	beq.n	8008624 <__sflush_r+0x18>
 800868c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008690:	4299      	cmp	r1, r3
 8008692:	d002      	beq.n	800869a <__sflush_r+0x8e>
 8008694:	4628      	mov	r0, r5
 8008696:	f7ff faa5 	bl	8007be4 <_free_r>
 800869a:	2000      	movs	r0, #0
 800869c:	6360      	str	r0, [r4, #52]	; 0x34
 800869e:	e7c2      	b.n	8008626 <__sflush_r+0x1a>
 80086a0:	6a21      	ldr	r1, [r4, #32]
 80086a2:	2301      	movs	r3, #1
 80086a4:	4628      	mov	r0, r5
 80086a6:	47b0      	blx	r6
 80086a8:	1c41      	adds	r1, r0, #1
 80086aa:	d1c7      	bne.n	800863c <__sflush_r+0x30>
 80086ac:	682b      	ldr	r3, [r5, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d0c4      	beq.n	800863c <__sflush_r+0x30>
 80086b2:	2b1d      	cmp	r3, #29
 80086b4:	d001      	beq.n	80086ba <__sflush_r+0xae>
 80086b6:	2b16      	cmp	r3, #22
 80086b8:	d101      	bne.n	80086be <__sflush_r+0xb2>
 80086ba:	602f      	str	r7, [r5, #0]
 80086bc:	e7b2      	b.n	8008624 <__sflush_r+0x18>
 80086be:	89a3      	ldrh	r3, [r4, #12]
 80086c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c4:	81a3      	strh	r3, [r4, #12]
 80086c6:	e7ae      	b.n	8008626 <__sflush_r+0x1a>
 80086c8:	690f      	ldr	r7, [r1, #16]
 80086ca:	2f00      	cmp	r7, #0
 80086cc:	d0aa      	beq.n	8008624 <__sflush_r+0x18>
 80086ce:	0793      	lsls	r3, r2, #30
 80086d0:	bf18      	it	ne
 80086d2:	2300      	movne	r3, #0
 80086d4:	680e      	ldr	r6, [r1, #0]
 80086d6:	bf08      	it	eq
 80086d8:	694b      	ldreq	r3, [r1, #20]
 80086da:	1bf6      	subs	r6, r6, r7
 80086dc:	600f      	str	r7, [r1, #0]
 80086de:	608b      	str	r3, [r1, #8]
 80086e0:	2e00      	cmp	r6, #0
 80086e2:	dd9f      	ble.n	8008624 <__sflush_r+0x18>
 80086e4:	4633      	mov	r3, r6
 80086e6:	463a      	mov	r2, r7
 80086e8:	4628      	mov	r0, r5
 80086ea:	6a21      	ldr	r1, [r4, #32]
 80086ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80086f0:	47e0      	blx	ip
 80086f2:	2800      	cmp	r0, #0
 80086f4:	dc06      	bgt.n	8008704 <__sflush_r+0xf8>
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	f04f 30ff 	mov.w	r0, #4294967295
 80086fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008700:	81a3      	strh	r3, [r4, #12]
 8008702:	e790      	b.n	8008626 <__sflush_r+0x1a>
 8008704:	4407      	add	r7, r0
 8008706:	1a36      	subs	r6, r6, r0
 8008708:	e7ea      	b.n	80086e0 <__sflush_r+0xd4>
 800870a:	bf00      	nop
 800870c:	20400001 	.word	0x20400001

08008710 <_fflush_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	690b      	ldr	r3, [r1, #16]
 8008714:	4605      	mov	r5, r0
 8008716:	460c      	mov	r4, r1
 8008718:	b913      	cbnz	r3, 8008720 <_fflush_r+0x10>
 800871a:	2500      	movs	r5, #0
 800871c:	4628      	mov	r0, r5
 800871e:	bd38      	pop	{r3, r4, r5, pc}
 8008720:	b118      	cbz	r0, 800872a <_fflush_r+0x1a>
 8008722:	6983      	ldr	r3, [r0, #24]
 8008724:	b90b      	cbnz	r3, 800872a <_fflush_r+0x1a>
 8008726:	f000 f887 	bl	8008838 <__sinit>
 800872a:	4b14      	ldr	r3, [pc, #80]	; (800877c <_fflush_r+0x6c>)
 800872c:	429c      	cmp	r4, r3
 800872e:	d11b      	bne.n	8008768 <_fflush_r+0x58>
 8008730:	686c      	ldr	r4, [r5, #4]
 8008732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0ef      	beq.n	800871a <_fflush_r+0xa>
 800873a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800873c:	07d0      	lsls	r0, r2, #31
 800873e:	d404      	bmi.n	800874a <_fflush_r+0x3a>
 8008740:	0599      	lsls	r1, r3, #22
 8008742:	d402      	bmi.n	800874a <_fflush_r+0x3a>
 8008744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008746:	f000 f915 	bl	8008974 <__retarget_lock_acquire_recursive>
 800874a:	4628      	mov	r0, r5
 800874c:	4621      	mov	r1, r4
 800874e:	f7ff ff5d 	bl	800860c <__sflush_r>
 8008752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008754:	4605      	mov	r5, r0
 8008756:	07da      	lsls	r2, r3, #31
 8008758:	d4e0      	bmi.n	800871c <_fflush_r+0xc>
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	059b      	lsls	r3, r3, #22
 800875e:	d4dd      	bmi.n	800871c <_fflush_r+0xc>
 8008760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008762:	f000 f908 	bl	8008976 <__retarget_lock_release_recursive>
 8008766:	e7d9      	b.n	800871c <_fflush_r+0xc>
 8008768:	4b05      	ldr	r3, [pc, #20]	; (8008780 <_fflush_r+0x70>)
 800876a:	429c      	cmp	r4, r3
 800876c:	d101      	bne.n	8008772 <_fflush_r+0x62>
 800876e:	68ac      	ldr	r4, [r5, #8]
 8008770:	e7df      	b.n	8008732 <_fflush_r+0x22>
 8008772:	4b04      	ldr	r3, [pc, #16]	; (8008784 <_fflush_r+0x74>)
 8008774:	429c      	cmp	r4, r3
 8008776:	bf08      	it	eq
 8008778:	68ec      	ldreq	r4, [r5, #12]
 800877a:	e7da      	b.n	8008732 <_fflush_r+0x22>
 800877c:	0800a16c 	.word	0x0800a16c
 8008780:	0800a18c 	.word	0x0800a18c
 8008784:	0800a14c 	.word	0x0800a14c

08008788 <std>:
 8008788:	2300      	movs	r3, #0
 800878a:	b510      	push	{r4, lr}
 800878c:	4604      	mov	r4, r0
 800878e:	e9c0 3300 	strd	r3, r3, [r0]
 8008792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008796:	6083      	str	r3, [r0, #8]
 8008798:	8181      	strh	r1, [r0, #12]
 800879a:	6643      	str	r3, [r0, #100]	; 0x64
 800879c:	81c2      	strh	r2, [r0, #14]
 800879e:	6183      	str	r3, [r0, #24]
 80087a0:	4619      	mov	r1, r3
 80087a2:	2208      	movs	r2, #8
 80087a4:	305c      	adds	r0, #92	; 0x5c
 80087a6:	f7fb fe0d 	bl	80043c4 <memset>
 80087aa:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <std+0x38>)
 80087ac:	6224      	str	r4, [r4, #32]
 80087ae:	6263      	str	r3, [r4, #36]	; 0x24
 80087b0:	4b04      	ldr	r3, [pc, #16]	; (80087c4 <std+0x3c>)
 80087b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80087b4:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <std+0x40>)
 80087b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087b8:	4b04      	ldr	r3, [pc, #16]	; (80087cc <std+0x44>)
 80087ba:	6323      	str	r3, [r4, #48]	; 0x30
 80087bc:	bd10      	pop	{r4, pc}
 80087be:	bf00      	nop
 80087c0:	08008add 	.word	0x08008add
 80087c4:	08008aff 	.word	0x08008aff
 80087c8:	08008b37 	.word	0x08008b37
 80087cc:	08008b5b 	.word	0x08008b5b

080087d0 <_cleanup_r>:
 80087d0:	4901      	ldr	r1, [pc, #4]	; (80087d8 <_cleanup_r+0x8>)
 80087d2:	f000 b8af 	b.w	8008934 <_fwalk_reent>
 80087d6:	bf00      	nop
 80087d8:	08008711 	.word	0x08008711

080087dc <__sfmoreglue>:
 80087dc:	2268      	movs	r2, #104	; 0x68
 80087de:	b570      	push	{r4, r5, r6, lr}
 80087e0:	1e4d      	subs	r5, r1, #1
 80087e2:	4355      	muls	r5, r2
 80087e4:	460e      	mov	r6, r1
 80087e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087ea:	f7ff fa63 	bl	8007cb4 <_malloc_r>
 80087ee:	4604      	mov	r4, r0
 80087f0:	b140      	cbz	r0, 8008804 <__sfmoreglue+0x28>
 80087f2:	2100      	movs	r1, #0
 80087f4:	e9c0 1600 	strd	r1, r6, [r0]
 80087f8:	300c      	adds	r0, #12
 80087fa:	60a0      	str	r0, [r4, #8]
 80087fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008800:	f7fb fde0 	bl	80043c4 <memset>
 8008804:	4620      	mov	r0, r4
 8008806:	bd70      	pop	{r4, r5, r6, pc}

08008808 <__sfp_lock_acquire>:
 8008808:	4801      	ldr	r0, [pc, #4]	; (8008810 <__sfp_lock_acquire+0x8>)
 800880a:	f000 b8b3 	b.w	8008974 <__retarget_lock_acquire_recursive>
 800880e:	bf00      	nop
 8008810:	200006d5 	.word	0x200006d5

08008814 <__sfp_lock_release>:
 8008814:	4801      	ldr	r0, [pc, #4]	; (800881c <__sfp_lock_release+0x8>)
 8008816:	f000 b8ae 	b.w	8008976 <__retarget_lock_release_recursive>
 800881a:	bf00      	nop
 800881c:	200006d5 	.word	0x200006d5

08008820 <__sinit_lock_acquire>:
 8008820:	4801      	ldr	r0, [pc, #4]	; (8008828 <__sinit_lock_acquire+0x8>)
 8008822:	f000 b8a7 	b.w	8008974 <__retarget_lock_acquire_recursive>
 8008826:	bf00      	nop
 8008828:	200006d6 	.word	0x200006d6

0800882c <__sinit_lock_release>:
 800882c:	4801      	ldr	r0, [pc, #4]	; (8008834 <__sinit_lock_release+0x8>)
 800882e:	f000 b8a2 	b.w	8008976 <__retarget_lock_release_recursive>
 8008832:	bf00      	nop
 8008834:	200006d6 	.word	0x200006d6

08008838 <__sinit>:
 8008838:	b510      	push	{r4, lr}
 800883a:	4604      	mov	r4, r0
 800883c:	f7ff fff0 	bl	8008820 <__sinit_lock_acquire>
 8008840:	69a3      	ldr	r3, [r4, #24]
 8008842:	b11b      	cbz	r3, 800884c <__sinit+0x14>
 8008844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008848:	f7ff bff0 	b.w	800882c <__sinit_lock_release>
 800884c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008850:	6523      	str	r3, [r4, #80]	; 0x50
 8008852:	4b13      	ldr	r3, [pc, #76]	; (80088a0 <__sinit+0x68>)
 8008854:	4a13      	ldr	r2, [pc, #76]	; (80088a4 <__sinit+0x6c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	62a2      	str	r2, [r4, #40]	; 0x28
 800885a:	42a3      	cmp	r3, r4
 800885c:	bf08      	it	eq
 800885e:	2301      	moveq	r3, #1
 8008860:	4620      	mov	r0, r4
 8008862:	bf08      	it	eq
 8008864:	61a3      	streq	r3, [r4, #24]
 8008866:	f000 f81f 	bl	80088a8 <__sfp>
 800886a:	6060      	str	r0, [r4, #4]
 800886c:	4620      	mov	r0, r4
 800886e:	f000 f81b 	bl	80088a8 <__sfp>
 8008872:	60a0      	str	r0, [r4, #8]
 8008874:	4620      	mov	r0, r4
 8008876:	f000 f817 	bl	80088a8 <__sfp>
 800887a:	2200      	movs	r2, #0
 800887c:	2104      	movs	r1, #4
 800887e:	60e0      	str	r0, [r4, #12]
 8008880:	6860      	ldr	r0, [r4, #4]
 8008882:	f7ff ff81 	bl	8008788 <std>
 8008886:	2201      	movs	r2, #1
 8008888:	2109      	movs	r1, #9
 800888a:	68a0      	ldr	r0, [r4, #8]
 800888c:	f7ff ff7c 	bl	8008788 <std>
 8008890:	2202      	movs	r2, #2
 8008892:	2112      	movs	r1, #18
 8008894:	68e0      	ldr	r0, [r4, #12]
 8008896:	f7ff ff77 	bl	8008788 <std>
 800889a:	2301      	movs	r3, #1
 800889c:	61a3      	str	r3, [r4, #24]
 800889e:	e7d1      	b.n	8008844 <__sinit+0xc>
 80088a0:	08009d08 	.word	0x08009d08
 80088a4:	080087d1 	.word	0x080087d1

080088a8 <__sfp>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	4607      	mov	r7, r0
 80088ac:	f7ff ffac 	bl	8008808 <__sfp_lock_acquire>
 80088b0:	4b1e      	ldr	r3, [pc, #120]	; (800892c <__sfp+0x84>)
 80088b2:	681e      	ldr	r6, [r3, #0]
 80088b4:	69b3      	ldr	r3, [r6, #24]
 80088b6:	b913      	cbnz	r3, 80088be <__sfp+0x16>
 80088b8:	4630      	mov	r0, r6
 80088ba:	f7ff ffbd 	bl	8008838 <__sinit>
 80088be:	3648      	adds	r6, #72	; 0x48
 80088c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	d503      	bpl.n	80088d0 <__sfp+0x28>
 80088c8:	6833      	ldr	r3, [r6, #0]
 80088ca:	b30b      	cbz	r3, 8008910 <__sfp+0x68>
 80088cc:	6836      	ldr	r6, [r6, #0]
 80088ce:	e7f7      	b.n	80088c0 <__sfp+0x18>
 80088d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088d4:	b9d5      	cbnz	r5, 800890c <__sfp+0x64>
 80088d6:	4b16      	ldr	r3, [pc, #88]	; (8008930 <__sfp+0x88>)
 80088d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088dc:	60e3      	str	r3, [r4, #12]
 80088de:	6665      	str	r5, [r4, #100]	; 0x64
 80088e0:	f000 f847 	bl	8008972 <__retarget_lock_init_recursive>
 80088e4:	f7ff ff96 	bl	8008814 <__sfp_lock_release>
 80088e8:	2208      	movs	r2, #8
 80088ea:	4629      	mov	r1, r5
 80088ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088f4:	6025      	str	r5, [r4, #0]
 80088f6:	61a5      	str	r5, [r4, #24]
 80088f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088fc:	f7fb fd62 	bl	80043c4 <memset>
 8008900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008908:	4620      	mov	r0, r4
 800890a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800890c:	3468      	adds	r4, #104	; 0x68
 800890e:	e7d9      	b.n	80088c4 <__sfp+0x1c>
 8008910:	2104      	movs	r1, #4
 8008912:	4638      	mov	r0, r7
 8008914:	f7ff ff62 	bl	80087dc <__sfmoreglue>
 8008918:	4604      	mov	r4, r0
 800891a:	6030      	str	r0, [r6, #0]
 800891c:	2800      	cmp	r0, #0
 800891e:	d1d5      	bne.n	80088cc <__sfp+0x24>
 8008920:	f7ff ff78 	bl	8008814 <__sfp_lock_release>
 8008924:	230c      	movs	r3, #12
 8008926:	603b      	str	r3, [r7, #0]
 8008928:	e7ee      	b.n	8008908 <__sfp+0x60>
 800892a:	bf00      	nop
 800892c:	08009d08 	.word	0x08009d08
 8008930:	ffff0001 	.word	0xffff0001

08008934 <_fwalk_reent>:
 8008934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008938:	4606      	mov	r6, r0
 800893a:	4688      	mov	r8, r1
 800893c:	2700      	movs	r7, #0
 800893e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008942:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008946:	f1b9 0901 	subs.w	r9, r9, #1
 800894a:	d505      	bpl.n	8008958 <_fwalk_reent+0x24>
 800894c:	6824      	ldr	r4, [r4, #0]
 800894e:	2c00      	cmp	r4, #0
 8008950:	d1f7      	bne.n	8008942 <_fwalk_reent+0xe>
 8008952:	4638      	mov	r0, r7
 8008954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008958:	89ab      	ldrh	r3, [r5, #12]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d907      	bls.n	800896e <_fwalk_reent+0x3a>
 800895e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008962:	3301      	adds	r3, #1
 8008964:	d003      	beq.n	800896e <_fwalk_reent+0x3a>
 8008966:	4629      	mov	r1, r5
 8008968:	4630      	mov	r0, r6
 800896a:	47c0      	blx	r8
 800896c:	4307      	orrs	r7, r0
 800896e:	3568      	adds	r5, #104	; 0x68
 8008970:	e7e9      	b.n	8008946 <_fwalk_reent+0x12>

08008972 <__retarget_lock_init_recursive>:
 8008972:	4770      	bx	lr

08008974 <__retarget_lock_acquire_recursive>:
 8008974:	4770      	bx	lr

08008976 <__retarget_lock_release_recursive>:
 8008976:	4770      	bx	lr

08008978 <__swhatbuf_r>:
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	460e      	mov	r6, r1
 800897c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008980:	4614      	mov	r4, r2
 8008982:	2900      	cmp	r1, #0
 8008984:	461d      	mov	r5, r3
 8008986:	b096      	sub	sp, #88	; 0x58
 8008988:	da08      	bge.n	800899c <__swhatbuf_r+0x24>
 800898a:	2200      	movs	r2, #0
 800898c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008990:	602a      	str	r2, [r5, #0]
 8008992:	061a      	lsls	r2, r3, #24
 8008994:	d410      	bmi.n	80089b8 <__swhatbuf_r+0x40>
 8008996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800899a:	e00e      	b.n	80089ba <__swhatbuf_r+0x42>
 800899c:	466a      	mov	r2, sp
 800899e:	f000 f903 	bl	8008ba8 <_fstat_r>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	dbf1      	blt.n	800898a <__swhatbuf_r+0x12>
 80089a6:	9a01      	ldr	r2, [sp, #4]
 80089a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089b0:	425a      	negs	r2, r3
 80089b2:	415a      	adcs	r2, r3
 80089b4:	602a      	str	r2, [r5, #0]
 80089b6:	e7ee      	b.n	8008996 <__swhatbuf_r+0x1e>
 80089b8:	2340      	movs	r3, #64	; 0x40
 80089ba:	2000      	movs	r0, #0
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	b016      	add	sp, #88	; 0x58
 80089c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080089c4 <__smakebuf_r>:
 80089c4:	898b      	ldrh	r3, [r1, #12]
 80089c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089c8:	079d      	lsls	r5, r3, #30
 80089ca:	4606      	mov	r6, r0
 80089cc:	460c      	mov	r4, r1
 80089ce:	d507      	bpl.n	80089e0 <__smakebuf_r+0x1c>
 80089d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089d4:	6023      	str	r3, [r4, #0]
 80089d6:	6123      	str	r3, [r4, #16]
 80089d8:	2301      	movs	r3, #1
 80089da:	6163      	str	r3, [r4, #20]
 80089dc:	b002      	add	sp, #8
 80089de:	bd70      	pop	{r4, r5, r6, pc}
 80089e0:	466a      	mov	r2, sp
 80089e2:	ab01      	add	r3, sp, #4
 80089e4:	f7ff ffc8 	bl	8008978 <__swhatbuf_r>
 80089e8:	9900      	ldr	r1, [sp, #0]
 80089ea:	4605      	mov	r5, r0
 80089ec:	4630      	mov	r0, r6
 80089ee:	f7ff f961 	bl	8007cb4 <_malloc_r>
 80089f2:	b948      	cbnz	r0, 8008a08 <__smakebuf_r+0x44>
 80089f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089f8:	059a      	lsls	r2, r3, #22
 80089fa:	d4ef      	bmi.n	80089dc <__smakebuf_r+0x18>
 80089fc:	f023 0303 	bic.w	r3, r3, #3
 8008a00:	f043 0302 	orr.w	r3, r3, #2
 8008a04:	81a3      	strh	r3, [r4, #12]
 8008a06:	e7e3      	b.n	80089d0 <__smakebuf_r+0xc>
 8008a08:	4b0d      	ldr	r3, [pc, #52]	; (8008a40 <__smakebuf_r+0x7c>)
 8008a0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	6020      	str	r0, [r4, #0]
 8008a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a14:	81a3      	strh	r3, [r4, #12]
 8008a16:	9b00      	ldr	r3, [sp, #0]
 8008a18:	6120      	str	r0, [r4, #16]
 8008a1a:	6163      	str	r3, [r4, #20]
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	b15b      	cbz	r3, 8008a38 <__smakebuf_r+0x74>
 8008a20:	4630      	mov	r0, r6
 8008a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a26:	f000 f8d1 	bl	8008bcc <_isatty_r>
 8008a2a:	b128      	cbz	r0, 8008a38 <__smakebuf_r+0x74>
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	f023 0303 	bic.w	r3, r3, #3
 8008a32:	f043 0301 	orr.w	r3, r3, #1
 8008a36:	81a3      	strh	r3, [r4, #12]
 8008a38:	89a0      	ldrh	r0, [r4, #12]
 8008a3a:	4305      	orrs	r5, r0
 8008a3c:	81a5      	strh	r5, [r4, #12]
 8008a3e:	e7cd      	b.n	80089dc <__smakebuf_r+0x18>
 8008a40:	080087d1 	.word	0x080087d1

08008a44 <_malloc_usable_size_r>:
 8008a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a48:	1f18      	subs	r0, r3, #4
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	bfbc      	itt	lt
 8008a4e:	580b      	ldrlt	r3, [r1, r0]
 8008a50:	18c0      	addlt	r0, r0, r3
 8008a52:	4770      	bx	lr

08008a54 <_raise_r>:
 8008a54:	291f      	cmp	r1, #31
 8008a56:	b538      	push	{r3, r4, r5, lr}
 8008a58:	4604      	mov	r4, r0
 8008a5a:	460d      	mov	r5, r1
 8008a5c:	d904      	bls.n	8008a68 <_raise_r+0x14>
 8008a5e:	2316      	movs	r3, #22
 8008a60:	6003      	str	r3, [r0, #0]
 8008a62:	f04f 30ff 	mov.w	r0, #4294967295
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a6a:	b112      	cbz	r2, 8008a72 <_raise_r+0x1e>
 8008a6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a70:	b94b      	cbnz	r3, 8008a86 <_raise_r+0x32>
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 f830 	bl	8008ad8 <_getpid_r>
 8008a78:	462a      	mov	r2, r5
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a82:	f000 b817 	b.w	8008ab4 <_kill_r>
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d00a      	beq.n	8008aa0 <_raise_r+0x4c>
 8008a8a:	1c59      	adds	r1, r3, #1
 8008a8c:	d103      	bne.n	8008a96 <_raise_r+0x42>
 8008a8e:	2316      	movs	r3, #22
 8008a90:	6003      	str	r3, [r0, #0]
 8008a92:	2001      	movs	r0, #1
 8008a94:	e7e7      	b.n	8008a66 <_raise_r+0x12>
 8008a96:	2400      	movs	r4, #0
 8008a98:	4628      	mov	r0, r5
 8008a9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a9e:	4798      	blx	r3
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	e7e0      	b.n	8008a66 <_raise_r+0x12>

08008aa4 <raise>:
 8008aa4:	4b02      	ldr	r3, [pc, #8]	; (8008ab0 <raise+0xc>)
 8008aa6:	4601      	mov	r1, r0
 8008aa8:	6818      	ldr	r0, [r3, #0]
 8008aaa:	f7ff bfd3 	b.w	8008a54 <_raise_r>
 8008aae:	bf00      	nop
 8008ab0:	20000014 	.word	0x20000014

08008ab4 <_kill_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	4d06      	ldr	r5, [pc, #24]	; (8008ad4 <_kill_r+0x20>)
 8008aba:	4604      	mov	r4, r0
 8008abc:	4608      	mov	r0, r1
 8008abe:	4611      	mov	r1, r2
 8008ac0:	602b      	str	r3, [r5, #0]
 8008ac2:	f7f9 f805 	bl	8001ad0 <_kill>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	d102      	bne.n	8008ad0 <_kill_r+0x1c>
 8008aca:	682b      	ldr	r3, [r5, #0]
 8008acc:	b103      	cbz	r3, 8008ad0 <_kill_r+0x1c>
 8008ace:	6023      	str	r3, [r4, #0]
 8008ad0:	bd38      	pop	{r3, r4, r5, pc}
 8008ad2:	bf00      	nop
 8008ad4:	200006d0 	.word	0x200006d0

08008ad8 <_getpid_r>:
 8008ad8:	f7f8 bff3 	b.w	8001ac2 <_getpid>

08008adc <__sread>:
 8008adc:	b510      	push	{r4, lr}
 8008ade:	460c      	mov	r4, r1
 8008ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ae4:	f000 f894 	bl	8008c10 <_read_r>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	bfab      	itete	ge
 8008aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008aee:	89a3      	ldrhlt	r3, [r4, #12]
 8008af0:	181b      	addge	r3, r3, r0
 8008af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008af6:	bfac      	ite	ge
 8008af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008afa:	81a3      	strhlt	r3, [r4, #12]
 8008afc:	bd10      	pop	{r4, pc}

08008afe <__swrite>:
 8008afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b02:	461f      	mov	r7, r3
 8008b04:	898b      	ldrh	r3, [r1, #12]
 8008b06:	4605      	mov	r5, r0
 8008b08:	05db      	lsls	r3, r3, #23
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	4616      	mov	r6, r2
 8008b0e:	d505      	bpl.n	8008b1c <__swrite+0x1e>
 8008b10:	2302      	movs	r3, #2
 8008b12:	2200      	movs	r2, #0
 8008b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b18:	f000 f868 	bl	8008bec <_lseek_r>
 8008b1c:	89a3      	ldrh	r3, [r4, #12]
 8008b1e:	4632      	mov	r2, r6
 8008b20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b24:	81a3      	strh	r3, [r4, #12]
 8008b26:	4628      	mov	r0, r5
 8008b28:	463b      	mov	r3, r7
 8008b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b32:	f000 b817 	b.w	8008b64 <_write_r>

08008b36 <__sseek>:
 8008b36:	b510      	push	{r4, lr}
 8008b38:	460c      	mov	r4, r1
 8008b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b3e:	f000 f855 	bl	8008bec <_lseek_r>
 8008b42:	1c43      	adds	r3, r0, #1
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	bf15      	itete	ne
 8008b48:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b52:	81a3      	strheq	r3, [r4, #12]
 8008b54:	bf18      	it	ne
 8008b56:	81a3      	strhne	r3, [r4, #12]
 8008b58:	bd10      	pop	{r4, pc}

08008b5a <__sclose>:
 8008b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b5e:	f000 b813 	b.w	8008b88 <_close_r>
	...

08008b64 <_write_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4604      	mov	r4, r0
 8008b68:	4608      	mov	r0, r1
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	4d05      	ldr	r5, [pc, #20]	; (8008b84 <_write_r+0x20>)
 8008b70:	602a      	str	r2, [r5, #0]
 8008b72:	461a      	mov	r2, r3
 8008b74:	f7f8 ffe3 	bl	8001b3e <_write>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	d102      	bne.n	8008b82 <_write_r+0x1e>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	b103      	cbz	r3, 8008b82 <_write_r+0x1e>
 8008b80:	6023      	str	r3, [r4, #0]
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
 8008b84:	200006d0 	.word	0x200006d0

08008b88 <_close_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	4d05      	ldr	r5, [pc, #20]	; (8008ba4 <_close_r+0x1c>)
 8008b8e:	4604      	mov	r4, r0
 8008b90:	4608      	mov	r0, r1
 8008b92:	602b      	str	r3, [r5, #0]
 8008b94:	f7f8 ffef 	bl	8001b76 <_close>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_close_r+0x1a>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_close_r+0x1a>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	200006d0 	.word	0x200006d0

08008ba8 <_fstat_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	2300      	movs	r3, #0
 8008bac:	4d06      	ldr	r5, [pc, #24]	; (8008bc8 <_fstat_r+0x20>)
 8008bae:	4604      	mov	r4, r0
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	602b      	str	r3, [r5, #0]
 8008bb6:	f7f8 ffe9 	bl	8001b8c <_fstat>
 8008bba:	1c43      	adds	r3, r0, #1
 8008bbc:	d102      	bne.n	8008bc4 <_fstat_r+0x1c>
 8008bbe:	682b      	ldr	r3, [r5, #0]
 8008bc0:	b103      	cbz	r3, 8008bc4 <_fstat_r+0x1c>
 8008bc2:	6023      	str	r3, [r4, #0]
 8008bc4:	bd38      	pop	{r3, r4, r5, pc}
 8008bc6:	bf00      	nop
 8008bc8:	200006d0 	.word	0x200006d0

08008bcc <_isatty_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	2300      	movs	r3, #0
 8008bd0:	4d05      	ldr	r5, [pc, #20]	; (8008be8 <_isatty_r+0x1c>)
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	602b      	str	r3, [r5, #0]
 8008bd8:	f7f8 ffe7 	bl	8001baa <_isatty>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	d102      	bne.n	8008be6 <_isatty_r+0x1a>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	b103      	cbz	r3, 8008be6 <_isatty_r+0x1a>
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	bd38      	pop	{r3, r4, r5, pc}
 8008be8:	200006d0 	.word	0x200006d0

08008bec <_lseek_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4604      	mov	r4, r0
 8008bf0:	4608      	mov	r0, r1
 8008bf2:	4611      	mov	r1, r2
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4d05      	ldr	r5, [pc, #20]	; (8008c0c <_lseek_r+0x20>)
 8008bf8:	602a      	str	r2, [r5, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f7f8 ffdf 	bl	8001bbe <_lseek>
 8008c00:	1c43      	adds	r3, r0, #1
 8008c02:	d102      	bne.n	8008c0a <_lseek_r+0x1e>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	b103      	cbz	r3, 8008c0a <_lseek_r+0x1e>
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	200006d0 	.word	0x200006d0

08008c10 <_read_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4604      	mov	r4, r0
 8008c14:	4608      	mov	r0, r1
 8008c16:	4611      	mov	r1, r2
 8008c18:	2200      	movs	r2, #0
 8008c1a:	4d05      	ldr	r5, [pc, #20]	; (8008c30 <_read_r+0x20>)
 8008c1c:	602a      	str	r2, [r5, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f7f8 ff70 	bl	8001b04 <_read>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	d102      	bne.n	8008c2e <_read_r+0x1e>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	b103      	cbz	r3, 8008c2e <_read_r+0x1e>
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	200006d0 	.word	0x200006d0

08008c34 <_init>:
 8008c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c36:	bf00      	nop
 8008c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c3a:	bc08      	pop	{r3}
 8008c3c:	469e      	mov	lr, r3
 8008c3e:	4770      	bx	lr

08008c40 <_fini>:
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c42:	bf00      	nop
 8008c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c46:	bc08      	pop	{r3}
 8008c48:	469e      	mov	lr, r3
 8008c4a:	4770      	bx	lr
